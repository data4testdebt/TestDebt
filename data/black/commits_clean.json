{
    "2018-03-14T12:55:32-07:00": {
        "e74117f172e29e8a980e2c9de929ad50d3769150": {
            "datetime": "2018-03-14T12:55:32-07:00",
            "summary": "Initial commit",
            "message": "Initial commit\n",
            "diff": {
                "action/main.py": 77,
                "black.py": 1478,
                "blib2to3/__init__.py": 1,
                "blib2to3/pgen2/driver.py": 178,
                "blib2to3/pgen2/parse.py": 201,
                "blib2to3/pgen2/token.py": 83,
                "blib2to3/pgen2/tokenize.py": 518,
                "blib2to3/pygram.py": 40,
                "docs/conf.py": 216,
                "gallery/gallery.py": 294,
                "profiling/dict_big.py": 8001,
                "profiling/dict_huge.py": 41440,
                "profiling/list_big.py": 4000,
                "profiling/list_huge.py": 22431,
                "profiling/mix_big.py": 1002,
                "profiling/mix_huge.py": 7692,
                "profiling/mix_small.py": 102,
                "scripts/__init__.py": 0,
                "scripts/check_pre_commit_rev_in_example.py": 54,
                "scripts/check_version_in_basics_example.py": 48,
                "scripts/diff_shades_gha_helper.py": 233,
                "scripts/fuzz.py": 92,
                "scripts/make_width_table.py": 65,
                "scripts/migrate-black.py": 96,
                "setup.py": 67,
                "src/black/__init__.py": 1460,
                "src/black/__main__.py": 3,
                "src/black/_width_table.py": 478,
                "src/black/brackets.py": 375,
                "src/black/cache.py": 97,
                "src/black/comments.py": 329,
                "src/black/concurrency.py": 188,
                "src/black/const.py": 4,
                "src/black/debug.py": 47,
                "src/black/files.py": 401,
                "src/black/handle_ipynb_magics.py": 465,
                "src/black/linegen.py": 1572,
                "src/black/lines.py": 1013,
                "src/black/mode.py": 243,
                "src/black/nodes.py": 911,
                "src/black/numerics.py": 60,
                "src/black/output.py": 105,
                "src/black/parsing.py": 224,
                "src/black/report.py": 106,
                "src/black/rusty.py": 27,
                "src/black/strings.py": 329,
                "src/black/trans.py": 2422,
                "src/blackd/__init__.py": 233,
                "src/blackd/__main__.py": 3,
                "src/blackd/middlewares.py": 45,
                "src/blib2to3/__init__.py": 1,
                "src/blib2to3/pgen2/__init__.py": 0,
                "src/blib2to3/pgen2/conv.py": 63,
                "src/blib2to3/pgen2/driver.py": 326,
                "src/blib2to3/pgen2/grammar.py": 104,
                "src/blib2to3/pgen2/literals.py": 44,
                "src/blib2to3/pgen2/parse.py": 393,
                "src/blib2to3/pgen2/pgen.py": 172,
                "src/blib2to3/pgen2/token.py": 91,
                "src/blib2to3/pgen2/tokenize.py": 691,
                "src/blib2to3/pygram.py": 224,
                "src/blib2to3/pytree.py": 431,
                "tests/__init__.py": 0,
                "tests/cantfit.py": 27,
                "tests/comments2.py": 202,
                "tests/composition.py": 21,
                "tests/conftest.py": 1,
                "tests/data/conditional_expression.py": 160,
                "tests/data/fast/pep_572_do_not_remove_parens.py": 25,
                "tests/data/gitignore_used_on_multiple_sources/dir1/a.py": 0,
                "tests/data/gitignore_used_on_multiple_sources/dir1/b.py": 0,
                "tests/data/gitignore_used_on_multiple_sources/dir2/a.py": 0,
                "tests/data/gitignore_used_on_multiple_sources/dir2/b.py": 0,
                "tests/data/ignore_subfolders_gitignore_tests/a.py": 0,
                "tests/data/ignore_subfolders_gitignore_tests/subdir/b.py": 0,
                "tests/data/ignore_subfolders_gitignore_tests/subdir/subdir/c.py": 0,
                "tests/data/include_exclude_tests/b/.definitely_exclude/a.py": 0,
                "tests/data/include_exclude_tests/b/dont_exclude/a.py": 0,
                "tests/data/include_exclude_tests/b/exclude/a.py": 0,
                "tests/data/invalid_gitignore_tests/a.py": 0,
                "tests/data/invalid_nested_gitignore_tests/a.py": 0,
                "tests/data/invalid_nested_gitignore_tests/a/a.py": 0,
                "tests/data/miscellaneous/async_as_identifier.py": 49,
                "tests/data/miscellaneous/blackd_diff.py": 6,
                "tests/data/miscellaneous/debug_visitor.py": 32,
                "tests/data/miscellaneous/decorators.py": 182,
                "tests/data/miscellaneous/docstring_no_string_normalization.py": 249,
                "tests/data/miscellaneous/docstring_preview_no_string_normalization.py": 10,
                "tests/data/miscellaneous/force_py36.py": 16,
                "tests/data/miscellaneous/force_pyi.py": 65,
                "tests/data/miscellaneous/invalid_header.py": 2,
                "tests/data/miscellaneous/linelength6.py": 5,
                "tests/data/miscellaneous/long_strings_flag_disabled.py": 292,
                "tests/data/miscellaneous/missing_final_newline.py": 3,
                "tests/data/miscellaneous/pattern_matching_invalid.py": 18,
                "tests/data/miscellaneous/power_op_newline.py": 10,
                "tests/data/miscellaneous/python2_detection.py": 90,
                "tests/data/miscellaneous/string_quotes.py": 112,
                "tests/data/nested_gitignore_tests/root/a.py": 1,
                "tests/data/nested_gitignore_tests/root/b.py": 1,
                "tests/data/nested_gitignore_tests/root/c.py": 1,
                "tests/data/nested_gitignore_tests/root/child/a.py": 1,
                "tests/data/nested_gitignore_tests/root/child/b.py": 1,
                "tests/data/nested_gitignore_tests/root/child/c.py": 1,
                "tests/data/nested_gitignore_tests/x.py": 0,
                "tests/data/preview/async_stmts.py": 27,
                "tests/data/preview/cantfit.py": 107,
                "tests/data/preview/comments7.py": 285,
                "tests/data/preview/format_unicode_escape_seq.py": 33,
                "tests/data/preview/long_dict_values.py": 90,
                "tests/data/preview/long_strings.py": 847,
                "tests/data/preview/long_strings__east_asian_width.py": 25,
                "tests/data/preview/long_strings__edge_case.py": 140,
                "tests/data/preview/long_strings__regression.py": 1249,
                "tests/data/preview/long_strings__type_annotations.py": 59,
                "tests/data/preview/multiline_strings.py": 358,
                "tests/data/preview/no_blank_line_before_docstring.py": 58,
                "tests/data/preview/percent_precedence.py": 41,
                "tests/data/preview/prefer_rhs_split.py": 85,
                "tests/data/preview/return_annotation_brackets_string.py": 12,
                "tests/data/preview/trailing_comma.py": 55,
                "tests/data/preview_context_managers/auto_detect/features_3_10.py": 35,
                "tests/data/preview_context_managers/auto_detect/features_3_11.py": 37,
                "tests/data/preview_context_managers/auto_detect/features_3_8.py": 46,
                "tests/data/preview_context_managers/auto_detect/features_3_9.py": 34,
                "tests/data/preview_context_managers/targeting_py38.py": 54,
                "tests/data/preview_context_managers/targeting_py39.py": 174,
                "tests/data/py_310/parenthesized_context_managers.py": 45,
                "tests/data/py_310/pattern_matching_complex.py": 144,
                "tests/data/py_310/pattern_matching_extras.py": 119,
                "tests/data/py_310/pattern_matching_generic.py": 107,
                "tests/data/py_310/pattern_matching_simple.py": 92,
                "tests/data/py_310/pattern_matching_style.py": 91,
                "tests/data/py_310/pep_572_py310.py": 15,
                "tests/data/py_310/remove_newline_after_match.py": 34,
                "tests/data/py_310/starred_for_target.py": 27,
                "tests/data/py_311/pep_646.py": 194,
                "tests/data/py_311/pep_654.py": 53,
                "tests/data/py_311/pep_654_style.py": 111,
                "tests/data/py_312/type_aliases.py": 13,
                "tests/data/py_312/type_params.py": 57,
                "tests/data/py_36/numeric_literals.py": 44,
                "tests/data/py_36/numeric_literals_skip_underscores.py": 23,
                "tests/data/py_37/python37.py": 65,
                "tests/data/py_38/pep_570.py": 44,
                "tests/data/py_38/pep_572.py": 47,
                "tests/data/py_38/pep_572_remove_parens.py": 143,
                "tests/data/py_38/python38.py": 45,
                "tests/data/py_39/pep_572_py39.py": 7,
                "tests/data/py_39/python39.py": 37,
                "tests/data/py_39/remove_with_brackets.py": 119,
                "tests/data/simple_cases/attribute_access_on_number_literals.py": 47,
                "tests/data/simple_cases/beginning_backslash.py": 12,
                "tests/data/simple_cases/bracketmatch.py": 15,
                "tests/data/simple_cases/class_blank_parentheses.py": 58,
                "tests/data/simple_cases/class_methods_new_line.py": 270,
                "tests/data/simple_cases/collections.py": 174,
                "tests/data/simple_cases/comment_after_escaped_newline.py": 18,
                "tests/data/simple_cases/comments.py": 42,
                "tests/data/simple_cases/comments2.py": 343,
                "tests/data/simple_cases/comments3.py": 48,
                "tests/data/simple_cases/comments4.py": 94,
                "tests/data/simple_cases/comments5.py": 73,
                "tests/data/simple_cases/comments6.py": 118,
                "tests/data/simple_cases/comments8.py": 15,
                "tests/data/simple_cases/comments9.py": 305,
                "tests/data/simple_cases/comments_non_breaking_space.py": 44,
                "tests/data/simple_cases/composition.py": 181,
                "tests/data/simple_cases/composition_no_trailing_comma.py": 367,
                "tests/data/simple_cases/docstring.py": 444,
                "tests/data/simple_cases/docstring_no_extra_empty_line_before_eof.py": 4,
                "tests/data/simple_cases/docstring_preview.py": 103,
                "tests/data/simple_cases/empty_lines.py": 186,
                "tests/data/simple_cases/expression.py": 630,
                "tests/data/simple_cases/fmtonoff.py": 413,
                "tests/data/simple_cases/fmtonoff2.py": 40,
                "tests/data/simple_cases/fmtonoff3.py": 35,
                "tests/data/simple_cases/fmtonoff4.py": 36,
                "tests/data/simple_cases/fmtonoff5.py": 176,
                "tests/data/simple_cases/fmtpass_imports.py": 19,
                "tests/data/simple_cases/fmtskip.py": 3,
                "tests/data/simple_cases/fmtskip2.py": 17,
                "tests/data/simple_cases/fmtskip3.py": 20,
                "tests/data/simple_cases/fmtskip4.py": 13,
                "tests/data/simple_cases/fmtskip5.py": 22,
                "tests/data/simple_cases/fmtskip6.py": 13,
                "tests/data/simple_cases/fmtskip7.py": 11,
                "tests/data/simple_cases/fmtskip8.py": 62,
                "tests/data/simple_cases/fstring.py": 25,
                "tests/data/simple_cases/function.py": 247,
                "tests/data/simple_cases/function2.py": 121,
                "tests/data/simple_cases/function_trailing_comma.py": 178,
                "tests/data/simple_cases/import_spacing.py": 118,
                "tests/data/simple_cases/multiline_consecutive_open_parentheses_ignore.py": 41,
                "tests/data/simple_cases/one_element_subscript.py": 36,
                "tests/data/simple_cases/pep_604.py": 25,
                "tests/data/simple_cases/power_op_spacing.py": 131,
                "tests/data/simple_cases/prefer_rhs_split_reformatted.py": 38,
                "tests/data/simple_cases/remove_await_parens.py": 176,
                "tests/data/simple_cases/remove_except_parens.py": 79,
                "tests/data/simple_cases/remove_for_brackets.py": 48,
                "tests/data/simple_cases/remove_newline_after_code_block_open.py": 189,
                "tests/data/simple_cases/remove_parens.py": 142,
                "tests/data/simple_cases/return_annotation_brackets.py": 210,
                "tests/data/simple_cases/skip_magic_trailing_comma.py": 74,
                "tests/data/simple_cases/slices.py": 31,
                "tests/data/simple_cases/string_prefixes.py": 45,
                "tests/data/simple_cases/torture.py": 91,
                "tests/data/simple_cases/trailing_comma_optional_parens1.py": 63,
                "tests/data/simple_cases/trailing_comma_optional_parens2.py": 12,
                "tests/data/simple_cases/trailing_comma_optional_parens3.py": 21,
                "tests/data/simple_cases/trailing_commas_in_leading_parts.py": 88,
                "tests/data/simple_cases/tricky_unicode_symbols.py": 9,
                "tests/data/simple_cases/tupleassign.py": 23,
                "tests/data/simple_cases/whitespace.py": 6,
                "tests/data/type_comments/type_comment_syntax_error.py": 11,
                "tests/expression.py": 240,
                "tests/function.py": 137,
                "tests/import_spacing.py": 77,
                "tests/optional.py": 124,
                "tests/test_black.py": 2577,
                "tests/test_blackd.py": 242,
                "tests/test_format.py": 212,
                "tests/test_ipynb.py": 521,
                "tests/test_no_ipynb.py": 36,
                "tests/test_trans.py": 51,
                "tests/util.py": 211
            },
            "is_test": true,
            "is_fix": false
        },
        "b1075f8b023a6e9f57f19404ee01137fdf5b6994": {
            "datetime": "2018-03-14T14:16:34-07:00",
            "summary": "Include Grammar.txt in the distribution",
            "message": "Include Grammar.txt in the distribution\n",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "f5cc3e35562c3b0b2d8efcbfdb326a2360fff976": {
            "datetime": "2018-03-14T14:20:16-07:00",
            "summary": "Actually use the bundled Grammar.txt",
            "message": "Actually use the bundled Grammar.txt\n",
            "diff": {
                "blib2to3/pygram.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "76e6acb9ca1fdb0bf99ec769f0cf888ba85a42c4": {
            "datetime": "2018-03-15T11:09:19-07:00",
            "summary": "Add Python 3-only classifier",
            "message": "Add Python 3-only classifier\n\nhttps://pypi.python.org/pypi?%3Aaction=list_classifiers",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "e1e89091d1de878c98e2d2b0cefd81cc75e7a128": {
            "datetime": "2018-03-15T11:21:53-07:00",
            "summary": "Fix invalid spacing of dots in relative imports",
            "message": "Fix invalid spacing of dots in relative imports\n\nFixes #6\nFixes #13\n",
            "diff": {
                "black.py": 22,
                "tests/import_spacing.py": 30
            },
            "is_test": false,
            "is_fix": false
        },
        "174fc47b7893b98d4a4393da849c09b6bd415764": {
            "datetime": "2018-03-15T11:28:59-07:00",
            "summary": "Fix spurious space in parenthesized set expressions",
            "message": "Fix spurious space in parenthesized set expressions\n\nFixes #7\n",
            "diff": {
                "black.py": 1,
                "tests/expression.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "da3c2f358208dc9838c63d57b66c89e164eb241a": {
            "datetime": "2018-03-15T12:53:23-07:00",
            "summary": "Fix spurious extra spaces after opening parentheses and in default arguments",
            "message": "Fix spurious extra spaces after opening parentheses and in default arguments\n\nFixes #14\nFixes #17\n",
            "diff": {
                "black.py": 113,
                "tests/function.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "5370714c963fa59d84356e2841882e42ab16641e": {
            "datetime": "2018-03-15T14:54:37-07:00",
            "summary": "Fix spurious space after unary expression",
            "message": "Fix spurious space after unary expression\n\nThis happened when the operand was a complex expression.\n\nFixes #15\n",
            "diff": {
                "black.py": 3,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4c480bcac288883040e6fda3c75825a0da54eb66": {
            "datetime": "2018-03-15T16:02:57-07:00",
            "summary": "Add --check",
            "message": "Add --check\n\nFixes #9\n",
            "diff": {
                "black.py": 43
            },
            "is_test": false,
            "is_fix": false
        },
        "c85cb48ec2cfdee2e742b59855e38431ff8ed46a": {
            "datetime": "2018-03-15T17:05:59-07:00",
            "summary": "Fix tests after introducing --check",
            "message": "Fix tests after introducing --check\n",
            "diff": {
                "tests/test_black.py": 32
            },
            "is_test": true,
            "is_fix": true
        },
        "c26daa4fd50e2db13f38279ce27b51b0ae4479fe": {
            "datetime": "2018-03-15T19:23:19-07:00",
            "summary": "Don't split on for-loop variable unpacks",
            "message": "Don't split on for-loop variable unpacks\n\nFixes #23\n",
            "diff": {
                "black.py": 27,
                "tests/expression.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "5fb5cc8c2bd5a0bb1359fb69cdb705b55afade52": {
            "datetime": "2018-03-15T19:44:09-07:00",
            "summary": "Only use trailing commas in function signatures when it's safe",
            "message": "Only use trailing commas in function signatures when it's safe\n\nTrailing commas after * or ** in a function signature are only safe for Python 3.6\ncode.  So now Black checks whether the file was already Python 3.6 to begin\nwith.  If so, trailing commas are used in such cases.  Otherwise, they're not.\n\nWhen * and ** don't appear in a function signature, the trailing comma is\nalways safe.\n\nFixes #8\n",
            "diff": {
                "black.py": 62,
                "tests/expression.py": 18,
                "tests/fstring.py": 5,
                "tests/function.py": 4,
                "tests/test_black.py": 26
            },
            "is_test": true,
            "is_fix": false
        },
        "907dc6c35e23a0111b140962265d08c23f97082b": {
            "datetime": "2018-03-15T23:26:56-07:00",
            "summary": "Clean up typing ignores, fix build",
            "message": "Clean up typing ignores, fix build\n",
            "diff": {
                "black.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "fb84d8b2ee524a9b3bff51fa35054abb44740f1d": {
            "datetime": "2018-03-15T23:39:45-07:00",
            "summary": "Fix numpy-style array indexing",
            "message": "Fix numpy-style array indexing\n\nFixes #33\n",
            "diff": {
                "black.py": 9,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "9fea4780228dc8e9ceb53ddb18fe1a87f6e05546": {
            "datetime": "2018-03-15T23:55:22-07:00",
            "summary": "Also run mypy on test_black.py",
            "message": "Also run mypy on test_black.py\n",
            "diff": {
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "22ce1e1fc389869696f8cfc5627b8b1b322308b4": {
            "datetime": "2018-03-15T23:56:30-07:00",
            "summary": "Fix spurious space after star-based unary expression",
            "message": "Fix spurious space after star-based unary expression\n\nThis happened when the operand was a complex expression.\n\nFixes #31\n",
            "diff": {
                "black.py": 19,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "1ec7544ab74caa080d6597c13bcc5927b75aca41": {
            "datetime": "2018-03-16T00:01:22-07:00",
            "summary": "Bump version, update README with current fixes",
            "message": "Bump version, update README with current fixes\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0de0851a47cc36173028b52743caff0af0344278": {
            "datetime": "2018-03-16T00:47:01-07:00",
            "summary": "Add flake8 to CI, too",
            "message": "Add flake8 to CI, too\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "6ba615092e0b323072058f0a90bb7ab301957b7f": {
            "datetime": "2018-03-16T17:09:23-07:00",
            "summary": "Ignore empty bracket pairs while splitting",
            "message": "Ignore empty bracket pairs while splitting\n\nFixes #35\n",
            "diff": {
                "black.py": 31,
                "tests/function.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "9c9f6eb6d53c4a38c46acfcffa1c90a787a72a77": {
            "datetime": "2018-03-16T17:32:55-07:00",
            "summary": "Remove the trailing comma if there is only one argument to a call",
            "message": "Remove the trailing comma if there is only one argument to a call\n\nThis makes it consistent with removing the trailing comma when multiple\narguments to a call fit in a single line. It also makes it a tiny bit more\nlikely that an expression will fit a line that didn't use to.\n",
            "diff": {
                "black.py": 10,
                "tests/expression.py": 10,
                "tests/function.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "28d1442d573abc9aeb567242f584f38eaec3f922": {
            "datetime": "2018-03-16T17:43:14-07:00",
            "summary": "Use implicit defaults for auto_attribs",
            "message": "Use implicit defaults for auto_attribs\n\nIt reads much nicer.\n",
            "diff": {
                "black.py": 42
            },
            "is_test": false,
            "is_fix": false
        },
        "497de7fa08b5072da3cf328e6b870ce2575cb2a7": {
            "datetime": "2018-03-16T21:45:51-07:00",
            "summary": "Line breaks before logical operators (#36)",
            "message": "Line breaks before logical operators (#36)\n\nFixes #21",
            "diff": {
                "black.py": 125,
                "tests/comments2.py": 12,
                "tests/expression.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "c90cf42d7ce0e529af677e082ab651180339084b": {
            "datetime": "2018-03-16T21:47:52-07:00",
            "summary": "blib2to3: Never put prefixes on DEDENT leaves",
            "message": "blib2to3: Never put prefixes on DEDENT leaves\n",
            "diff": {
                "blib2to3/pgen2/driver.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "b9c06a0d23b7d422d1c8dc1727d6fe15757a4716": {
            "datetime": "2018-03-16T22:14:43-07:00",
            "summary": "Don't put four empty lines between top-level functions split by a comment",
            "message": "Don't put four empty lines between top-level functions split by a comment\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "6c3ce53b60b68ca2b532935aeee89729f0bd9fd9": {
            "datetime": "2018-03-17T00:40:21-07:00",
            "summary": "Consolidate empty line handling in EmptyLineTracker",
            "message": "Consolidate empty line handling in EmptyLineTracker\n\nPreviously, extra newlines left on imports were handled sort of by accident.\nNow it's all handled uniformly in one place.\n",
            "diff": {
                "black.py": 28,
                "tests/import_spacing.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "68c71b621f5c80c243ba8a177c5a2059b3ace1d9": {
            "datetime": "2018-03-17T00:59:28-07:00",
            "summary": "Don't fold postscriptum standalone comment into last statement",
            "message": "Don't fold postscriptum standalone comment into last statement\n\nThis happened when the last statement was a simple statement.\n\nFixes #18\nFixes #28\n",
            "diff": {
                "black.py": 2,
                "tests/expression.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "64aae0e57d7098bcb9b2cde1aa6aff3b3fd0fc0f": {
            "datetime": "2018-03-17T01:26:30-07:00",
            "summary": "Native README.md support on PyPI \\o/",
            "message": "Native README.md support on PyPI \\o/\n\nSee: https://dustingram.com/articles/2018/03/16/markdown-descriptions-on-pypi\n",
            "diff": {
                "setup.py": 17
            },
            "is_test": false,
            "is_fix": false
        },
        "2fa31ff31469e587ea23cb86308495c4673b5ddd": {
            "datetime": "2018-03-17T02:39:53-07:00",
            "summary": "More support for numpy tuple indexing",
            "message": "More support for numpy tuple indexing\n",
            "diff": {
                "black.py": 10,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "10d8976a79f5a7f7e5e36369a81d9e5c983332d1": {
            "datetime": "2018-03-19T11:07:10-07:00",
            "summary": "Add piping from stdin to stdout with a - (#25)",
            "message": "Add piping from stdin to stdout with a - (#25)\n\nBeing able to format code by piping it through the formatter makes it much easier to integrate with tools like google/vim-codefmt or Chiel92/vim-autoformat.",
            "diff": {
                "black.py": 67,
                "tests/test_black.py": 28
            },
            "is_test": true,
            "is_fix": false
        },
        "d9c6b9907390ca73130df1d8253481505eb2bce7": {
            "datetime": "2018-03-20T18:54:01-07:00",
            "summary": "Restore ability to format code with legacy usage of `async` as a name",
            "message": "Restore ability to format code with legacy usage of `async` as a name\n\nFixes #20\nFixes #42\n",
            "diff": {
                "black.py": 5,
                "blib2to3/pgen2/token.py": 6,
                "blib2to3/pgen2/tokenize.py": 76
            },
            "is_test": false,
            "is_fix": false
        },
        "e911c79809c4fd9b0773dea5b6a0e710b59614cf": {
            "datetime": "2018-03-20T18:54:19-07:00",
            "summary": "Don't remove single empty lines outside of bracketed expressions",
            "message": "Don't remove single empty lines outside of bracketed expressions\n\nFixes #19\n",
            "diff": {
                "black.py": 30,
                "tests/comments2.py": 1,
                "tests/empty_lines.py": 173,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "5bc40707afa5fb53bbc2484ed34f69b011b98172": {
            "datetime": "2018-03-20T18:54:33-07:00",
            "summary": "Fix numpy-style array indexing for real",
            "message": "Fix numpy-style array indexing for real\n\nFixes #33\n",
            "diff": {
                "black.py": 4,
                "tests/expression.py": 34
            },
            "is_test": false,
            "is_fix": false
        },
        "d1e0d79e38db934a65dded44b903f05ab85829b4": {
            "datetime": "2018-03-20T18:54:55-07:00",
            "summary": "Don't write back stdin to stdout when --check is passed",
            "message": "Don't write back stdin to stdout when --check is passed\n",
            "diff": {
                "black.py": 11,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "591bedc2be0cec92c5f253fd473864c876233114": {
            "datetime": "2018-03-20T18:55:04-07:00",
            "summary": "Support skipping AST printing on test failure",
            "message": "Support skipping AST printing on test failure\n",
            "diff": {
                "tests/test_black.py": 3
            },
            "is_test": true,
            "is_fix": false
        },
        "b1a7600b0a0691821926a07015f7bc66ca0ae4e9": {
            "datetime": "2018-03-20T18:55:19-07:00",
            "summary": "Treat comments less magically",
            "message": "Treat comments less magically\n",
            "diff": {
                "black.py": 101,
                "tests/comments.py": 7,
                "tests/comments2.py": 40,
                "tests/empty_lines.py": 7,
                "tests/import_spacing.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "5fa38d4c3bdae68abfe235709b69b1bc8ae75c3a": {
            "datetime": "2018-03-20T19:04:49-07:00",
            "summary": "Fix tests on 3.7",
            "message": "Fix tests on 3.7\n",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "1b696555e18afdfee3ca45526370de1af2cd961d": {
            "datetime": "2018-03-20T19:05:51-07:00",
            "summary": "18.3a3",
            "message": "18.3a3\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "c7c8c4f5018844d69edbc961c922b29f0d6ceeaf": {
            "datetime": "2018-03-21T18:01:07-07:00",
            "summary": "Pin attrs to >=17.4.0 for @dataclass use",
            "message": "Pin attrs to >=17.4.0 for @dataclass use\n\nFixes #54\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "92b377556e24616d5980a9010cf558da7fa35d28": {
            "datetime": "2018-03-21T18:34:16-07:00",
            "summary": "Don't omit whitespace when the factor is not a math operator",
            "message": "Don't omit whitespace when the factor is not a math operator\n\nFixes #55\n",
            "diff": {
                "black.py": 7,
                "tests/expression.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "df7aacb43eb16f91adcb558905625d75ee804753": {
            "datetime": "2018-03-21T18:35:25-07:00",
            "summary": "Omit extra space in kwarg unpacking if it's an argument",
            "message": "Omit extra space in kwarg unpacking if it's an argument\n\nFixes #46\n",
            "diff": {
                "black.py": 19,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "a970a205bcea73672e85468836b477d3262ee75e": {
            "datetime": "2018-03-22T16:33:50-07:00",
            "summary": "Don't remove the single trailing comma from square bracket indexing",
            "message": "Don't remove the single trailing comma from square bracket indexing\n\nFixes #59\n",
            "diff": {
                "black.py": 8,
                "tests/expression.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "7914a5b0a228fa57e060b79c75d970cc48c7e914": {
            "datetime": "2018-03-22T17:15:28-07:00",
            "summary": "Mention delimiter_split() in CannotSplit docstring",
            "message": "Mention delimiter_split() in CannotSplit docstring\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "8de552eb4f0fbf1ad84812cde71489cc00d3ed1f": {
            "datetime": "2018-03-22T17:33:44-07:00",
            "summary": "Only return exit code 1 when --check is used",
            "message": "Only return exit code 1 when --check is used\n\nAlso, output less confusing messages in --check.\n\nFixes #50\n",
            "diff": {
                "black.py": 26,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "6316e293ac30a2837ec20eba289fd28a2a18cf89": {
            "datetime": "2018-03-22T23:19:23-07:00",
            "summary": "Automatic detection of deprecated Python 2 forms of print and exec",
            "message": "Automatic detection of deprecated Python 2 forms of print and exec\n\nNote: if those are handled, you can't use --safe because this check is using\nPython 3.6+ builtin AST.\n\nFixes #49\n",
            "diff": {
                "black.py": 51,
                "blib2to3/pygram.py": 7,
                "tests/function.py": 6,
                "tests/python2.py": 33,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "7bd6f3cb2ff11d385dbe433e2b03e9f7c94be33e": {
            "datetime": "2018-03-22T23:22:46-07:00",
            "summary": "Ignore typing error around Node/Leaf",
            "message": "Ignore typing error around Node/Leaf\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "cf6f577928f5a1f4e98b02b8e723311cae830305": {
            "datetime": "2018-03-22T23:52:21-07:00",
            "summary": "Properle space complex expressions in default values of typed arguments",
            "message": "Properle space complex expressions in default values of typed arguments\n\nFixes #60\n",
            "diff": {
                "black.py": 23,
                "tests/function.py": 15
            },
            "is_test": false,
            "is_fix": false
        },
        "475179a53af1948ca726de1b11d4cdbe2aa90e58": {
            "datetime": "2018-03-23T08:56:55-07:00",
            "summary": "Omit extra space in Sphinx auto-attribute comments",
            "message": "Omit extra space in Sphinx auto-attribute comments\n\nThis feature of Sphinx is described in:\nhttp://www.sphinx-doc.org/en/stable/ext/autodoc.html#directive-autoattribute\n\nFixes #68\n",
            "diff": {
                "black.py": 2,
                "tests/comments.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "c98a6f134f4b2b831e7e659de0c217c118270a61": {
            "datetime": "2018-03-23T14:27:04-07:00",
            "summary": "add sphinx docs skeleton (#71)",
            "message": "add sphinx docs skeleton (#71)\n\n",
            "diff": {
                "docs/conf.py": 208
            },
            "is_test": false,
            "is_fix": false
        },
        "7e1c5b2ba6355f1a6916cf5545dc577cf2e6c727": {
            "datetime": "2018-03-23T16:08:05-07:00",
            "summary": "Introduce DebugVisitor.show() + tests",
            "message": "Introduce DebugVisitor.show() + tests\n",
            "diff": {
                "black.py": 9,
                "tests/debug_visitor.py": 32,
                "tests/test_black.py": 26
            },
            "is_test": true,
            "is_fix": false
        },
        "8c565d86843649dc1467b5909b446021e4417bba": {
            "datetime": "2018-03-23T17:15:47-07:00",
            "summary": "blib2to3: Never put prefixes on INDENT leaves either",
            "message": "blib2to3: Never put prefixes on INDENT leaves either\n",
            "diff": {
                "blib2to3/pgen2/driver.py": 4,
                "blib2to3/pgen2/tokenize.py": 9,
                "tests/empty_lines.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "0677a539370b296399854e427ce7df2955ecfe57": {
            "datetime": "2018-03-23T17:16:08-07:00",
            "summary": "Implement `# fmt: off` and `# fmt: on`",
            "message": "Implement `# fmt: off` and `# fmt: on`\n\nFixes #5\n",
            "diff": {
                "black.py": 162,
                "tests/comments.py": 1,
                "tests/fmtonoff.py": 177,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "9e3175428470403d01cdee9c710d5d38e8610860": {
            "datetime": "2018-03-24T17:15:48-07:00",
            "summary": "Documentation fixes for ReadTheDocs",
            "message": "Documentation fixes for ReadTheDocs\n",
            "diff": {
                "docs/conf.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "be563a4748956d30a4224d42902c6f482b256be9": {
            "datetime": "2018-03-24T17:54:13-07:00",
            "summary": "More documentation fixes for ReadTheDocs",
            "message": "More documentation fixes for ReadTheDocs\n",
            "diff": {
                "docs/conf.py": 26
            },
            "is_test": false,
            "is_fix": false
        },
        "cbf010e0a208ccef9a498e3276cdf79b23a01440": {
            "datetime": "2018-03-26T00:42:29-07:00",
            "summary": "The site is cleaner without the 'Related' cruft.",
            "message": "The site is cleaner without the 'Related' cruft.\n",
            "diff": {
                "docs/conf.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "c5fd578279ce9c576f5a5c9b56e5580a14227997": {
            "datetime": "2018-03-26T00:57:02-07:00",
            "summary": "18.3a4",
            "message": "18.3a4\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4b8823e5633b22d13650cad6e06b0330ce9985fc": {
            "datetime": "2018-03-26T02:15:13-07:00",
            "summary": "Self-host PyPI-related badges",
            "message": "Self-host PyPI-related badges\n",
            "diff": {
                "docs/conf.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "611737f9cc186d3e6463ef774fdbda4f77055d4c": {
            "datetime": "2018-03-26T18:39:02-07:00",
            "summary": "Big documentation deduplication",
            "message": "Big documentation deduplication\n\nMost is not generated from README.md so we no longer have to remember to update\ntwo Change Logs, and so on!\n\nIf we decide to diverge from the README in Sphinx, that's fine, too. We will\njust create dedicated documents.\n",
            "diff": {
                "docs/conf.py": 44
            },
            "is_test": false,
            "is_fix": false
        },
        "fc869039ebcc0c0ff922ea9b2713480c119e5341": {
            "datetime": "2018-03-26T18:41:25-07:00",
            "summary": "Don't crash and burn on empty lines with trailing whitespace",
            "message": "Don't crash and burn on empty lines with trailing whitespace\n\nFixes #80\n",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 24,
                "tests/function.py": 1,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "e5f8251704c22b143b79474905c6c4b7e10ddb47": {
            "datetime": "2018-03-26T22:55:56-07:00",
            "summary": "Allow up to two empty lines on module level and single empty lines otherwise",
            "message": "Allow up to two empty lines on module level and single empty lines otherwise\n\nFixes #74\n",
            "diff": {
                "black.py": 4,
                "tests/empty_lines.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "a9f50cd0b58259a11a1c851bde7b4f11321e5b3b": {
            "datetime": "2018-03-28T10:12:27-07:00",
            "summary": "document classes, functions, exceptions (#82)",
            "message": "document classes, functions, exceptions (#82)\n\n",
            "diff": {
                "docs/conf.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "d01460d9393d611c0673723320f7a1e50c424e21": {
            "datetime": "2018-03-28T17:43:18-07:00",
            "summary": "Auto-generated documentation-related fixes",
            "message": "Auto-generated documentation-related fixes\n",
            "diff": {
                "black.py": 161,
                "docs/conf.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "7f7b31058af65b245bfc1c35fd37f2ff6e78e43d": {
            "datetime": "2018-03-28T19:03:16-07:00",
            "summary": "More minor documentation-related changes",
            "message": "More minor documentation-related changes\n",
            "diff": {
                "black.py": 42,
                "docs/conf.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "44a235173119eb63b27a648b931940f13c04f424": {
            "datetime": "2018-03-28T19:31:53-07:00",
            "summary": "Use imperative language in all docstrings",
            "message": "Use imperative language in all docstrings\n",
            "diff": {
                "black.py": 152
            },
            "is_test": false,
            "is_fix": false
        },
        "3ee9ebb0916d76be904c948d62e9b55f569b6f98": {
            "datetime": "2018-03-29T15:21:18-07:00",
            "summary": "Fix --check with multiple files (#88)",
            "message": "Fix --check with multiple files (#88)\n\nPassing multiple files to --check would previously result in the report\r\nbeing printed as if the files had been written to.",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "c55d08d0b96c8de8bd867ca315e380d9e9d2d7ec": {
            "datetime": "2018-03-29T21:10:00-07:00",
            "summary": "Remove standalone comment hacks",
            "message": "Remove standalone comment hacks\n\nNow Black properly splits standalone comments within bracketed expressions.\nThey are treated as another type of split instead of being bolted on with\nwhitespace prefixes.\n\nA related fix: now multiple comments might appear after a given leaf.\n\nFixes #22\n",
            "diff": {
                "black.py": 217,
                "tests/comments3.py": 38,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "17b22642f5f4f3193dfd10fcc86992fb225d6be1": {
            "datetime": "2018-03-29T21:19:20-07:00",
            "summary": "More comments tests",
            "message": "More comments tests\n",
            "diff": {
                "tests/comments4.py": 76,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "ba61bfe3865d8a8fc29abe7f8a94740b618e80ba": {
            "datetime": "2018-03-30T19:38:08-07:00",
            "summary": "Graceful shutdown in case of cancellation",
            "message": "Graceful shutdown in case of cancellation\n",
            "diff": {
                "black.py": 43
            },
            "is_test": false,
            "is_fix": false
        },
        "80bd2b3134b4f01da4e279d040a224326b3577e5": {
            "datetime": "2018-03-31T11:21:25-07:00",
            "summary": "Normalize string quotes (#75)",
            "message": "Normalize string quotes (#75)\n\n* Normalize string quotes\r\n\r\nConvert single-quoted strings to double-quoted. Convert triple single-quoted strings to triple double-quoted. Do not touch any strings where conversion would increase the number of backslashes.\r\n\r\nFixes #51.\r\n\r\n* reformat Black itself\r\n",
            "diff": {
                "black.py": 253,
                "setup.py": 56,
                "tests/comments.py": 4,
                "tests/comments2.py": 34,
                "tests/comments3.py": 2,
                "tests/comments4.py": 2,
                "tests/composition.py": 12,
                "tests/empty_lines.py": 14,
                "tests/expression.py": 36,
                "tests/fmtonoff.py": 18,
                "tests/fstring.py": 8,
                "tests/function.py": 8,
                "tests/string_quotes.py": 37,
                "tests/test_black.py": 140
            },
            "is_test": true,
            "is_fix": false
        },
        "3455389e486e0bb1d8a8318cb5f266b7ec8964dd": {
            "datetime": "2018-03-31T11:52:11-07:00",
            "summary": "Lines now break before all delimiters (#94)",
            "message": "Lines now break before all delimiters (#94)\n\nThe default behaviour is that now all lines break *before* delimiters,\r\ninstead of afterwards. The special cases for this are commas and\r\nbehaviour around args.\r\n\r\nResolves #73",
            "diff": {
                "black.py": 99,
                "tests/expression.py": 66,
                "tests/import_spacing.py": 40
            },
            "is_test": false,
            "is_fix": false
        },
        "a42aef780630bce97c01dbf33a1947ea108e6e29": {
            "datetime": "2018-03-31T14:42:48-07:00",
            "summary": "Describe how string literals are handled (#96)",
            "message": "Describe how string literals are handled (#96)\n\n",
            "diff": {
                "black.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "1d45f6e6a11675ee1ee5a3b0c3664cd7feec532b": {
            "datetime": "2018-03-31T15:46:09-07:00",
            "summary": "Improve test coverage a bit",
            "message": "Improve test coverage a bit\n",
            "diff": {
                "tests/test_black.py": 45
            },
            "is_test": true,
            "is_fix": false
        },
        "a20a3eeb0f738d3434efe3be8932db11722757a4": {
            "datetime": "2018-03-31T15:46:09-07:00",
            "summary": "Support --diff for both files and stdin",
            "message": "Support --diff for both files and stdin\n\nFixes #87\n",
            "diff": {
                "black.py": 91,
                "tests/test_black.py": 54
            },
            "is_test": true,
            "is_fix": false
        },
        "4787294622f9053525fb2373db207dd4a35520dc": {
            "datetime": "2018-03-31T23:32:11-07:00",
            "summary": "Don't insert trailing commas after standalone comments",
            "message": "Don't insert trailing commas after standalone comments\n",
            "diff": {
                "black.py": 5,
                "tests/function.py": 15
            },
            "is_test": false,
            "is_fix": false
        },
        "2f260514f67f154d1c8f59bc9ea899406d8a2cfd": {
            "datetime": "2018-04-01T00:08:09-07:00",
            "summary": "Ignore `# fmt: off` as inline comment",
            "message": "Ignore `# fmt: off` as inline comment\n\nBlack cannot currently support this form due to its generator-based nature.\nThis is mostly a problem for existing `# yapf: disable` usage as trailing\ncomment.\n\nFixes #95\n",
            "diff": {
                "black.py": 11,
                "tests/fmtonoff.py": 24
            },
            "is_test": false,
            "is_fix": false
        },
        "65c52a655fd67480a2017a79c99094039dcaffa3": {
            "datetime": "2018-04-01T00:30:45-07:00",
            "summary": "18.4a0",
            "message": "18.4a0\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "2d80366ac1304c6eff84604d1308ecae5daeef32": {
            "datetime": "2018-04-02T18:28:24-07:00",
            "summary": "[blib2to3] Make the grammar pickles faster",
            "message": "[blib2to3] Make the grammar pickles faster\n",
            "diff": {
                "blib2to3/pgen2/grammar.py": 27
            },
            "is_test": false,
            "is_fix": false
        },
        "21c32d80b6f505db545840be21030ddbeef9224e": {
            "datetime": "2018-04-02T23:17:39-07:00",
            "summary": "Add --quiet",
            "message": "Add --quiet\n\nFixes #78\n",
            "diff": {
                "black.py": 29
            },
            "is_test": false,
            "is_fix": false
        },
        "1d3d743dfb71c7daaa9faa9186e00b053cd3cccb": {
            "datetime": "2018-04-04T09:53:34-07:00",
            "summary": "Fix --check for multiple files (#101)",
            "message": "Fix --check for multiple files (#101)\n\n\r\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "63da5d088cd8d38e925d9d45b194705fb5258ecc": {
            "datetime": "2018-04-04T09:55:56-07:00",
            "summary": "3.6.5 grammar pickles",
            "message": "3.6.5 grammar pickles\n",
            "diff": {
                "blib2to3/pgen2/grammar.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "51b3b2624d4b1e4608eb9addd7d292cc5174a047": {
            "datetime": "2018-04-04T13:20:46-07:00",
            "summary": "Handle backslashes in raw strings while normalizing (#105)",
            "message": "Handle backslashes in raw strings while normalizing (#105)\n\nIn raw strings, a single backslash means a literal backslash. It is also used to escape quotes if it precedes them. This means it is impossible to change the quote type for strings that contain an unescaped version of the other quote type.\r\nFixes #100",
            "diff": {
                "black.py": 17,
                "tests/string_quotes.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "30d921f74c3b97c2cc8767530f37b409fd82aae9": {
            "datetime": "2018-04-04T16:33:10-07:00",
            "summary": "Simplify delimiter logic",
            "message": "Simplify delimiter logic\n",
            "diff": {
                "black.py": 39
            },
            "is_test": false,
            "is_fix": false
        },
        "2e0bb0fa9f9fffedecaa1f088f313f6c2d6df965": {
            "datetime": "2018-04-05T02:28:46-07:00",
            "summary": "Handle arbitrary number of backslashes during string normalization (#110)",
            "message": "Handle arbitrary number of backslashes during string normalization (#110)\n\n",
            "diff": {
                "black.py": 10,
                "tests/string_quotes.py": 22
            },
            "is_test": false,
            "is_fix": false
        },
        "e36b8c71bb78f70735b8b4f239b0f574a6e0f277": {
            "datetime": "2018-04-05T02:29:01-07:00",
            "summary": "[blib2to3] Support non-ASCII identifiers",
            "message": "[blib2to3] Support non-ASCII identifiers\n\nThis support isn't *exactly* right per PEP 3131 as the regex engine is a bit\ntoo limited for that and I didn't want to spend time on Other_ID_Start and\nOther_ID_Continue unless they're actually needed.\n\nHopefully this doesn't slow it down too much.\n",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 17,
                "tests/expression.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "ecdbf085a772e8d737b8a8735d39a7af413cecfb": {
            "datetime": "2018-04-09T14:36:40-07:00",
            "summary": "Add support for all valid string literals (#115)",
            "message": "Add support for all valid string literals (#115)\n\n",
            "diff": {
                "black.py": 8,
                "blib2to3/pgen2/tokenize.py": 76,
                "tests/python2.py": 4,
                "tests/string_quotes.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "cb5aadad74c0a1c9c514a633c632c99b668c70ed": {
            "datetime": "2018-04-11T01:36:18-07:00",
            "summary": "Automatic parentheses management",
            "message": "Automatic parentheses management\n\nFixes #4\n",
            "diff": {
                "black.py": 251,
                "tests/composition.py": 13,
                "tests/empty_lines.py": 51,
                "tests/expression.py": 19,
                "tests/function.py": 4,
                "tests/import_spacing.py": 10,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "bc6b912fcbaff08dd0044a844273757c00494305": {
            "datetime": "2018-04-11T15:49:14-07:00",
            "summary": "Fix an embarrassing UnboundLocalError",
            "message": "Fix an embarrassing UnboundLocalError\n",
            "diff": {
                "black.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "cf8e998f46e89da39fa64029cc4550e2862f7ec2": {
            "datetime": "2018-04-11T16:25:47-07:00",
            "summary": "Don't omit escaping the second consecutive quote",
            "message": "Don't omit escaping the second consecutive quote\n\nThis would produce invalid code for strings like `\"x = ''; y = \\\"\\\"\"`.\n",
            "diff": {
                "black.py": 3,
                "tests/string_quotes.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "39a5fe7a55d2011d8209888b31fd6a4ea75efb71": {
            "datetime": "2018-04-11T19:22:16-07:00",
            "summary": "18.4a1",
            "message": "18.4a1\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "19d69b34e5e90589e4be4185852aab7135d59303": {
            "datetime": "2018-04-11T23:22:22-07:00",
            "summary": "Fix placement of dictionary unpacking inside dict literals",
            "message": "Fix placement of dictionary unpacking inside dict literals\n\nFixes #111\n",
            "diff": {
                "black.py": 2,
                "tests/expression.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "e41844feb74fe266f4cc44f0b5ee57c03e138c2c": {
            "datetime": "2018-04-11T23:22:22-07:00",
            "summary": "Remove debug print",
            "message": "Remove debug print\n",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "9138a75b759ecb690d63924503f88bfbc82d4862": {
            "datetime": "2018-04-11T23:22:22-07:00",
            "summary": "Fix parsing of unaligned standalone comments",
            "message": "Fix parsing of unaligned standalone comments\n\nFixes #99\nFixes #112\n",
            "diff": {
                "blib2to3/pgen2/driver.py": 6,
                "blib2to3/pgen2/tokenize.py": 8,
                "tests/comments2.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "8e7848c63efe36f09e4651bece8c0efc34a1c3e1": {
            "datetime": "2018-04-12T11:19:21-07:00",
            "summary": "Open temporary files with utf-8 encoding (#126)",
            "message": "Open temporary files with utf-8 encoding (#126)\n\nThis is not the default on Windows.",
            "diff": {
                "black.py": 2,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "2104b7cdcb529056521a37f50c1e494f0b869d21": {
            "datetime": "2018-04-13T11:31:23-07:00",
            "summary": "Handle unnecessarily escaped strings (#128)",
            "message": "Handle unnecessarily escaped strings (#128)\n\n",
            "diff": {
                "black.py": 28,
                "tests/string_quotes.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "f294cc272c3aa5b8d3cd35b9f9283721b7e458d8": {
            "datetime": "2018-04-13T12:06:40-07:00",
            "summary": "18.4a2",
            "message": "18.4a2\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "a764f1bb3b459ee6f2e752e3d67793b119a2144a": {
            "datetime": "2018-04-16T01:34:15-07:00",
            "summary": "Generalize star expression handling",
            "message": "Generalize star expression handling\n\nFixes #132\n",
            "diff": {
                "black.py": 63,
                "tests/expression.py": 37,
                "tests/function.py": 16,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "5192ed484bdbe507a8dd03dc31f93e4efec95b19": {
            "datetime": "2018-04-17T20:34:02+01:00",
            "summary": "Parse complex expressions in parameters after * and **",
            "message": "Parse complex expressions in parameters after * and **\n",
            "diff": {
                "black.py": 2,
                "tests/expression.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "661908cd0282ff464794a8193475693e9130b866": {
            "datetime": "2018-04-17T20:35:59+01:00",
            "summary": "use STARS instead of STAR | DOUBLESTAR",
            "message": "use STARS instead of STAR | DOUBLESTAR\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "05070444741834a11d48f2cbfd0600f4c4d60e9d": {
            "datetime": "2018-04-17T20:52:17+01:00",
            "summary": "Merge pull request #138 from ambv/star-expr",
            "message": "Merge pull request #138 from ambv/star-expr\n\nParse complex expressions in parameters after * and **",
            "diff": {
                "black.py": 4,
                "tests/expression.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "639b62dcd32cde3645e9f9a633eee33c04d23901": {
            "datetime": "2018-04-18T17:27:07-07:00",
            "summary": "Added caching (#136)",
            "message": "Added caching (#136)\n\nBlack will cache already formatted files using their file size and\r\nmodification timestamp. The cache is per-user and will always be used\r\nunless Black is used with --diff or with code provided via standard\r\ninput.",
            "diff": {
                "black.py": 249,
                "setup.py": 2,
                "tests/test_black.py": 215
            },
            "is_test": true,
            "is_fix": false
        },
        "8429f3a63b4577c6fd35872072711858511e8d2d": {
            "datetime": "2018-04-18T17:46:03-07:00",
            "summary": "Revert `format_file_in_place()` and `format_stdin_to_stdout()` to return bools",
            "message": "Revert `format_file_in_place()` and `format_stdin_to_stdout()` to return bools\n\n`Changed.CACHED` is meaningless for those two functions.\n",
            "diff": {
                "black.py": 28,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "15d5e36ea38988084584639b02aafcaaa2744dcf": {
            "datetime": "2018-04-18T17:59:28-07:00",
            "summary": "Simplify single-file vs. multi-file modes",
            "message": "Simplify single-file vs. multi-file modes\n",
            "diff": {
                "black.py": 53
            },
            "is_test": false,
            "is_fix": false
        },
        "aa5629204ccd11754d00a9bcc11d9bafdeecef67": {
            "datetime": "2018-04-18T18:13:36-07:00",
            "summary": "Docstring for `max_delimiter_priority_in_atom()`",
            "message": "Docstring for `max_delimiter_priority_in_atom()`\n",
            "diff": {
                "black.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "244694182463141115cb8eaf5afadbaf4a8ed67f": {
            "datetime": "2018-04-19T00:09:13-07:00",
            "summary": "Remove dead code",
            "message": "Remove dead code\n",
            "diff": {
                "black.py": 35
            },
            "is_test": false,
            "is_fix": false
        },
        "b5b658da0683c3e0806461946d8b492784e26d97": {
            "datetime": "2018-04-21T12:16:02-07:00",
            "summary": "Skip handling signals on event loops that don't support it (#156)",
            "message": "Skip handling signals on event loops that don't support it (#156)\n\n",
            "diff": {
                "black.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "d73166c42b7de83249d17125cae3c2594a25b2c3": {
            "datetime": "2018-04-21T15:08:36-07:00",
            "summary": "Move delimiter token skipping to BracketTracker",
            "message": "Move delimiter token skipping to BracketTracker\n\nAlso, added lambda argument delimiter skipping.\n\nFixes #133\n",
            "diff": {
                "black.py": 77,
                "tests/expression.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "5e1e1a1820504b2709a7201800ff042f0abbad2c": {
            "datetime": "2018-04-23T11:23:11-07:00",
            "summary": "[#149] Make check and diff not mutually exclusive (#161)",
            "message": "[#149] Make check and diff not mutually exclusive (#161)\n\nFixes #149.",
            "diff": {
                "black.py": 26,
                "tests/test_black.py": 18
            },
            "is_test": true,
            "is_fix": false
        },
        "c012c70176e1958d755768893c08f4b0892fb51d": {
            "datetime": "2018-04-23T11:23:36-07:00",
            "summary": "Fix tests on windows (#159)",
            "message": "Fix tests on windows (#159)\n\n",
            "diff": {
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": true
        },
        "3ddf73337d606442069e5608e62a8367fbacdb40": {
            "datetime": "2018-04-23T11:48:01-07:00",
            "summary": "Refactor `reformat_one` and `schedule_formatting` to decrease state",
            "message": "Refactor `reformat_one` and `schedule_formatting` to decrease state\n",
            "diff": {
                "black.py": 41
            },
            "is_test": false,
            "is_fix": false
        },
        "06e95b1e9bcd43c4574840f8174ba4b2c5d281bd": {
            "datetime": "2018-04-23T12:00:03-07:00",
            "summary": "Show full path on diffs",
            "message": "Show full path on diffs\n\nFixes #130\n",
            "diff": {
                "black.py": 4,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "82198030eef6f99ad47470d82c34d9a6e1a4e6df": {
            "datetime": "2018-04-23T14:24:14-07:00",
            "summary": "Remove nonsensical grammar from blib2to3",
            "message": "Remove nonsensical grammar from blib2to3\n",
            "diff": {
                "black.py": 1,
                "blib2to3/pygram.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "c86fb362329a2b980ed94200e0652f9c74d56bbd": {
            "datetime": "2018-04-23T14:31:35-07:00",
            "summary": "Accelerate Unicode identifier support (backport from Lib/tokenize.py)",
            "message": "Accelerate Unicode identifier support (backport from Lib/tokenize.py)\n",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 11
            },
            "is_test": false,
            "is_fix": false
        },
        "54d707e10a5bf3d8d352c1bcbc7946bb6f3c01d7": {
            "datetime": "2018-04-23T16:17:12-07:00",
            "summary": "Allow standalone comments to close code blocks",
            "message": "Allow standalone comments to close code blocks\n\nFixes #16\nFixes #32\n",
            "diff": {
                "black.py": 11,
                "blib2to3/pgen2/driver.py": 34,
                "tests/comments2.py": 6,
                "tests/comments5.py": 31,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "29e97d1d4a7717f1bd0ca35cacf2f2ce6d815b0c": {
            "datetime": "2018-04-24T09:38:12-07:00",
            "summary": "[#154] Handle comments between decorators properly (#166)",
            "message": "[#154] Handle comments between decorators properly (#166)\n\n",
            "diff": {
                "black.py": 4,
                "tests/comments6.py": 8,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "52fda8b0e9e52e94aae6cb3170c9b1b492a2d8b4": {
            "datetime": "2018-04-24T11:50:31-07:00",
            "summary": "Support sticky standalone comments (comments preceding defs, classes, and decorators)",
            "message": "Support sticky standalone comments (comments preceding defs, classes, and decorators)\n\nFixes #56\nFixes #154\n",
            "diff": {
                "black.py": 10,
                "tests/comments2.py": 2,
                "tests/comments5.py": 40,
                "tests/comments6.py": 8,
                "tests/empty_lines.py": 10,
                "tests/fmtonoff.py": 2,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "92957a41e3f909c7b813b448f65cd437cf0139f2": {
            "datetime": "2018-04-24T11:56:50-07:00",
            "summary": "Make cache work with non-default line lenghts (#163)",
            "message": "Make cache work with non-default line lenghts (#163)\n\n",
            "diff": {
                "black.py": 25,
                "tests/test_black.py": 44
            },
            "is_test": true,
            "is_fix": false
        },
        "9d671bdbe13ab68cea1bba15001c43e90cf2c1a6": {
            "datetime": "2018-04-24T12:21:56-07:00",
            "summary": "Split ternary expressions",
            "message": "Split ternary expressions\n\nFixes #141\n",
            "diff": {
                "black.py": 9,
                "tests/expression.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "b250aed47bf11240b460bf4ecb57ba3f28078fd1": {
            "datetime": "2018-04-24T12:42:46-07:00",
            "summary": "Do not enforce empty lines after control flow statements",
            "message": "Do not enforce empty lines after control flow statements\n\nFixes #90\n",
            "diff": {
                "black.py": 10,
                "tests/expression.py": 8,
                "tests/function.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "09f5ee3a19f4274bb848324867bd8e68724cf851": {
            "datetime": "2018-04-24T13:44:28-07:00",
            "summary": "Split imports like isort",
            "message": "Split imports like isort\n\nFixes #127\n\nPartially addresses #152\n",
            "diff": {
                "black.py": 20,
                "tests/import_spacing.py": 21
            },
            "is_test": false,
            "is_fix": false
        },
        "1445bea97edee472e053f00010cb378f4b51e1c4": {
            "datetime": "2018-04-24T13:52:12-07:00",
            "summary": "18.4a3",
            "message": "18.4a3\n",
            "diff": {
                "black.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "b62bd4de75694dfe775ff4f6f7f0a567fda549a4": {
            "datetime": "2018-04-24T14:27:21-07:00",
            "summary": "Add `explode_split` to documentation",
            "message": "Add `explode_split` to documentation\n",
            "diff": {
                "black.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "0f3ecb7e500f9668a7f9ec74a43d8d565df6e2ea": {
            "datetime": "2018-04-27T14:04:46-07:00",
            "summary": "18.4a4 hotfix: don't populate the cache on --check",
            "message": "18.4a4 hotfix: don't populate the cache on --check\n\nFixes #175\n",
            "diff": {
                "black.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "188572118253f410eaf24d9945e369f744760f42": {
            "datetime": "2018-04-29T00:50:08-07:00",
            "summary": "fix type errors in setup.py (#179)",
            "message": "fix type errors in setup.py (#179)\n\n",
            "diff": {
                "setup.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "9f096d55365cb63548eef97e254c2793ae2776a0": {
            "datetime": "2018-04-30T22:49:30-07:00",
            "summary": "Format subscriptions in a PEP-8 compliant way (#178)",
            "message": "Format subscriptions in a PEP-8 compliant way (#178)\n\nFixes #157",
            "diff": {
                "black.py": 87,
                "tests/expression.py": 12,
                "tests/fmtonoff.py": 2,
                "tests/function.py": 2,
                "tests/slices.py": 31,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "adf4ebd2d9540dd0812e2db0e5735a5d28d31d81": {
            "datetime": "2018-05-04T13:52:17-07:00",
            "summary": "Remove unnecessary shebang lines (#189)",
            "message": "Remove unnecessary shebang lines (#189)\n\nSince black.py is not marked as executable, the shebang in black.py serves\r\nno purpose. black should be invoked through its entry point any way.\r\n\r\ntoken.py is an internal module without a __name__ == '__main__' block or\r\nother executable code. It contains just list of constants and small\r\nhelper functions.\r\n\r\nSigned-off-by: Christian Heimes <christian@python.org>",
            "diff": {
                "black.py": 2,
                "blib2to3/pgen2/token.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "2d9eaafa97e967c8974a6321dcc442a90192140f": {
            "datetime": "2018-05-07T10:12:47-07:00",
            "summary": "Output something when no files are reformatted (#190)",
            "message": "Output something when no files are reformatted (#190)\n\nJust executing ``black`` without any argument does not print any message\r\nto stdout or stderr. It's rather confusing, because the user doesn't\r\nknow what happened.\r\n\r\nIn ``len(sources) == 0`` case, black now prints ``No paths given. Nothing to\r\ndo``.\r\n\r\nSigned-off-by: Christian Heimes <christian@python.org>",
            "diff": {
                "black.py": 1,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "6dbb657681b82268f66bd788991a4daa737577dc": {
            "datetime": "2018-05-07T10:15:24-07:00",
            "summary": "Removing empty parentheses after class name (#180)",
            "message": "Removing empty parentheses after class name (#180)\n\n",
            "diff": {
                "black.py": 17,
                "tests/class_blank_parentheses.py": 71,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "b1cd59f26776faf543078ee2fdbf2b01fa5ed15e": {
            "datetime": "2018-05-07T10:22:43-07:00",
            "summary": "Formatting nits",
            "message": "Formatting nits\n",
            "diff": {
                "black.py": 12,
                "tests/class_blank_parentheses.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "dc0c14240e7423d9ada002835dcc195f8c6d8797": {
            "datetime": "2018-05-07T10:40:18-07:00",
            "summary": "Don't leave invalid trailing comma on imports",
            "message": "Don't leave invalid trailing comma on imports\n\nFixes #185\n",
            "diff": {
                "black.py": 11,
                "tests/import_spacing.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "cfb003f51c89802b5bca29018fde62c4501a8940": {
            "datetime": "2018-05-07T11:13:55-07:00",
            "summary": "Make parentheses invisible recursively in atoms",
            "message": "Make parentheses invisible recursively in atoms\n\nThis fixes non-deterministic formatting when multiple pairs of removable\nparentheses are used.\n\nFixes #183\n",
            "diff": {
                "black.py": 35,
                "tests/expression.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "27a36671fe77cdb56e88e90e30d901d9755532ed": {
            "datetime": "2018-05-07T11:36:51-07:00",
            "summary": "Diff version",
            "message": "Diff version\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0967dfcbeba8aceaacd468b279cc23089d697878": {
            "datetime": "2018-05-08T10:11:16-07:00",
            "summary": "Don't fail the entire right_hand_split if an optional split failed",
            "message": "Don't fail the entire right_hand_split if an optional split failed\n\nFixes splitting long import lines with only a single name.\n",
            "diff": {
                "black.py": 29,
                "tests/import_spacing.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "1b51e2c07887bdd0aa12f8e79215ea72cbbc2ab4": {
            "datetime": "2018-05-08T21:57:09-07:00",
            "summary": "Automatic management of parentheses in `elif`, too",
            "message": "Automatic management of parentheses in `elif`, too\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "c9b73b99ac567ce30c36596371bf0a1fad8191c9": {
            "datetime": "2018-05-08T21:57:09-07:00",
            "summary": "Support nested lambdas in BracketTracker",
            "message": "Support nested lambdas in BracketTracker\n",
            "diff": {
                "black.py": 12,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "793450aeb00c8547ef5355c38dbf573ce4252bae": {
            "datetime": "2018-05-08T21:57:09-07:00",
            "summary": "Automatic management of parentheses in assignments",
            "message": "Automatic management of parentheses in assignments\n\nFixes #140\n\nNote: this is an evolution but the end result needs to be different.  See\ncantfit.py for some good examples on bad formatting caused by this change.\n",
            "diff": {
                "black.py": 25,
                "tests/cantfit.py": 40,
                "tests/expression.py": 22
            },
            "is_test": false,
            "is_fix": false
        },
        "a68dd928e681cc6a921f39b2c3fc1f05e15afdd3": {
            "datetime": "2018-05-08T21:57:09-07:00",
            "summary": "Fix docstrings of visit_stmt and normalize_invisible_parens",
            "message": "Fix docstrings of visit_stmt and normalize_invisible_parens\n",
            "diff": {
                "black.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "7811f957f3f6e5a5daa67a3f36a867cbb6210c8d": {
            "datetime": "2018-05-08T21:57:09-07:00",
            "summary": "Delimit multiline expressions according to math operator priority",
            "message": "Delimit multiline expressions according to math operator priority\n\nFixes #148\n",
            "diff": {
                "black.py": 46,
                "tests/expression.py": 33
            },
            "is_test": false,
            "is_fix": false
        },
        "1747c388bba0c87f75a6239d56e3b51f7455e93d": {
            "datetime": "2018-05-08T21:57:09-07:00",
            "summary": "Discover whether a file is Python 3.6+ also by stars in calls",
            "message": "Discover whether a file is Python 3.6+ also by stars in calls\n\nFixes a pathological situation where if a function signature used a trailing\ncomma but was later reformatted to a single line (with the trailing comma\nremoved), Black would change its mind whether a file is Python\n3.6-compatible between runs.\n",
            "diff": {
                "black.py": 9,
                "tests/function.py": 17,
                "tests/function2.py": 18,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "7595dabb4387237b76e80bdee72fb6323b2d603b": {
            "datetime": "2018-05-08T23:03:59-07:00",
            "summary": "Fix docstring of is_vararg",
            "message": "Fix docstring of is_vararg\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "90e14e8b619246ff787d10b94bd5a64d18e52b84": {
            "datetime": "2018-05-08T23:31:41-07:00",
            "summary": "Don't make parentheses invisible around yield expressions",
            "message": "Don't make parentheses invisible around yield expressions\n",
            "diff": {
                "black.py": 22,
                "tests/expression.py": 2,
                "tests/function.py": 25
            },
            "is_test": false,
            "is_fix": false
        },
        "21c8dc85f5fa6ca70b028027a03588e12f532636": {
            "datetime": "2018-05-09T18:26:41-04:00",
            "summary": "Remove u prefix if unicode_literals is present (#199)",
            "message": "Remove u prefix if unicode_literals is present (#199)\n\n",
            "diff": {
                "black.py": 58,
                "tests/python2_unicode_literals.py": 16,
                "tests/string_prefixes.py": 14,
                "tests/test_black.py": 37
            },
            "is_test": true,
            "is_fix": false
        },
        "c667b85a7f8bb599f13fa169cb11a0dcc3eb9d98": {
            "datetime": "2018-05-15T01:13:48-04:00",
            "summary": "Check for broken symlinks before checking file data (#202)",
            "message": "Check for broken symlinks before checking file data (#202)\n\n",
            "diff": {
                "black.py": 2,
                "tests/test_black.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "3eea3aad864b83af3b6c477c32f15eb821fe9341": {
            "datetime": "2018-05-15T01:05:39-07:00",
            "summary": "Don't explode trailers that fit in a single line",
            "message": "Don't explode trailers that fit in a single line\n",
            "diff": {
                "black.py": 111,
                "tests/comments4.py": 24,
                "tests/composition.py": 11,
                "tests/expression.py": 8,
                "tests/function.py": 4,
                "tests/function2.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "a677713ebf1340de1806ee806e0377fa6b122ee7": {
            "datetime": "2018-05-15T01:05:39-07:00",
            "summary": "Re-use indexes of current iteration in `comments_after()`",
            "message": "Re-use indexes of current iteration in `comments_after()`\n",
            "diff": {
                "black.py": 28
            },
            "is_test": false,
            "is_fix": false
        },
        "14ba1bf8b6248e6860ba6a0cb9468c4c1c25a102": {
            "datetime": "2018-05-15T15:09:35-04:00",
            "summary": "Add support for pyi files (#210)",
            "message": "Add support for pyi files (#210)\n\nFixes #207",
            "diff": {
                "black.py": 120,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "634dc5a20ecc5101040f279ad0f62d976a7a36ea": {
            "datetime": "2018-05-15T12:31:33-07:00",
            "summary": "Warn that `right_hand_split()` modifies `bracket_depth` in leaves",
            "message": "Warn that `right_hand_split()` modifies `bracket_depth` in leaves\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "8b64e916f65f2c1023f9abd6243a904bfbcd8fe9": {
            "datetime": "2018-05-15T13:25:00-07:00",
            "summary": "Simplify `is_trivial_*` methods",
            "message": "Simplify `is_trivial_*` methods\n",
            "diff": {
                "black.py": 81
            },
            "is_test": false,
            "is_fix": false
        },
        "5a47fd13cc4c9f43270dd12c37577244c1eabfcc": {
            "datetime": "2018-05-15T22:13:16-07:00",
            "summary": "Don't use optional parentheses in unnecessary situations",
            "message": "Don't use optional parentheses in unnecessary situations\n\nIf an expression starts or ends with a bracket and only contains a single\ndelimiter, don't wrap it in additional optional parentheses.  We can use the\nbrackets for the split.\n\nFixes #177\n\nFixes #193\n",
            "diff": {
                "black.py": 52,
                "tests/composition.py": 110,
                "tests/empty_lines.py": 51,
                "tests/expression.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "96e68f034197d6060aad876216a0e40e0eac0987": {
            "datetime": "2018-05-16T11:45:32-07:00",
            "summary": "Report progress on multiple files incrementally",
            "message": "Report progress on multiple files incrementally\n",
            "diff": {
                "black.py": 39
            },
            "is_test": false,
            "is_fix": false
        },
        "f24635635eef3a998ea02bfcbc663d3dbe129851": {
            "datetime": "2018-05-16T14:40:23-07:00",
            "summary": "For omitting optional parentheses, ignore delimiters of lower priorities",
            "message": "For omitting optional parentheses, ignore delimiters of lower priorities\n",
            "diff": {
                "black.py": 47
            },
            "is_test": false,
            "is_fix": false
        },
        "1dadeef47aafeef1c52c64db9aef3b038bd609ea": {
            "datetime": "2018-05-16T14:46:43-07:00",
            "summary": "Consider `in`, `not in`, `is`, `is not` operators",
            "message": "Consider `in`, `not in`, `is`, `is not` operators\n",
            "diff": {
                "black.py": 45,
                "tests/expression.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "8c74d7901fe8de0abd72a182d775b639b4202577": {
            "datetime": "2018-05-16T15:21:40-07:00",
            "summary": "Implement fluent interfaces",
            "message": "Implement fluent interfaces\n\nFixes #67\n",
            "diff": {
                "black.py": 41,
                "tests/comments4.py": 29,
                "tests/expression.py": 11,
                "tests/function.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "3ad0f5855c46410652b27b5e09c6f22314241757": {
            "datetime": "2018-05-16T19:19:48-07:00",
            "summary": "Fix multiline strings unnecessarily wrapped in optional parentheses",
            "message": "Fix multiline strings unnecessarily wrapped in optional parentheses\n\nFixes #215\n",
            "diff": {
                "black.py": 10,
                "tests/comments3.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "7395f55564a689a28db5ab3f82c079f7fc40eadf": {
            "datetime": "2018-05-17T17:32:43-07:00",
            "summary": "18.5b0",
            "message": "18.5b0\n",
            "diff": {
                "black.py": 2,
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "180bc06ede96959fd52b43467ce3836655108719": {
            "datetime": "2018-05-17T17:32:43-07:00",
            "summary": "Don't explode a one-element collection ending with a comma.",
            "message": "Don't explode a one-element collection ending with a comma.\n",
            "diff": {
                "black.py": 16,
                "tests/composition.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "87b8df28c48353d3d08d7e88d178c7a567de816a": {
            "datetime": "2018-05-17T17:32:43-07:00",
            "summary": "Fix overly optimistic removal of optional parentheses",
            "message": "Fix overly optimistic removal of optional parentheses\n\nThe current behavior is explained with much detail in\n`can_omit_invisible_parens`.\n",
            "diff": {
                "black.py": 159,
                "tests/composition.py": 30
            },
            "is_test": false,
            "is_fix": false
        },
        "385e3a10493c88dc2b71dc11d9d9799d7fcb3b27": {
            "datetime": "2018-05-17T17:32:43-07:00",
            "summary": "Don't allow indexing to trigger omitting optional parentheses",
            "message": "Don't allow indexing to trigger omitting optional parentheses\n",
            "diff": {
                "black.py": 14,
                "tests/composition.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "5dfc911e6b18927b4031a4f2951f9da3fe8f5f8e": {
            "datetime": "2018-05-17T17:32:43-07:00",
            "summary": "Fix consecutive string literals not forcing optional parentheses",
            "message": "Fix consecutive string literals not forcing optional parentheses\n",
            "diff": {
                "tests/composition.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "31fbd1982f9511c5b7bce93eb133110811f90e0f": {
            "datetime": "2018-05-17T17:32:43-07:00",
            "summary": "Avoid treating ellipsis as a dot delimiter",
            "message": "Avoid treating ellipsis as a dot delimiter\n",
            "diff": {
                "black.py": 2,
                "tests/comments2.py": 39
            },
            "is_test": false,
            "is_fix": false
        },
        "dd4477b70120bf736144c38ec50144253f34dce2": {
            "datetime": "2018-05-17T17:32:43-07:00",
            "summary": "Always explode data structure literals",
            "message": "Always explode data structure literals\n\nFixes #152\n",
            "diff": {
                "black.py": 61,
                "tests/cantfit.py": 4,
                "tests/comments2.py": 8,
                "tests/expression.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "c891c65b6b2de7c257244cc409276b485130c275": {
            "datetime": "2018-05-19T14:06:27-07:00",
            "summary": "Store grammar pickle caches in CACHE_DIR",
            "message": "Store grammar pickle caches in CACHE_DIR\n\nFixes #192\n\nFixes #203\n",
            "diff": {
                "black.py": 9,
                "blib2to3/pgen2/driver.py": 15,
                "blib2to3/pygram.py": 34
            },
            "is_test": false,
            "is_fix": false
        },
        "91de9ea6e3a83fe29c165814271a9bffdd5e6097": {
            "datetime": "2018-05-21T12:29:36-07:00",
            "summary": "Fix invalid code in an omitted trailer on large expressions",
            "message": "Fix invalid code in an omitted trailer on large expressions\n\nFixes #237\n",
            "diff": {
                "black.py": 3,
                "tests/composition.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "808754af18f1cea2444c6facf63f3a86952c5d44": {
            "datetime": "2018-05-21T15:21:14-07:00",
            "summary": "Fix optional parentheses being removed within `# fmt: off` sections",
            "message": "Fix optional parentheses being removed within `# fmt: off` sections\n\nFixes #224\n",
            "diff": {
                "black.py": 7,
                "tests/fmtonoff.py": 17
            },
            "is_test": false,
            "is_fix": false
        },
        "9a6c88c7f4b4db14631f8dc9e8d44b3aed9d57c9": {
            "datetime": "2018-05-21T16:37:29-07:00",
            "summary": "Fix invalid code on stars in long from-imports being wrapped in parentheses",
            "message": "Fix invalid code on stars in long from-imports being wrapped in parentheses\n\nFixes #234\n",
            "diff": {
                "black.py": 44,
                "tests/fmtonoff.py": 8,
                "tests/import_spacing.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "658eb7161d8d0c23bafe4881e70518c33a74a4c1": {
            "datetime": "2018-05-22T00:38:31-07:00",
            "summary": "Fix unstable formatting on trailers omitted from line splitting with comments",
            "message": "Fix unstable formatting on trailers omitted from line splitting with comments\n\nFixes #238\n",
            "diff": {
                "black.py": 6,
                "tests/expression.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "07b1b2f3dd0e4f13dd5df96eb9188f3d02f5726e": {
            "datetime": "2018-05-23T11:01:26-07:00",
            "summary": "Add --pyi and --py36 flags (#249)",
            "message": "Add --pyi and --py36 flags (#249)\n\nFixes #244.",
            "diff": {
                "black.py": 162,
                "tests/force_py36.py": 16,
                "tests/force_pyi.py": 6,
                "tests/test_black.py": 101
            },
            "is_test": true,
            "is_fix": false
        },
        "bbed104e6d3e89ebb8da7c209b842e8a96bcd5de": {
            "datetime": "2018-05-23T11:52:41-07:00",
            "summary": "Reword --pyi and --py36 documentation",
            "message": "Reword --pyi and --py36 documentation\n",
            "diff": {
                "black.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "e9a940d69e789ce8caf1f3c1ded786dc102df2fd": {
            "datetime": "2018-05-24T13:32:52-07:00",
            "summary": "Remove remains of extra empty lines for flow control statements",
            "message": "Remove remains of extra empty lines for flow control statements\n",
            "diff": {
                "black.py": 24
            },
            "is_test": false,
            "is_fix": false
        },
        "e818260f1a223929d8f2056f484b73eaa8687622": {
            "datetime": "2018-05-28T23:48:59-07:00",
            "summary": "Class new line between docstrings / vars / methods (#219)",
            "message": "Class new line between docstrings / vars / methods (#219)\n\nPartially addresses #144",
            "diff": {
                "black.py": 28,
                "tests/class_blank_parentheses.py": 2,
                "tests/class_methods_new_line.py": 42,
                "tests/comments4.py": 1,
                "tests/composition.py": 1,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "2057bf6faef88b23273d7dd0c2f366ee8284314a": {
            "datetime": "2018-05-29T00:47:52-07:00",
            "summary": "Clean up PEP 257 support",
            "message": "Clean up PEP 257 support\n\nI documented the new behavior, added it to the change log, greatly expanded\ntests, added support for inner defs and classes, and added Luka to ACKS.\n\nFixes #196\n",
            "diff": {
                "black.py": 12,
                "tests/class_blank_parentheses.py": 1,
                "tests/class_methods_new_line.py": 228,
                "tests/function2.py": 25
            },
            "is_test": false,
            "is_fix": false
        },
        "023e61a2545b70750d47fe31ac5265ffced16a0c": {
            "datetime": "2018-05-29T01:53:54-07:00",
            "summary": "Refactor --pyi and --py36 into FileMode",
            "message": "Refactor --pyi and --py36 into FileMode\n",
            "diff": {
                "black.py": 117,
                "tests/test_black.py": 74
            },
            "is_test": true,
            "is_fix": false
        },
        "b2067aabbfa900366326ab7ab7d5a208059f5dab": {
            "datetime": "2018-05-29T02:07:09-07:00",
            "summary": "18.5b1",
            "message": "18.5b1\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "8ebbd268880f15834b70910a6dc61e1ee7596b7c": {
            "datetime": "2018-05-30T12:56:16-07:00",
            "summary": "Add --skip-string-normalization",
            "message": "Add --skip-string-normalization\n\nFixes #118\n",
            "diff": {
                "black.py": 18,
                "tests/test_black.py": 5
            },
            "is_test": true,
            "is_fix": false
        },
        "3272bbc8b3e17d229df63daf26d3dce9706cee77": {
            "datetime": "2018-05-31T10:46:05-07:00",
            "summary": "Specify the minimum click version (#284)",
            "message": "Specify the minimum click version (#284)\n\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "51756a405cd6006ef22e9c12f212905fe0907f80": {
            "datetime": "2018-05-31T17:51:15-07:00",
            "summary": "Added --include and --exclude cli options (#281)",
            "message": "Added --include and --exclude cli options (#281)\n\nThese 2 options allow you to pass in regular expressions that determine\r\nwhether files/directories are included or excluded in the recursive file\r\nsearch.\r\n\r\nFixes #270 ",
            "diff": {
                "black.py": 84,
                "tests/include_exclude_tests/b/.definitely_exclude/a.py": 0,
                "tests/include_exclude_tests/b/dont_exclude/a.py": 0,
                "tests/include_exclude_tests/b/exclude/a.py": 0,
                "tests/test_black.py": 48
            },
            "is_test": true,
            "is_fix": false
        },
        "6fa60ba39d137bff08a7aa78beffa4773eb24121": {
            "datetime": "2018-05-31T19:09:51-07:00",
            "summary": "Sort default excludes, include the leading slash",
            "message": "Sort default excludes, include the leading slash\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "435aa7ac4ab54d9bc30ee4d75859435c97493bb5": {
            "datetime": "2018-05-31T19:24:09-07:00",
            "summary": "Reorder command-line options",
            "message": "Reorder command-line options\n",
            "diff": {
                "black.py": 64
            },
            "is_test": false,
            "is_fix": false
        },
        "8a82e0bf9af1182563abb8bfb0c4e87e836feb95": {
            "datetime": "2018-05-31T19:40:07-07:00",
            "summary": "Make empty --include mean \"anything goes\", simplify `gen_python_files_in_dir`",
            "message": "Make empty --include mean \"anything goes\", simplify `gen_python_files_in_dir`\n",
            "diff": {
                "black.py": 37,
                "tests/test_black.py": 25
            },
            "is_test": true,
            "is_fix": false
        },
        "a80e037a9ad5867371d8df0cc8cc9c7520ccc020": {
            "datetime": "2018-05-31T19:47:24-07:00",
            "summary": "Don't over-eagerly make a path absolute if only one passed",
            "message": "Don't over-eagerly make a path absolute if only one passed\n\nIf a directory or more than one file is passed, Black nicely shows the relative\npaths in output.  Before this change, it showed an absolute path if only\na single file was passed as an argument.  This fixes the inconsistency.\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "ef903ecd4688dbc9fc1166caf837420aa2ffdbac": {
            "datetime": "2018-06-01T14:47:07-07:00",
            "summary": "Skip symlink test if can't create one (#287)",
            "message": "Skip symlink test if can't create one (#287)\n\n",
            "diff": {
                "tests/test_black.py": 5
            },
            "is_test": true,
            "is_fix": false
        },
        "36bed855e11b119adc4cd5b3ad87e2da965928ba": {
            "datetime": "2018-06-04T11:03:18-07:00",
            "summary": "Introduce \"project root\" as a concept",
            "message": "Introduce \"project root\" as a concept\n\nThis is required for regular expressions in `--include=` and `--exclude=` not\nto catch false positives from directories outside of the project.\n",
            "diff": {
                "black.py": 41,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "1aa14c5db05681a2c25b2c3757d3f8d8f3bbe85f": {
            "datetime": "2018-06-04T11:06:38-07:00",
            "summary": "[trivial] Simplify stdin handling",
            "message": "[trivial] Simplify stdin handling\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "e7b312fb434483e0332643ae1e9736257f4f60c1": {
            "datetime": "2018-06-04T11:20:15-07:00",
            "summary": "[trivial] Simplify `mode` and `write_back` calculation in main()",
            "message": "[trivial] Simplify `mode` and `write_back` calculation in main()\n",
            "diff": {
                "black.py": 40
            },
            "is_test": false,
            "is_fix": false
        },
        "4c352ad4be70c72ba9b949d3afb7c242522d058e": {
            "datetime": "2018-06-04T12:09:18-07:00",
            "summary": "Add `--verbose` and report excluded paths in it, too",
            "message": "Add `--verbose` and report excluded paths in it, too\n\nFixes #283\n",
            "diff": {
                "black.py": 34,
                "tests/test_black.py": 204
            },
            "is_test": true,
            "is_fix": false
        },
        "75d2af2e3a0d0cf85b1e0c510c626d1ee1938074": {
            "datetime": "2018-06-04T12:18:27-07:00",
            "summary": "Fix missing leading slash due to `relative_to()` resolution",
            "message": "Fix missing leading slash due to `relative_to()` resolution\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "dbe26161fa68632d608a440666a0960a32630902": {
            "datetime": "2018-06-04T12:29:14-07:00",
            "summary": "Reformat docs/conf.py, too.",
            "message": "Reformat docs/conf.py, too.\n",
            "diff": {
                "docs/conf.py": 139
            },
            "is_test": false,
            "is_fix": false
        },
        "00a302560b92951c22f0f4c8d618cf63de39bd57": {
            "datetime": "2018-06-04T15:52:06-07:00",
            "summary": "Preserve line endings when formatting a file in place (#288)",
            "message": "Preserve line endings when formatting a file in place (#288)\n\n",
            "diff": {
                "black.py": 53,
                "tests/test_black.py": 26
            },
            "is_test": true,
            "is_fix": false
        },
        "ee02ebe3e9996345acd4c042f7b8daffb686167b": {
            "datetime": "2018-06-04T15:53:37-07:00",
            "summary": "Always show summary of reformatting",
            "message": "Always show summary of reformatting\n",
            "diff": {
                "black.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "ed91dd4de63215aa3dde1f6da8659fb35ff191d8": {
            "datetime": "2018-06-04T15:53:37-07:00",
            "summary": "Make source handling use sets instead of lists",
            "message": "Make source handling use sets instead of lists\n\nAlso, sort cached file output to be (more) deterministic.\n",
            "diff": {
                "black.py": 30,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "e5452a6b676c161d01ae0ac6cbb5a7cc4c395745": {
            "datetime": "2018-06-04T15:53:37-07:00",
            "summary": "Make sure --verbose trumps --quiet",
            "message": "Make sure --verbose trumps --quiet\n\nThis is so that users can have a --quiet alias in their environment and only\noccasionally add --verbose if they are surprised by the result.\n",
            "diff": {
                "black.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "041ec995e5165bc6f7b801a5aa2aba53e6980c1e": {
            "datetime": "2018-06-04T16:57:27-07:00",
            "summary": "Nits",
            "message": "Nits\n",
            "diff": {
                "black.py": 38
            },
            "is_test": false,
            "is_fix": false
        },
        "728e5a2f1ed16e2cfe0ca5586edac6c10da436c5": {
            "datetime": "2018-06-04T18:07:03-07:00",
            "summary": "Properly format unified diff",
            "message": "Properly format unified diff\n\nPreviously we weren't using timestamps.\n",
            "diff": {
                "black.py": 13,
                "tests/test_black.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "bbc09a4f013f2a584f143f3f5e3f76f6082367d4": {
            "datetime": "2018-06-04T18:42:16-07:00",
            "summary": "Consider stars in testlist_star_expr unpacking (because they are)",
            "message": "Consider stars in testlist_star_expr unpacking (because they are)\n\nFixes #297\n",
            "diff": {
                "black.py": 1,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "7fc6ce990669464f5172b63fafa3724f5f308be3": {
            "datetime": "2018-06-04T19:04:29-07:00",
            "summary": "Fix handling of empty files",
            "message": "Fix handling of empty files\n",
            "diff": {
                "black.py": 5,
                "tests/test_black.py": 19
            },
            "is_test": true,
            "is_fix": true
        },
        "23a00f051576d2e7edd18b6af382902cc34ea4a2": {
            "datetime": "2018-06-04T20:24:50-07:00",
            "summary": "Fix long trivial assignments being wrapped in unnecessary parentheses",
            "message": "Fix long trivial assignments being wrapped in unnecessary parentheses\n\nFixes #273\n",
            "diff": {
                "black.py": 15,
                "tests/cantfit.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "d638d56e0e383caeeff048e76b02b50b29367c3d": {
            "datetime": "2018-06-04T21:27:51-07:00",
            "summary": "Fix unnecessary parentheses when a line contains multiline strings",
            "message": "Fix unnecessary parentheses when a line contains multiline strings\n\nFixes #232\n",
            "diff": {
                "black.py": 84,
                "tests/cantfit.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "f3ea58cbc7750edd154bf4f97272c6ecf8f77d13": {
            "datetime": "2018-06-04T21:29:09-07:00",
            "summary": "18.6b0",
            "message": "18.6b0\n\nFixes #289\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "61a8d401c797240c0bc5313a9ff068bb269479a5": {
            "datetime": "2018-06-05T10:38:20+01:00",
            "summary": "Print report on stderr.\\n\\nFixes #299.",
            "message": "Print report on stderr.\\n\\nFixes #299.\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "aeaaf571ada7d13a4b52c258b33f1d11b1898a7a": {
            "datetime": "2018-06-05T09:35:35-07:00",
            "summary": "\u2728 \ud83c\udf70 \u2728 isn't appropriate when it fails, fixes #300 (#301)",
            "message": "\u2728 \ud83c\udf70 \u2728 isn't appropriate when it fails, fixes #300 (#301)\n\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "ed50737290662f6ef4016a7ea44da78ee1eff1e2": {
            "datetime": "2018-06-05T09:49:06-07:00",
            "summary": "18.6b1",
            "message": "18.6b1\n",
            "diff": {
                "black.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "9e9ee449b41f4058640e2360b3b62a0ca12f4a65": {
            "datetime": "2018-06-06T09:50:08-07:00",
            "summary": "Link to GitHub + HTTPS + typos (#303)",
            "message": "Link to GitHub + HTTPS + typos (#303)\n\n* Link to GitHub, update 3.6 minor version\r\n\r\n* http -> https\r\n\r\n* Fix typos\r\n\r\n* The Black style for Black, the project, is italics\r\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "33baccd88ef45ebbb35e4c2ad7b87c7b91432f55": {
            "datetime": "2018-06-06T15:42:50-07:00",
            "summary": "Change tests with stdin/out to exercise black.main (#307)",
            "message": "Change tests with stdin/out to exercise black.main (#307)\n\n",
            "diff": {
                "tests/test_black.py": 81
            },
            "is_test": true,
            "is_fix": false
        },
        "c1a962b88519b42e487ecf3c531bfc689ca1dedf": {
            "datetime": "2018-06-06T15:44:12-07:00",
            "summary": "Don't put a space after `*` in `g = 1, *\"x\"` (#309)",
            "message": "Don't put a space after `*` in `g = 1, *\"x\"` (#309)\n\nFixes #305.\r\n",
            "diff": {
                "black.py": 2,
                "tests/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "92a150d9e45379ea8c14e1b10293d659f60eb132": {
            "datetime": "2018-06-06T15:46:30-07:00",
            "summary": "Fix improper unmodified file caching when `-S` was used",
            "message": "Fix improper unmodified file caching when `-S` was used\n\nThis will also future-proof the cache to changes to FileMode.\n",
            "diff": {
                "black.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "f71db23824a25300618dd0625085ade8d2b3a7a8": {
            "datetime": "2018-06-06T15:48:38-07:00",
            "summary": "Move test data to data",
            "message": "Move test data to data\n",
            "diff": {
                "tests/cantfit.py": 0,
                "tests/class_blank_parentheses.py": 0,
                "tests/class_methods_new_line.py": 0,
                "tests/comments.py": 0,
                "tests/comments2.py": 0,
                "tests/comments3.py": 0,
                "tests/comments4.py": 0,
                "tests/comments5.py": 0,
                "tests/composition.py": 0,
                "tests/debug_visitor.py": 0,
                "tests/empty_lines.py": 0,
                "tests/expression.py": 0,
                "tests/fmtonoff.py": 0,
                "tests/force_py36.py": 0,
                "tests/force_pyi.py": 0,
                "tests/fstring.py": 0,
                "tests/function.py": 0,
                "tests/function2.py": 0,
                "tests/import_spacing.py": 0,
                "tests/include_exclude_tests/b/.definitely_exclude/a.py": 0,
                "tests/include_exclude_tests/b/dont_exclude/a.py": 0,
                "tests/include_exclude_tests/b/exclude/a.py": 0,
                "tests/python2.py": 0,
                "tests/python2_unicode_literals.py": 0,
                "tests/slices.py": 0,
                "tests/string_prefixes.py": 0,
                "tests/string_quotes.py": 0,
                "tests/test_black.py": 31
            },
            "is_test": true,
            "is_fix": false
        },
        "489d00ed8f4fb90d5788609a474632ab5a16591f": {
            "datetime": "2018-06-06T17:02:10-07:00",
            "summary": "Support pyproject.toml",
            "message": "Support pyproject.toml\n\nFixes #65\n",
            "diff": {
                "black.py": 78,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "75eb91443e66ab1c16abedaf4c52ba3920b7bf7a": {
            "datetime": "2018-06-06T17:13:51-07:00",
            "summary": "It works better when dependencies are installed. Who knew?",
            "message": "It works better when dependencies are installed. Who knew?\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "7f3678885fc7ab6f9fb1749f6d2a8ed3468841f3": {
            "datetime": "2018-06-07T11:41:34-07:00",
            "summary": "fix handling of empty triple quoted strings (#314)",
            "message": "fix handling of empty triple quoted strings (#314)\n\n",
            "diff": {
                "black.py": 2,
                "tests/data/string_quotes.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "39e9347687618ebefab26df35f770fc85b6173b1": {
            "datetime": "2018-06-07T19:43:04-07:00",
            "summary": "Add `-h` as a shortcut for `--help` (#316)",
            "message": "Add `-h` as a shortcut for `--help` (#316)\n\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "8482d38fb4fe3f769c933c016af8fa0fda181123": {
            "datetime": "2018-06-08T12:00:53-07:00",
            "summary": "Return early from comment placement calculation on lines without comments",
            "message": "Return early from comment placement calculation on lines without comments\n",
            "diff": {
                "black.py": 3,
                "tests/data/profile_big.py": 1002,
                "tests/data/profile_small.py": 102,
                "tests/data/profile_tiny.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "ff2e5dd6e6bae98ac8cf2abbb7cb2f0045042cd8": {
            "datetime": "2018-06-08T12:07:43-07:00",
            "summary": "18.6b2",
            "message": "18.6b2\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "5d0a469e8e2a6b83163ea27c9da654cb97f05e8a": {
            "datetime": "2018-06-09T12:30:49-07:00",
            "summary": "Fix string normalization sometimes producing invalid fstrings (#327)",
            "message": "Fix string normalization sometimes producing invalid fstrings (#327)\n\n",
            "diff": {
                "black.py": 6,
                "tests/data/fstring.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "94ebcb50851e40cba88c6ad2c14f9dfe45e08921": {
            "datetime": "2018-06-09T15:48:41-07:00",
            "summary": "Move profiling data out of tests/data",
            "message": "Move profiling data out of tests/data\n",
            "diff": {
                "profiling/dict_big.py": 8001,
                "profiling/dict_huge.py": 41440,
                "profiling/list_big.py": 4000,
                "profiling/list_huge.py": 22431,
                "tests/data/profile_big.py": 0,
                "tests/data/profile_small.py": 0,
                "tests/data/profile_tiny.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "d240ca25ea73dad793750977fb7b7cdfbeadd2eb": {
            "datetime": "2018-06-09T16:04:09-07:00",
            "summary": "Make `is_complex_subscript()` ignore list literals",
            "message": "Make `is_complex_subscript()` ignore list literals\n\nThis fixes catastrophically quadratic behavior on long lists.\n",
            "diff": {
                "black.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "ec31ee967d90eb33e7e3dd6b725b563f89bb5bb4": {
            "datetime": "2018-06-09T18:49:39-07:00",
            "summary": "Make test_black.py work in profilers",
            "message": "Make test_black.py work in profilers\n",
            "diff": {
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "2228890d6210e10d9ea3c24cb123a4d6b47f36b9": {
            "datetime": "2018-06-09T18:52:46-07:00",
            "summary": "Cache child sibling lookups",
            "message": "Cache child sibling lookups\n\nRemoves catastrophically quadratic behavior on nodes with very many siblings.\n",
            "diff": {
                "blib2to3/pytree.py": 42
            },
            "is_test": false,
            "is_fix": false
        },
        "2cc42f78929ba1815853be181d3b16da7c05f811": {
            "datetime": "2018-06-09T19:49:20-07:00",
            "summary": "Don't mark subtrees as changed that were already marked.",
            "message": "Don't mark subtrees as changed that were already marked.\n",
            "diff": {
                "blib2to3/pytree.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "2cf125a97c97ab05c8f36170285638474a837913": {
            "datetime": "2018-06-09T23:27:00-07:00",
            "summary": "Add failing test data",
            "message": "Add failing test data\n",
            "diff": {
                "tests/data/string_wayne.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "efcd039482de513eb2bb5f4f7688c51985c40494": {
            "datetime": "2018-06-10T09:44:41+01:00",
            "summary": "Fix string normalization eating all backslashes above 3",
            "message": "Fix string normalization eating all backslashes above 3\n",
            "diff": {
                "black.py": 8,
                "tests/data/string_quotes.py": 2,
                "tests/data/string_wayne.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "42a3fe53319a8c02858c2a96989ed1339f84515a": {
            "datetime": "2018-06-13T00:07:04-07:00",
            "summary": "Ignore symbolic links pointing outside of the root directory (#339)",
            "message": "Ignore symbolic links pointing outside of the root directory (#339)\n\nFixes #338\r\n",
            "diff": {
                "black.py": 15,
                "tests/test_black.py": 45
            },
            "is_test": true,
            "is_fix": false
        },
        "9db828c3def8f23f0d9e8650a7d2b009c8043eaf": {
            "datetime": "2018-06-16T11:53:45-07:00",
            "summary": "Add blank line after constants in stub file (#360)",
            "message": "Add blank line after constants in stub file (#360)\n\nFixes #340\r\n",
            "diff": {
                "black.py": 84
            },
            "is_test": false,
            "is_fix": false
        },
        "257f7193fa73435d1be2c643d97ac082121749d2": {
            "datetime": "2018-06-18T20:12:49-07:00",
            "summary": "Add travis badge and GitHub Fork banner to docs (#365)",
            "message": "Add travis badge and GitHub Fork banner to docs (#365)\n\n",
            "diff": {
                "docs/conf.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "8a8c58252cc023ae250d6febd24f50a8166450d4": {
            "datetime": "2018-06-18T22:37:46-07:00",
            "summary": "Support `# fmt: off/on` pairs within brackets",
            "message": "Support `# fmt: off/on` pairs within brackets\n\nFixes #329\n",
            "diff": {
                "black.py": 103,
                "tests/data/fmtonoff.py": 73
            },
            "is_test": false,
            "is_fix": false
        },
        "e4340f5c3edcfc2b7ee1ebad4521eeb6deb616df": {
            "datetime": "2018-06-18T22:37:46-07:00",
            "summary": "Cache generated comments",
            "message": "Cache generated comments\n",
            "diff": {
                "black.py": 68
            },
            "is_test": false,
            "is_fix": false
        },
        "df2ae3bbe6c45298aabb6c04e85cb353205626f1": {
            "datetime": "2018-06-19T17:32:41-07:00",
            "summary": "Use the separate pass for `# fmt: off` on all code",
            "message": "Use the separate pass for `# fmt: off` on all code\n\nThis removes the hacky exception-based handling that didn't work across\nstatement boundaries.\n\nFixes #335\n",
            "diff": {
                "black.py": 234,
                "tests/data/fmtonoff2.py": 31,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "e1ef57a29e03fb49688d27ed72c58ce80809f50f": {
            "datetime": "2018-06-19T20:44:47-07:00",
            "summary": "Move INDENT value to the postponed prefix",
            "message": "Move INDENT value to the postponed prefix\n\nThis makes blib2to3's tree output valid again (which was broken by the previous\nfiddling with INDENT and DEDENT nodes).\n\nFixes #334\n",
            "diff": {
                "blib2to3/pgen2/driver.py": 17,
                "tests/data/fmtonoff2.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "2dfa69bb7fc1d310902ae565271d595d307f166b": {
            "datetime": "2018-06-19T22:55:57-07:00",
            "summary": "Stop Click from crashing Black on invalid environments",
            "message": "Stop Click from crashing Black on invalid environments\n\nFixes #277\n",
            "diff": {
                "black.py": 23,
                "tests/test_black.py": 22
            },
            "is_test": true,
            "is_fix": false
        },
        "048efa7476bec1b2e7df156f2790f3565ab5c6d8": {
            "datetime": "2018-06-19T23:08:10-07:00",
            "summary": "Trivial nits",
            "message": "Trivial nits\n",
            "diff": {
                "black.py": 5,
                "blib2to3/pgen2/driver.py": 2,
                "tests/test_black.py": 30
            },
            "is_test": true,
            "is_fix": false
        },
        "c2327c83b28aa9ae6e7ea7078f17033c23e34d9c": {
            "datetime": "2018-06-19T23:46:58-07:00",
            "summary": "More tests for `# fmt: off`",
            "message": "More tests for `# fmt: off`\n\nTwo more known limitations that I don't feel like solving now.  Probably very\nlow priority.\n",
            "diff": {
                "black.py": 3,
                "tests/data/fmtonoff.py": 44
            },
            "is_test": false,
            "is_fix": false
        },
        "98b6c887da891eb1a4d9401a13ec12f9c5e7f7eb": {
            "datetime": "2018-06-20T12:00:07-07:00",
            "summary": "18.6b3",
            "message": "18.6b3\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "d93e72680625a100c7c5701280f1bcf83124ae40": {
            "datetime": "2018-06-21T14:03:01-07:00",
            "summary": "Don't freeze when multiple comments directly precede # fmt: off",
            "message": "Don't freeze when multiple comments directly precede # fmt: off\n\nFixes #371\n",
            "diff": {
                "black.py": 2,
                "tests/data/fmtonoff.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "41240e9a784fe11d9e1a76befaf09b7ab2d09893": {
            "datetime": "2018-06-21T14:25:07-07:00",
            "summary": "18.6b4",
            "message": "18.6b4\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "dd8bde6d2fbfe8a7a11093e761a0cb5837efa96a": {
            "datetime": "2018-07-02T17:49:47+01:00",
            "summary": "Improve get_future_imports implementation.",
            "message": "Improve get_future_imports implementation.\n\nCloses #389.\n",
            "diff": {
                "black.py": 29,
                "tests/data/python2_unicode_literals.py": 8,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "df965b055808bbfbe32f4f20ac949b364dafc900": {
            "datetime": "2018-07-18T22:10:52+01:00",
            "summary": "update to mypy 0.620 and make tests pass again",
            "message": "update to mypy 0.620 and make tests pass again\n\nFixes #408\n",
            "diff": {
                "tests/test_black.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "e94a41f92a568706700522aaad48ebd137fe1d8b": {
            "datetime": "2018-07-22T15:30:02+01:00",
            "summary": "Look at actual parenthesis when generating ignored leafs.",
            "message": "Look at actual parenthesis when generating ignored leafs.\n\nFixes #385\n",
            "diff": {
                "black.py": 14,
                "tests/data/fmtonoff.py": 72
            },
            "is_test": false,
            "is_fix": false
        },
        "cc48bc56caa79b0d605e80302c32be0457cfde39": {
            "datetime": "2018-08-17T15:03:58+01:00",
            "summary": "normalize numeric literals (#454)",
            "message": "normalize numeric literals (#454)\n\nFixes #452\r\n\r\nI ended up making a couple of other normalizations to numeric literals\r\ntoo (lowercase everything, don't allow leading or trailing . in floats,\r\nremove redundant + sign in exponent). I don't care too much about those,\r\nso I'm happy to change the behavior there.\r\n\r\nFor reference, here is Python's grammar for numeric literals:\r\nhttps://docs.python.org/3/reference/lexical_analysis.html#numeric-literals",
            "diff": {
                "black.py": 59,
                "tests/data/numeric_literals.py": 36,
                "tests/data/numeric_literals_py2.py": 12,
                "tests/test_black.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "9e15cacc6708a7b0dd4d86c943b591bb66c28e29": {
            "datetime": "2018-08-17T15:40:37+01:00",
            "summary": "write cache in --check mode (#453)",
            "message": "write cache in --check mode (#453)\n\nFixes #448.\r\n\r\nThis diff makes us always write to the cache in normal mode, except\r\nif the file is already in the cache, and it makes us write to the\r\ncache in --check mode if the file is already well formatted.\r\n\r\nI also fixed some related docstrings.\r\n\r\nWriteBack.NO is now used only in tests.",
            "diff": {
                "black.py": 30
            },
            "is_test": false,
            "is_fix": false
        },
        "1dbe77cd917de67f721df48741d148ea7f642317": {
            "datetime": "2018-08-17T10:14:10-07:00",
            "summary": "Simplify caching logic.",
            "message": "Simplify caching logic.\n",
            "diff": {
                "black.py": 29
            },
            "is_test": false,
            "is_fix": false
        },
        "ebbb98919d26caa641a6aa4ed6d3beb11a897cf2": {
            "datetime": "2018-08-17T10:17:37-07:00",
            "summary": "Make schedule_formatting logic less nested.",
            "message": "Make schedule_formatting logic less nested.\n",
            "diff": {
                "black.py": 90
            },
            "is_test": false,
            "is_fix": false
        },
        "71bdd727a826e36bc19213c47a324b872439478f": {
            "datetime": "2018-08-17T10:29:19-07:00",
            "summary": "Put missing blank lines after return statements.",
            "message": "Put missing blank lines after return statements.\n",
            "diff": {
                "black.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "2a357b360617e3853f5c960085e90a79399494ff": {
            "datetime": "2018-08-17T10:38:28-07:00",
            "summary": "Nits around numeral normalization.",
            "message": "Nits around numeral normalization.\n",
            "diff": {
                "black.py": 19
            },
            "is_test": false,
            "is_fix": false
        },
        "66b82ced502a826649f9c7172a9a1d24e415d792": {
            "datetime": "2018-08-19T13:10:06+01:00",
            "summary": "Fix minor typos (#443)",
            "message": "Fix minor typos (#443)\n\n",
            "diff": {
                "black.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "b719d85ccc330170e40b2617307a7e3b2a0bab14": {
            "datetime": "2018-08-19T21:02:06-07:00",
            "summary": "autodetect Python 3.6 on the basis of underscores (#461)",
            "message": "autodetect Python 3.6 on the basis of underscores (#461)\n\n",
            "diff": {
                "black.py": 7,
                "tests/test_black.py": 4
            },
            "is_test": true,
            "is_fix": false
        },
        "883689366ce0f0e0ddd66d81360c61abfd19b01a": {
            "datetime": "2018-08-20T14:47:58+01:00",
            "summary": "Support parsing of async generators in non-async functions (#165)",
            "message": "Support parsing of async generators in non-async functions (#165)\n\nThis is a new syntax added in python3.7, so black can't verify that reformatting will not change the ast unless black itself is run with 3.7. We'll need to change the error message black gives in this case. @ambv any ideas?\r\n\r\nFixes #125.",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 7,
                "tests/data/python37.py": 13,
                "tests/test_black.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "d4f05217546dd98f81ca472aa00e68d978c900f4": {
            "datetime": "2018-08-20T08:19:25-07:00",
            "summary": "fix misformatting of floats with leading zeros (#464)",
            "message": "fix misformatting of floats with leading zeros (#464)\n\n",
            "diff": {
                "black.py": 4,
                "tests/data/numeric_literals.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "8b340e210271a8108995fd479c55dbc0a34466bd": {
            "datetime": "2018-08-21T21:10:59-07:00",
            "summary": "wrap atoms in invisible parens to split adjacent strings (#463)",
            "message": "wrap atoms in invisible parens to split adjacent strings (#463)\n\n",
            "diff": {
                "black.py": 18,
                "tests/data/cantfit.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "b53cb9474348e13533ccba3735191a55ef3da6c4": {
            "datetime": "2018-08-23T12:52:07+01:00",
            "summary": "fix bracket match bug (#470)",
            "message": "fix bracket match bug (#470)\n\n* fix bracket match bug\r\n\r\n* add missing test file\r\n",
            "diff": {
                "black.py": 25,
                "tests/data/bracketmatch.py": 15,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": true
        },
        "a37abdcbc5d8828428cea8b9daca65d9ee0994b5": {
            "datetime": "2018-08-23T11:55:29-07:00",
            "summary": "change some numeric behavior (#469)",
            "message": "change some numeric behavior (#469)\n\n",
            "diff": {
                "black.py": 30,
                "tests/data/numeric_literals.py": 2,
                "tests/data/numeric_literals_py2.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "401836d02eb7516829fe1f84ca10791d04606f01": {
            "datetime": "2018-08-26T21:19:22+01:00",
            "summary": "add test case for preserving newlines from stdin",
            "message": "add test case for preserving newlines from stdin\n",
            "diff": {
                "tests/test_black.py": 32
            },
            "is_test": true,
            "is_fix": false
        },
        "66a6be642c73a6a7fcf6229ec1fa0f1c7c7611b1": {
            "datetime": "2018-08-26T21:27:33+01:00",
            "summary": "fix lint errors",
            "message": "fix lint errors\n",
            "diff": {
                "tests/test_black.py": 5
            },
            "is_test": true,
            "is_fix": true
        },
        "25795c9ff5d2e388bcef026d8642a6699208ce37": {
            "datetime": "2018-08-28T13:00:57+01:00",
            "summary": "Add trove classifier for Python 3.7 support (#486)",
            "message": "Add trove classifier for Python 3.7 support (#486)\n\nTesting added in 3bdd42389128bbbe8b64a8e050563f09bff99979.",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "08f1cdd00b4876b2a0545d46981924d5873a3289": {
            "datetime": "2018-09-08T10:34:08+01:00",
            "summary": "Make sure `async for` is not broken up to separate lines (#503)",
            "message": "Make sure `async for` is not broken up to separate lines (#503)\n\nFixes #372.",
            "diff": {
                "black.py": 11,
                "tests/data/python37.py": 28
            },
            "is_test": false,
            "is_fix": false
        }
    },
    "2018-09-10T12:55:32-07:00": {
        "80500748a7b4246e2381ddce869a09a215a591ae": {
            "datetime": "2018-09-17T12:03:21+01:00",
            "summary": "fix unstable formatting when unpacking big tuples (#514)",
            "message": "fix unstable formatting when unpacking big tuples (#514)\n\n* fix unstable formatting when unpacking big tuples\r\n\r\n* add changelog entry\r\n",
            "diff": {
                "black.py": 12,
                "tests/data/expression.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "a82f1867875c906bedfe3ef675473b795d8b0440": {
            "datetime": "2018-09-17T10:02:25-07:00",
            "summary": "blackd: a HTTP server for blackening (#460)",
            "message": "blackd: a HTTP server for blackening (#460)\n\n",
            "diff": {
                "black.py": 12,
                "blackd.py": 106,
                "setup.py": 5,
                "tests/test_black.py": 200
            },
            "is_test": true,
            "is_fix": false
        },
        "41368138bbc69fd805dfc931f165e9488fc9986c": {
            "datetime": "2018-09-18T12:04:30-07:00",
            "summary": "Fix documentation build",
            "message": "Fix documentation build\n",
            "diff": {
                "black.py": 11
            },
            "is_test": false,
            "is_fix": false
        },
        "bbf38400ceef34119e63c18c71e3316040a90a59": {
            "datetime": "2018-09-25T16:01:56+01:00",
            "summary": "Uppercase digits in hex literals (#530)",
            "message": "Uppercase digits in hex literals (#530)\n\n",
            "diff": {
                "black.py": 8,
                "tests/data/numeric_literals.py": 2,
                "tests/data/numeric_literals_py2.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "2d99573b343cbaa721746af8df0ffb27e93140d4": {
            "datetime": "2018-09-25T16:25:58+01:00",
            "summary": "Add .nox directories to default exclude (#525)",
            "message": "Add .nox directories to default exclude (#525)\n\n[Nox](https://nox.readthedocs.io/) is similar to Tox. It creates a .nox directory that contains virtualenv for testing with different Python versions.",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "5f9eb9e4f7baa35cb87eb3f8a9fed81f1195a72e": {
            "datetime": "2018-09-26T12:32:11+01:00",
            "summary": "Add underscores to numeric literals with more than six digits (#529)",
            "message": "Add underscores to numeric literals with more than six digits (#529)\n\n",
            "diff": {
                "black.py": 29,
                "blackd.py": 9,
                "tests/data/fmtonoff.py": 2,
                "tests/data/function.py": 2,
                "tests/data/numeric_literals.py": 6,
                "tests/data/numeric_literals_skip_underscores.py": 23,
                "tests/test_black.py": 11
            },
            "is_test": true,
            "is_fix": false
        },
        "25d24a10a4f4cdf81b7335615c74f285127b1a04": {
            "datetime": "2018-09-26T13:26:50+01:00",
            "summary": "Add trailing comma when a single import doesn't fit on a line. (#504)",
            "message": "Add trailing comma when a single import doesn't fit on a line. (#504)\n\nFixes #250.",
            "diff": {
                "black.py": 5,
                "tests/data/import_spacing.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0c5c5374313566dd9047c3e992a3c23a7ea4b8f2": {
            "datetime": "2018-09-26T07:41:34-07:00",
            "summary": "Refactor left_hand_split and right_hand_split to deduplicate line building logic",
            "message": "Refactor left_hand_split and right_hand_split to deduplicate line building logic\n",
            "diff": {
                "black.py": 73
            },
            "is_test": false,
            "is_fix": false
        },
        "1610fd6bc5d594c4f27698825913d2f791d3ea02": {
            "datetime": "2018-09-26T08:26:35-07:00",
            "summary": "Add trailing comma for single `as` imports, too",
            "message": "Add trailing comma for single `as` imports, too\n",
            "diff": {
                "black.py": 5,
                "tests/data/comments2.py": 14,
                "tests/data/comments4.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "a4b5c085a30f32fddce46ed50f3378ef32c43d5d": {
            "datetime": "2018-09-26T08:53:56-07:00",
            "summary": "Move should_explode handling to bracket_split_build_line",
            "message": "Move should_explode handling to bracket_split_build_line\n",
            "diff": {
                "black.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "c6c8ef76a4d991cd8a7a3b00a816b6db72ecdf04": {
            "datetime": "2018-09-26T09:42:42-07:00",
            "summary": "Fix mangling pweave and Spyder IDE special comments",
            "message": "Fix mangling pweave and Spyder IDE special comments\n\nFixes #532.\n",
            "diff": {
                "black.py": 6,
                "tests/data/comments.py": 3,
                "tests/data/comments3.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "7145fa325c10914187d38fb157b6e2c3391f3ee0": {
            "datetime": "2018-09-26T12:18:45-07:00",
            "summary": "Remove whitespace at the beginning of the file",
            "message": "Remove whitespace at the beginning of the file\n\nFixes #399\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "61feadc0f8db5b3676bd381d86def38da8b094b2": {
            "datetime": "2018-09-26T13:05:49-07:00",
            "summary": "v18.9b0",
            "message": "v18.9b0\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "ed9b31b1394bc4c57bad08a065477323c458e9c3": {
            "datetime": "2018-09-27T07:49:04-07:00",
            "summary": "Require attrs >= 18.1.0 to work around ctypes failure in Vim",
            "message": "Require attrs >= 18.1.0 to work around ctypes failure in Vim\n\nFixes #116, #539\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "99c97c3d7fa8532faf11f818bf1fcf08e991e62c": {
            "datetime": "2018-10-29T11:09:06+01:00",
            "summary": "delete unused code (#588)",
            "message": "delete unused code (#588)\n\n",
            "diff": {
                "black.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "5c2dd96a69a935cf45acbdf2ffabbd39b27d38fa": {
            "datetime": "2018-10-29T11:10:32+01:00",
            "summary": "patch main to ensure click_patch() gets called (#572)",
            "message": "patch main to ensure click_patch() gets called (#572)\n\n",
            "diff": {
                "black.py": 6,
                "blackd.py": 6,
                "setup.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "fbf59b60d750ace9792a78736f19a4e81a156333": {
            "datetime": "2018-11-13T21:23:56+00:00",
            "summary": "remove unused variable (#604)",
            "message": "remove unused variable (#604)\n\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "5bc62a4a82a4e59ad3bb8e9078b9992396ebfd2f": {
            "datetime": "2018-11-13T15:02:27-08:00",
            "summary": "Fix two types to be Optional (#607)",
            "message": "Fix two types to be Optional (#607)\n\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "e4e59f87a8c4d3844dca9a14b6a4abf544c7a0c8": {
            "datetime": "2018-11-13T15:04:27-08:00",
            "summary": "Improves performance on large commented logical lines (#606)",
            "message": "Improves performance on large commented logical lines (#606)\n\nFixes #509",
            "diff": {
                "black.py": 63
            },
            "is_test": false,
            "is_fix": false
        },
        "8d588273766675ece744f9b37c40483706f3a9d7": {
            "datetime": "2018-11-20T08:42:43-08:00",
            "summary": "Refactor Travis (#614)",
            "message": "Refactor Travis (#614)\n\nFixes #305 \r\n\r\n- Run separate jobs for mypy, self-formatting, flake8, and test runs.\r\n- Don't run flake8 in 3.8 because it is broken (and we can't really expect flake8 to always keep up with 3.8 development).\r\n- Fix unused variable in test\r\n",
            "diff": {
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "4809e365d43ff5f837f9dacbc1f3d04975fe35e8": {
            "datetime": "2018-11-29T21:43:22+00:00",
            "summary": "Silence expected stderr (#621)",
            "message": "Silence expected stderr (#621)\n\n* Silence expected stderr output during test\r\n\r\n* Change based on PR comment\r\n",
            "diff": {
                "tests/test_black.py": 21
            },
            "is_test": true,
            "is_fix": false
        },
        "55121195ce526aed2130c4df142b87e066744179": {
            "datetime": "2018-11-29T14:27:08-08:00",
            "summary": "Add .eggs to default exclusions (#629)",
            "message": "Add .eggs to default exclusions (#629)\n\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0b40a7badf82c53c8a23b3a03273619f8440855d": {
            "datetime": "2018-12-10T08:15:57+00:00",
            "summary": "Add CORS support to blackd (#627)",
            "message": "Add CORS support to blackd (#627)\n\nSee issue #622. Use aiohttp-cors to allow cross-origin requests to blackd,\r\nand add a dependency on it to the pipfile.\r\n",
            "diff": {
                "blackd.py": 23
            },
            "is_test": false,
            "is_fix": false
        },
        "fe24a15b84955130f23c8ab9490d1cdb98607b53": {
            "datetime": "2018-12-14T15:01:50+00:00",
            "summary": "Fix multiprocessing support for Windows binary (#632)",
            "message": "Fix multiprocessing support for Windows binary (#632)\n\n* Fix multiprocessing support for Windows binary\r\n\r\nThe black and blackd binaries generated for Windows builds would fail on\r\nreformatting multiple files due to a Windows-specific\r\nmultiprocessing issue. Fix by calling freeze_support() as\r\ndescribed in Python docs.\r\n\r\n",
            "diff": {
                "black.py": 3,
                "blackd.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "3b72ed0d4809a4f485891d0b565379217cb47e9f": {
            "datetime": "2018-12-31T05:03:31-08:00",
            "summary": "Improve an error message when failed to load pyproject.toml (#653)",
            "message": "Improve an error message when failed to load pyproject.toml (#653)\n\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "024c9cab55da7bd3236fd88759c9735d6149b464": {
            "datetime": "2019-01-05T11:20:12-08:00",
            "summary": "Add support for special comments in multiline functions (#642)",
            "message": "Add support for special comments in multiline functions (#642)\n\n",
            "diff": {
                "black.py": 26,
                "tests/data/comments6.py": 68,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "7546ed292c32ce6b86d0b5b2396131fa42f10645": {
            "datetime": "2019-01-12T09:23:20-08:00",
            "summary": "delete some dead code (#669)",
            "message": "delete some dead code (#669)\n\ndead code detected via [dead](https://github.com/asottile/dead)\r\n\r\n- **`KEYWORDS`**: introduced (unreferenced) in e74117f172e29e8a980e2c9de929ad50d3769150\r\n- **`FLOW_CONTROL`**: last referenced in e9a940d69e789ce8caf1f3c1ded786dc102df2fd\r\n\r\n\"clean\" command:\r\n\r\n```\r\ndead --exclude '^(tests/data/|docs/conf.py|blib2to3/)' | grep -Ev '^(visit_.*|show|_stop_signal|lib2to3_unparse) '\r\n```",
            "diff": {
                "black.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "4d3107233f18452d89e3caf148a098849a16b364": {
            "datetime": "2019-01-18T20:59:17-08:00",
            "summary": "Atomically write cache files (#674)",
            "message": "Atomically write cache files (#674)\n\n",
            "diff": {
                "black.py": 9,
                "blib2to3/pgen2/grammar.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "1ec2470da7a040e0d7e3900c97305731826ab101": {
            "datetime": "2019-01-29T13:46:19-08:00",
            "summary": "chore: Fix noqa comment (#684)",
            "message": "chore: Fix noqa comment (#684)\n\nOmitting the colon makes Flake8 ignore all errors, rather than the specific code.",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "f6643c4f0cfbae1f2493fdfce46cfbae3d26f46b": {
            "datetime": "2019-02-04T18:42:42-08:00",
            "summary": "Fix location of expression.diff in the change notification message (#670)",
            "message": "Fix location of expression.diff in the change notification message (#670)\n\n",
            "diff": {
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": true
        },
        "66aa676278948368dff251dffd58c850cb8b889e": {
            "datetime": "2019-02-04T18:55:01-08:00",
            "summary": "Fix indent calculation with tabs when computing prefixes (#595)",
            "message": "Fix indent calculation with tabs when computing prefixes (#595)\n\nCloses #262",
            "diff": {
                "blib2to3/pgen2/driver.py": 4,
                "tests/test_black.py": 13
            },
            "is_test": true,
            "is_fix": true
        },
        "36d3c516d3c09fc5f05c420900dd6b854e3c8bbd": {
            "datetime": "2019-02-06T18:43:50-08:00",
            "summary": "Add `--target-version` option to allow users to choose targeted Python versions (#618)",
            "message": "Add `--target-version` option to allow users to choose targeted Python versions (#618)\n\n",
            "diff": {
                "black.py": 361,
                "blackd.py": 90,
                "tests/data/fmtonoff.py": 4,
                "tests/test_black.py": 376
            },
            "is_test": true,
            "is_fix": false
        },
        "250ba7f04b300df284ba80cd4bb4122b45b41efb": {
            "datetime": "2019-02-06T19:16:49-08:00",
            "summary": "Remove numeric underscore normalization (#696)",
            "message": "Remove numeric underscore normalization (#696)\n\n",
            "diff": {
                "black.py": 63,
                "blackd.py": 6,
                "tests/data/function.py": 2,
                "tests/data/numeric_literals.py": 20,
                "tests/test_black.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "a00f426637bfc4922c952de5a021cd2095b63d36": {
            "datetime": "2019-02-14T20:23:56+00:00",
            "summary": "add missing aiohttp dep (#699)",
            "message": "add missing aiohttp dep (#699)\n\nadd missing aiohttp dep\r\n\r\nAlso mark 3.8 as allowed to fail for now; it will fail due to an aiohttp bug.\r\n\r\nFixes #690\r\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "f5b14b1afd1ceb240c0b46a2cd3e380a4da857df": {
            "datetime": "2019-02-22T22:00:40-08:00",
            "summary": " split long del statements into multiple lines (#698)",
            "message": " split long del statements into multiple lines (#698)\n\nFixes #693\r\n",
            "diff": {
                "black.py": 12,
                "tests/data/cantfit.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "21ab37a5d92c866a289320cba7c4689df70b3342": {
            "datetime": "2019-02-24T09:15:03-08:00",
            "summary": "remove --py36 (#724)",
            "message": "remove --py36 (#724)\n\nFixes #703.\r\n",
            "diff": {
                "black.py": 22,
                "tests/test_black.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "ea55ff28782f7e3b481c99faaf9f57e88597bdde": {
            "datetime": "2019-03-07T16:34:34-08:00",
            "summary": "remove Python implementation-specific versions (#736)",
            "message": "remove Python implementation-specific versions (#736)\n\n",
            "diff": {
                "black.py": 34,
                "blackd.py": 16,
                "tests/test_black.py": 16
            },
            "is_test": true,
            "is_fix": false
        }
    },
    "2019-03-09T12:55:32-07:00": {
        "227c2d77b48c6af0e6a2e667dfbb4412f3419005": {
            "datetime": "2019-03-14T13:39:42+01:00",
            "summary": "Changes default logger used by blib2to3 Driver (#732)",
            "message": "Changes default logger used by blib2to3 Driver (#732)\n\n... to stop it from spamming the log when black is used as a library in another\r\n    python application.\r\n\r\nWhen used indirectly by black the logger initiated in `driver.py` will emit\r\nthousands of debug messages making the debug level of the root logger virtually\r\nuseless. By getting a named logger instead the verbosity of logging from this\r\nmodule can easily be controlled by setting its log level.\r\n\r\nFixes #715\r\n",
            "diff": {
                "blib2to3/pgen2/driver.py": 4,
                "tests/test_black.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "087fedb17eeb6e9b1189792ca046ffa6d98579fe": {
            "datetime": "2019-03-14T13:40:52+01:00",
            "summary": "Simplify the #606 patch",
            "message": "Simplify the #606 patch\n\nThanks for the original patch to solve #509, @hauntsaninja.\n",
            "diff": {
                "black.py": 27
            },
            "is_test": false,
            "is_fix": false
        },
        "d00eac9944acdafe2fb61a61c7e763c6502e89d5": {
            "datetime": "2019-03-14T13:41:42+01:00",
            "summary": "Fix PendingDeprecationWarning: Task.all_tasks() is deprecated, use asyncio.all_tasks() instead (#741)",
            "message": "Fix PendingDeprecationWarning: Task.all_tasks() is deprecated, use asyncio.all_tasks() instead (#741)\n\n",
            "diff": {
                "black.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "ca9ad698ef75736828b644678eba2f4836db6277": {
            "datetime": "2019-03-14T16:26:41+01:00",
            "summary": "Enhance the type comment patch",
            "message": "Enhance the type comment patch\n",
            "diff": {
                "black.py": 39,
                "tests/data/comments2.py": 16,
                "tests/data/comments6.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "6af55d885132828be3775f6a7fd1652fdf30ec43": {
            "datetime": "2019-03-14T17:17:50+01:00",
            "summary": "Mention tab comment fixes, extend tests",
            "message": "Mention tab comment fixes, extend tests\n",
            "diff": {
                "tests/test_black.py": 23
            },
            "is_test": true,
            "is_fix": false
        },
        "ee7151e50f812a368faff0be910e6db26e282680": {
            "datetime": "2019-03-14T17:17:50+01:00",
            "summary": "Mention atomic cache creation in the change log",
            "message": "Mention atomic cache creation in the change log\n",
            "diff": {
                "blib2to3/pgen2/grammar.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "129ebd53a66b4a8069321742aeecfafb44c76fd9": {
            "datetime": "2019-03-14T17:31:27+01:00",
            "summary": "Add back --py36 as a deprecated option (#750)",
            "message": "Add back --py36 as a deprecated option (#750)\n\nThis partially reverts commit 21ab37a5d92c866a289320cba7c4689df70b3342.",
            "diff": {
                "black.py": 23
            },
            "is_test": false,
            "is_fix": false
        },
        "026c81b83454f176a9f9253cbfb70be2c159d822": {
            "datetime": "2019-03-14T18:09:10+01:00",
            "summary": "v19.3b0",
            "message": "v19.3b0\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "d6db1c12a8e14833fe22da377cddc2bd1f43dc14": {
            "datetime": "2019-03-14T16:42:54-07:00",
            "summary": "Fix print() function on Python 2 (#754)",
            "message": "Fix print() function on Python 2 (#754)\n\nFixes #752\r\n",
            "diff": {
                "black.py": 4,
                "tests/data/python2_print_function.py": 16,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": true
        },
        "b396f137618e4eb7c73b49033530383c45b160f3": {
            "datetime": "2019-03-15T18:39:08+01:00",
            "summary": "fix incorrect call (#762)",
            "message": "fix incorrect call (#762)\n\n",
            "diff": {
                "black.py": 2,
                "tests/data/composition.py": 25
            },
            "is_test": false,
            "is_fix": false
        },
        "ba64fc757c12e59fb35f2306eb4fa75fdc566647": {
            "datetime": "2019-03-16T11:35:18-07:00",
            "summary": "redo grammar selection, add test (#765)",
            "message": "redo grammar selection, add test (#765)\n\n",
            "diff": {
                "black.py": 18,
                "tests/test_black.py": 29
            },
            "is_test": true,
            "is_fix": false
        },
        "cea13f498418784e22f8fbd78db3f9240a2bad11": {
            "datetime": "2019-03-25T08:22:02-07:00",
            "summary": "Split the TRAILING_COMMA feature (#763)",
            "message": "Split the TRAILING_COMMA feature (#763)\n\n",
            "diff": {
                "black.py": 98,
                "tests/test_black.py": 23
            },
            "is_test": true,
            "is_fix": false
        },
        "597a0e102cce49a61b4bb01645f313bbbc86487e": {
            "datetime": "2019-05-02T20:09:49+01:00",
            "summary": "Fix B011 (#820)",
            "message": "Fix B011 (#820)\n\nDo not call assert False since python -O removes these calls. Instead callers should raise AssertionError(). ",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4a953b7241ce5f8bcac985fa33fdf3af4f42c0de": {
            "datetime": "2019-05-02T20:19:52+01:00",
            "summary": "ambv/black -> python/black (#819)",
            "message": "ambv/black -> python/black (#819)\n\n",
            "diff": {
                "black.py": 6,
                "docs/conf.py": 2,
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "e6ddb68c786256e1cb0c76b42d10c212ef34cb2a": {
            "datetime": "2019-05-05T14:58:26-04:00",
            "summary": "Wrap `loop.run_in_executor` up in `asyncio.ensure_future` for reliable cross-platform berhavior. (#679)",
            "message": "Wrap `loop.run_in_executor` up in `asyncio.ensure_future` for reliable cross-platform berhavior. (#679)\n\nCloses #494\r\n\r\nTask completion should also remove the task from `pending`.\r\n\r\nOnly replicates on some platforms. (eg. Can replicate on Python 3.7+, with either Windows or whatever default Linux distro Travis uses.)\r\n",
            "diff": {
                "black.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "6b994fdb8ab70ce4c2eafb8f2f0ff2648f3ff1ef": {
            "datetime": "2019-05-06T09:13:25-04:00",
            "summary": "fix handling of comments in from imports (#829)",
            "message": "fix handling of comments in from imports (#829)\n\nFixes #671",
            "diff": {
                "black.py": 13,
                "tests/data/comments7.py": 51,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": true
        },
        "18119d38466652ae818436cb497f601294ed4558": {
            "datetime": "2019-05-07T09:49:50-04:00",
            "summary": "Remove unnecessary parens around yield (#834)",
            "message": "Remove unnecessary parens around yield (#834)\n\n",
            "diff": {
                "black.py": 8,
                "tests/data/expression.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "de806405d2934b629d67e2a6317ad7e826765a20": {
            "datetime": "2019-05-07T09:51:28-04:00",
            "summary": "Add parentheses around tuple unpack assignment (#832)",
            "message": "Add parentheses around tuple unpack assignment (#832)\n\nFixes #656",
            "diff": {
                "black.py": 14,
                "tests/data/tupleassign.py": 10,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "06004cd319a6623a1fc29b582eb81e315179629f": {
            "datetime": "2019-05-07T09:58:59-04:00",
            "summary": "Add `black -c \"code\"` (#761)",
            "message": "Add `black -c \"code\"` (#761)\n\n",
            "diff": {
                "black.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "14cbf737dfc705fd72555416591d091d2807aac5": {
            "datetime": "2019-05-07T13:11:20-04:00",
            "summary": "don't run more than 61 workers on Windows (#838)",
            "message": "don't run more than 61 workers on Windows (#838)\n\n",
            "diff": {
                "black.py": 50
            },
            "is_test": false,
            "is_fix": false
        },
        "6fdbdb4ee301d8f9466da4da8364ac05611a1b19": {
            "datetime": "2019-05-08T09:53:20-04:00",
            "summary": "Avoid unstable formatting when comment follows escaped newline. (#839). Fixes #767.",
            "message": "Avoid unstable formatting when comment follows escaped newline. (#839). Fixes #767.\n\n",
            "diff": {
                "black.py": 8,
                "tests/data/comment_after_escaped_newline.py": 18,
                "tests/data/comments.py": 2,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "866be066463fc8fd01c16559596641f6ead1e797": {
            "datetime": "2019-05-08T07:45:59-07:00",
            "summary": "Make --safe work for Python2.7 syntax, by using typed_ast for safe validation (#840)",
            "message": "Make --safe work for Python2.7 syntax, by using typed_ast for safe validation (#840)\n\n",
            "diff": {
                "black.py": 31,
                "setup.py": 8,
                "tests/data/comments6.py": 4,
                "tests/test_black.py": 20
            },
            "is_test": true,
            "is_fix": false
        },
        "6bb90f22ed734a264e50aba0c74f989d90792e74": {
            "datetime": "2019-05-08T23:33:39+02:00",
            "summary": "Use  to handle legacy async/await handling in assert_equivalent",
            "message": "Use  to handle legacy async/await handling in assert_equivalent\n",
            "diff": {
                "black.py": 19
            },
            "is_test": false,
            "is_fix": false
        },
        "2227e6b1cdd301523ad8bde476a4afc0ba995f21": {
            "datetime": "2019-05-09T04:49:48+02:00",
            "summary": "Remove spurious prints",
            "message": "Remove spurious prints\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "448885b256ca1741fda7c4ef17f80f750ea614c0": {
            "datetime": "2019-05-09T17:59:29+02:00",
            "summary": "Move tokenizer config onto grammar, rename flag",
            "message": "Move tokenizer config onto grammar, rename flag\n\nBased on the feedback in\nhttps://github.com/python/black/pull/845#issuecomment-490622711\n\n- Remove TokenizerConfig, and add a field to Grammar instead.\n- Pass the Grammar to the tokenizer.\n- Rename `ASYNC_IS_RESERVED_KEYWORD` to `ASYNC_KEYWORDS` and\n  `ASYNC_IS_VALID_IDENTIFIER` to `ASYNC_IDENTIFIERS`.\n",
            "diff": {
                "black.py": 77,
                "blib2to3/pgen2/driver.py": 6,
                "blib2to3/pgen2/grammar.py": 3,
                "blib2to3/pgen2/tokenize.py": 11,
                "blib2to3/pygram.py": 9,
                "tests/data/python37.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "f8617f975d56e81cfb4070ce65584f7b29a77e7a": {
            "datetime": "2019-05-09T17:59:29+02:00",
            "summary": "Add support for always tokenizing async/await as keywords",
            "message": "Add support for always tokenizing async/await as keywords\n\nFixes #593\n\nI looked into this bug with @ambv and @carljm, and we reached the\nconclusion was that it's not possible for the tokenizer to determine if\nasync/await is a keyword inside all possible generators without breaking\nthe grammar for older versions of Python.\n\nInstead, we introduce a new tokenizer mode for Python 3.7+ that will\ncause all async/await instances to get parsed as a reserved keyword,\nwhich should fix async/await inside generators.\n",
            "diff": {
                "black.py": 82,
                "blib2to3/pgen2/driver.py": 16,
                "blib2to3/pgen2/tokenize.py": 12,
                "tests/data/async_as_identifier.py": 49,
                "tests/data/python37.py": 16,
                "tests/test_black.py": 20
            },
            "is_test": true,
            "is_fix": false
        },
        "957ba24bb6cdd32e4dd14ff2808dcf4d58851844": {
            "datetime": "2019-05-15T21:11:04-07:00",
            "summary": "remove obviously unnecessary parentheses (#850)",
            "message": "remove obviously unnecessary parentheses (#850)\n\nFixes #548",
            "diff": {
                "black.py": 20,
                "tests/data/expression.py": 2,
                "tests/data/remove_parens.py": 10,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "b85c345dbc70302610c05cc97fe30f5790fadc79": {
            "datetime": "2019-05-16T13:02:17+01:00",
            "summary": "Remove happiness of error message (#852)",
            "message": "Remove happiness of error message (#852)\n\n",
            "diff": {
                "black.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "cbe455ad6637897227fb0bb95660d63862f592b0": {
            "datetime": "2019-05-21T20:02:17-07:00",
            "summary": "minor performance improvement (~2% speedup in unit tests) (#858)",
            "message": "minor performance improvement (~2% speedup in unit tests) (#858)\n\n",
            "diff": {
                "black.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "519c06a8cc888d04c6bd19fb808dfde3a151163d": {
            "datetime": "2019-05-26T11:58:00+02:00",
            "summary": "Don't introduce quotes to f-string sub-expressions on string boundaries (#871)",
            "message": "Don't introduce quotes to f-string sub-expressions on string boundaries (#871)\n\n\r\n",
            "diff": {
                "black.py": 10,
                "tests/data/string_quotes.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "1c43252aa3f43f1e4123cd7d1bda71a3863b2cc2": {
            "datetime": "2019-05-26T12:09:11+02:00",
            "summary": "fix some out-of-date docstrings; other cleanup (#865)",
            "message": "fix some out-of-date docstrings; other cleanup (#865)\n\n",
            "diff": {
                "black.py": 30
            },
            "is_test": false,
            "is_fix": false
        },
        "7ce3894f23adf94f2f3cf206e06e7dce9f4ce401": {
            "datetime": "2019-05-26T12:10:14+02:00",
            "summary": "[blib2to3] Fixed a typo and removed an unused import. (#848)",
            "message": "[blib2to3] Fixed a typo and removed an unused import. (#848)\n\n",
            "diff": {
                "blib2to3/pygram.py": 1,
                "blib2to3/pytree.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "9394de150ebf0adc426523f46dc08e8b2b2b0b63": {
            "datetime": "2019-06-14T21:49:49-07:00",
            "summary": "Fix trailing comma for function with one arg (#880) (#891)",
            "message": "Fix trailing comma for function with one arg (#880) (#891)\n\nModified maybe_remove_trailing_comma to remove trailing commas for\r\ntypedarglists (in addition to arglists), and updated line split logic\r\nto ensure that all lines in a function definition that contain only one\r\narg have a trailing comma.",
            "diff": {
                "black.py": 15,
                "tests/data/function_trailing_comma.py": 14,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": true
        },
        "8f380911e0cd8057bd9a1f0c418d81195ce858a3": {
            "datetime": "2019-06-15T07:29:09+01:00",
            "summary": "Pin comment to single leaf in invisible parens (#872)",
            "message": "Pin comment to single leaf in invisible parens (#872)\n\n",
            "diff": {
                "black.py": 29,
                "tests/data/cantfit.py": 4,
                "tests/data/comments6.py": 3,
                "tests/data/comments7.py": 22
            },
            "is_test": false,
            "is_fix": false
        },
        "9d9f96a7b4a10c3b4967852f83ec5efa9c237e98": {
            "datetime": "2019-06-25T09:44:12-07:00",
            "summary": "Fix mypy errors. (#911)",
            "message": "Fix mypy errors. (#911)\n\n",
            "diff": {
                "black.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "7d213c6d4364a1bc3886f3253a7417c7b36f01a3": {
            "datetime": "2019-06-28T17:31:54+01:00",
            "summary": "Fix docstring of schedule_formatting",
            "message": "Fix docstring of schedule_formatting\n\nFixes #914.",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "b073c9a4e956f0e350394b7b164cac25801256d7": {
            "datetime": "2019-06-29T09:35:16-07:00",
            "summary": "Force parentheses between unary op and binary power. (#909)",
            "message": "Force parentheses between unary op and binary power. (#909)\n\n",
            "diff": {
                "black.py": 13,
                "tests/data/expression.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "f3bb22a828495c66d8d2dae1edf45e15fc2daddb": {
            "datetime": "2019-07-01T07:42:30-07:00",
            "summary": "Fix typo (#916)",
            "message": "Fix typo (#916)\n\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "90d205d1f50d4f801b3b3de3c40590eece10c4cd": {
            "datetime": "2019-07-16T18:45:56+01:00",
            "summary": "Use nullcontext in case when lock is None. Shutdown pool after code formatting. (#928)",
            "message": "Use nullcontext in case when lock is None. Shutdown pool after code formatting. (#928)\n\n",
            "diff": {
                "black.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "77b6ed1b70bd07f058bc551906bc880022847964": {
            "datetime": "2019-07-22T21:41:45+01:00",
            "summary": "Hello github.com/psf!",
            "message": "Hello github.com/psf!\n",
            "diff": {
                "black.py": 6,
                "docs/conf.py": 2,
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "d8fa8df0526de9c0968e0a3568008f58eae45364": {
            "datetime": "2019-07-28T16:03:23+01:00",
            "summary": "Add support for walrus operator (#935)",
            "message": "Add support for walrus operator (#935)\n\n* Parse `:=` properly\r\n* never unwrap parenthesis around `:=`\r\n* When checking for AST-equivalence, use `ast` instead of `typed-ast` when running on python >=3.8\r\n* Assume code that uses `:=` is at least 3.8\r\n",
            "diff": {
                "black.py": 96,
                "blib2to3/pgen2/grammar.py": 1,
                "blib2to3/pgen2/token.py": 3,
                "blib2to3/pgen2/tokenize.py": 2,
                "tests/data/pep_572.py": 40,
                "tests/test_black.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "2848e2e1d6527d6031ea020cd991fd73e52c4a0b": {
            "datetime": "2019-07-28T16:17:33+01:00",
            "summary": "Support PEP-570 (positional only arguments) (#946)",
            "message": "Support PEP-570 (positional only arguments) (#946)\n\nCode using positional only arguments is considered >= 3.8\r\n",
            "diff": {
                "black.py": 18,
                "tests/data/pep_570.py": 44,
                "tests/test_black.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "6b5eb7d4651c7333cc3f5df4bf7aa7a1f1ffb45b": {
            "datetime": "2019-07-28T16:35:10+01:00",
            "summary": "skip tests touching aiohttp when known exception occurs",
            "message": "skip tests touching aiohttp when known exception occurs\n",
            "diff": {
                "tests/test_black.py": 21
            },
            "is_test": true,
            "is_fix": false
        },
        "e66451761fab864cce9077a3ee72999543b8ef65": {
            "datetime": "2019-07-28T16:40:04+01:00",
            "summary": "appease flake8...",
            "message": "appease flake8...\n",
            "diff": {
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "65ea568e3301951f26e0e3b98f6d5dc80132e917": {
            "datetime": "2019-08-03T16:33:23-07:00",
            "summary": "Remove unnecessary if-statement in maybe_make_parens_invisible_in_atom (#964)",
            "message": "Remove unnecessary if-statement in maybe_make_parens_invisible_in_atom (#964)\n\n",
            "diff": {
                "black.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "c7495b9aa098ef7a358fc74556359d21c6a4ba11": {
            "datetime": "2019-08-04T10:03:19+01:00",
            "summary": "Fix unstable format involving backslash + whitespace at beginning of file (#948)",
            "message": "Fix unstable format involving backslash + whitespace at beginning of file (#948)\n\n\r\n",
            "diff": {
                "black.py": 8,
                "tests/data/beginning_backslash.py": 12,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": true
        },
        "154b98579d3904a042fd3e02a9d77a76be63b36c": {
            "datetime": "2019-08-05T10:06:12+01:00",
            "summary": "Fix async blackd tests which won't fail currently (#966)",
            "message": "Fix async blackd tests which won't fail currently (#966)\n\n",
            "diff": {
                "tests/test_black.py": 224
            },
            "is_test": true,
            "is_fix": true
        },
        "bd0ab3cba2fb2be65985741f0a4c382b675c2876": {
            "datetime": "2019-08-05T10:07:43+01:00",
            "summary": "Reraise exception in `skip_if_exception` decorator",
            "message": "Reraise exception in `skip_if_exception` decorator",
            "diff": {
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "40e8b3a231bade22d838858435a33d60a8325306": {
            "datetime": "2019-08-13T08:26:01-07:00",
            "summary": "[blackd] Support `py36`-style values in X-Python-Variant header (#979)",
            "message": "[blackd] Support `py36`-style values in X-Python-Variant header (#979)\n\n",
            "diff": {
                "blackd.py": 6,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "025d2ca4ba4f8e6e1f5915751eba972975dd9ff9": {
            "datetime": "2019-08-21T15:42:30+02:00",
            "summary": "use versioneer to manage __version__ (#981)",
            "message": "use versioneer to manage __version__ (#981)\n\n",
            "diff": {
                "_version.py": 556,
                "black.py": 8,
                "setup.py": 17,
                "versioneer.py": 1885
            },
            "is_test": false,
            "is_fix": false
        },
        "c9689b80fbb108316b0330fc1ed444ccab419b02": {
            "datetime": "2019-08-21T16:41:11+02:00",
            "summary": "fix doc generation",
            "message": "fix doc generation\n",
            "diff": {
                "docs/conf.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "3dc461a41a13cc36303aff80d079786ef210ddae": {
            "datetime": "2019-08-23T15:51:29+01:00",
            "summary": "Fix unstable formatting involving unwrapping multiple parentheses (#836) (#961)",
            "message": "Fix unstable formatting involving unwrapping multiple parentheses (#836) (#961)\n\nThis change also unwraps all unnecessary parentheses.\r\n",
            "diff": {
                "black.py": 39,
                "tests/data/remove_parens.py": 110
            },
            "is_test": false,
            "is_fix": false
        },
        "c4d2db43231cb927c89a403e2837b7fee92a6ad5": {
            "datetime": "2019-09-04T09:11:07+01:00",
            "summary": "Change variable in README according to the PEP8 (#1002)",
            "message": "Change variable in README according to the PEP8 (#1002)\n\n* Change variable in README according to the PEP8\r\n* Change variable in tests according to the PEP8\r\n",
            "diff": {
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "ae5588cf073be10b51dc48ad2fc513e11c4f3e03": {
            "datetime": "2019-09-04T12:51:32+01:00",
            "summary": "Print a separate message when there are no inputs given (#999)",
            "message": "Print a separate message when there are no inputs given (#999)\n\n\r\nFixes #886.\r\n",
            "diff": {
                "black.py": 13
            },
            "is_test": false,
            "is_fix": false
        }
    },
    "2019-09-05T12:55:32-07:00": {
        "0c44220e216f6d253087f96341110c693d3ef2d4": {
            "datetime": "2019-09-17T13:40:03-07:00",
            "summary": "Don't allow type comments to be merged behind regular comments (#1027)",
            "message": "Don't allow type comments to be merged behind regular comments (#1027)\n\nType comments only apply if they are the first comment on the line,\r\nwhich means that allowing them to be pushed behind a regular comment\r\nwhen joining lines is a semantic change (and, indeed, one that black\r\ncatches and fails on).",
            "diff": {
                "black.py": 18,
                "tests/data/comments6.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "673327449f86fce558adde153bb6cbe54bfebad2": {
            "datetime": "2019-09-18T12:54:40+01:00",
            "summary": "Support PEP 572 in while statements (#1028)",
            "message": "Support PEP 572 in while statements (#1028)\n\nCommit d8fa8df0526de9c0968e0a3568008f58eae45364 added support for\r\nparsing and formatting PEP572, but it missed the posibility to add\r\nPEP572 syntax in while statements.",
            "diff": {
                "tests/data/pep_572.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "7ae084aaa13b8c1b66410de44f0b9f86ab798c5c": {
            "datetime": "2019-09-18T13:33:14+01:00",
            "summary": "fix tests",
            "message": "fix tests\n",
            "diff": {
                "tests/data/pep_572.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "5938106ac4932cb9015122352c87e2f1daba55e8": {
            "datetime": "2019-09-18T13:34:20+01:00",
            "summary": "Switch from versioneer to setuptools-scm (#1008)",
            "message": "Switch from versioneer to setuptools-scm (#1008)\n\n",
            "diff": {
                "_version.py": 556,
                "black.py": 8,
                "setup.py": 7,
                "versioneer.py": 1885
            },
            "is_test": false,
            "is_fix": false
        },
        "47861a6a3b847026bfc677ae896fbcbe171347ae": {
            "datetime": "2019-09-18T14:00:18+01:00",
            "summary": "fix doc generation",
            "message": "fix doc generation\n",
            "diff": {
                "docs/conf.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "d9e71a75ccfefa3d9156a64c03313a0d4ad981e5": {
            "datetime": "2019-10-02T18:57:49-07:00",
            "summary": "Don't break long lines when `type: ignore` is present (#1040)",
            "message": "Don't break long lines when `type: ignore` is present (#1040)\n\nFixes #997.",
            "diff": {
                "black.py": 33,
                "tests/data/comments6.py": 4,
                "tests/data/comments7.py": 42,
                "tests/data/expression.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "6fe800933d8919436cabf40466ee462f49463814": {
            "datetime": "2019-10-10T11:50:51-07:00",
            "summary": "Fix issue with type comments on lines with trailing commas (#1058)",
            "message": "Fix issue with type comments on lines with trailing commas (#1058)\n\nThe code introduced in #1027 to detect whether a type comment appeared\r\nafter a regular comment in a Line would spuriously misfire when a leaf\r\nwas in the comments dict but had an empty list of comments. This can\r\noccur as an artifact of how comments on trailing commas are handled,\r\nit seems.\r\n\r\n(This was discovered trying to test black out on mypy.)",
            "diff": {
                "black.py": 2,
                "tests/data/comments2.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "133609463459b2b6a98f08bcf41a07f6b14ab747": {
            "datetime": "2019-10-10T18:25:33-07:00",
            "summary": "Fix missed cases in the `# type: ignore` logic (#1059)",
            "message": "Fix missed cases in the `# type: ignore` logic (#1059)\n\nIn #1040 I had convinced myself that the type ignore logic didn't\r\nneed anything like the ignored_ids from the type comment logic, but I\r\nwas wrong, and we do.\r\n\r\nWe hit these cases in practice a bunch.",
            "diff": {
                "black.py": 21,
                "tests/data/comments2.py": 6,
                "tests/data/comments6.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "6aef6c9d458e8df88f510e94c18f216232b6a786": {
            "datetime": "2019-10-13T10:21:15-07:00",
            "summary": "#455 Fix bug with tricky unicode symbols (#1047)",
            "message": "#455 Fix bug with tricky unicode symbols (#1047)\n\n* add test for special unicode symbol which usual re can not process correctly\r\nadd regex lib which supports unicode 12.1.0 standard\r\nreplace re usage in project in favor to regex\r\n\r\n* #455 fix dependency\r\n",
            "diff": {
                "black.py": 5,
                "blib2to3/pgen2/conv.py": 2,
                "blib2to3/pgen2/literals.py": 2,
                "blib2to3/pgen2/tokenize.py": 2,
                "docs/conf.py": 2,
                "setup.py": 1,
                "tests/data/tricky_unicode_symbols.py": 6,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "73bd7038fbefdb1c6a61fa1edf16ff61613050a5": {
            "datetime": "2019-10-13T11:35:31-07:00",
            "summary": "Add black version header to blackd responses (#1046)",
            "message": "Add black version header to blackd responses (#1046)\n\n",
            "diff": {
                "blackd.py": 24,
                "tests/test_black.py": 11
            },
            "is_test": true,
            "is_fix": false
        },
        "7b11f04d54d6da117ed5e640fd9420727f07ef81": {
            "datetime": "2019-10-14T18:15:18-07:00",
            "summary": "Fix type: ignore line breaking when there is a destructuring assignment (#1065)",
            "message": "Fix type: ignore line breaking when there is a destructuring assignment (#1065)\n\nIt turns out we also need to handle invisible *left* parens added at\r\nthe *start* of a line. Refactor `contains_unsplittable_type_ignore` to\r\nhandle this more cleanly.",
            "diff": {
                "black.py": 20,
                "tests/data/comments6.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "be35b1ed2d1f9453090bb29ac24abe997815ff70": {
            "datetime": "2019-10-15T10:08:44-07:00",
            "summary": "Declare support for Python 3.8 (#1069)",
            "message": "Declare support for Python 3.8 (#1069)\n\n",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "0ff718e1e2b434477bca134e6c8aa0f67c898cbc": {
            "datetime": "2019-10-20T15:55:31+02:00",
            "summary": "Blacken .py files in blib2to3 (#1011)",
            "message": "Blacken .py files in blib2to3 (#1011)\n\n* Blacken .py files in blib2to3\r\n\r\nThis is in preparation for adding type annotations to blib2to3 in\r\norder to compiling it with mypyc (#1009, which I can rebase on top of\r\nthis).\r\n\r\nTo enforce that it stays blackened, I just cargo-culted the existing\r\ntest code used for validating formatting. It feels pretty clunky now,\r\nthough, so I can abstract the common logic out into a helper if that\r\nseems better. (But error messages might be less clear then?)\r\n\r\n* Tidy up the tests\r\n",
            "diff": {
                "blib2to3/__init__.py": 2,
                "blib2to3/pgen2/conv.py": 61,
                "blib2to3/pgen2/driver.py": 38,
                "blib2to3/pgen2/grammar.py": 15,
                "blib2to3/pgen2/literals.py": 35,
                "blib2to3/pgen2/parse.py": 14,
                "blib2to3/pgen2/pgen.py": 67,
                "blib2to3/pgen2/token.py": 6,
                "blib2to3/pgen2/tokenize.py": 355,
                "blib2to3/pygram.py": 16,
                "blib2to3/pytree.py": 99,
                "tests/test_black.py": 68
            },
            "is_test": true,
            "is_fix": false
        },
        "9854d4b375ef84d651892785165a6c7b0e9f391b": {
            "datetime": "2019-10-20T16:08:34+02:00",
            "summary": "Tweak collection literals to explode with trailing comma (#826)",
            "message": "Tweak collection literals to explode with trailing comma (#826)\n\n",
            "diff": {
                "black.py": 129,
                "tests/data/collections.py": 160,
                "tests/data/comments2.py": 4,
                "tests/data/comments7.py": 2,
                "tests/data/expression.py": 24,
                "tests/data/fmtonoff.py": 2,
                "tests/data/function.py": 2,
                "tests/data/function2.py": 2,
                "tests/data/function_trailing_comma.py": 4,
                "tests/test_black.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "b73ec93fa71ae8980d0743555a9f49f46528e6e1": {
            "datetime": "2019-10-20T16:16:26+02:00",
            "summary": "Add .svn to default exclusion list (#965)",
            "message": "Add .svn to default exclusion list (#965)\n\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "4b5852e44ac9d2d2aa10fbbfa66a5f02421e7768": {
            "datetime": "2019-10-20T16:52:07+02:00",
            "summary": "Set correct return statement for `is_type_comment` function (#929)",
            "message": "Set correct return statement for `is_type_comment` function (#929)\n\n",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "a73d25883aaaa3fa3a10ea2ddfcb70ac1efd448e": {
            "datetime": "2019-10-20T08:35:57-07:00",
            "summary": "fix CI (#1078)",
            "message": "fix CI (#1078)\n\n",
            "diff": {
                "black.py": 4,
                "tests/data/comments2.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "14b28c89c22659e1f935bc0ac22ee03d90bcc290": {
            "datetime": "2019-10-20T09:02:17-07:00",
            "summary": "Back out #850 (#1079)",
            "message": "Back out #850 (#1079)\n\nFixes #1042 (and probably #1044 which looks like the same thing).\r\n\r\nThe issue with the \"obviously unnecessary\" parentheses that #850 removed is that sometimes they're necessary to help Black fit something in one line. I didn't see an obvious solution that still removes the parens #850 was intended to remove, so let's back out this change for now in the interest of unblocking a release.\r\n\r\nThis PR also adds a test adapted from the failing example in #1042, so that if we try to reapply the #850 change we don't break the same case again.",
            "diff": {
                "black.py": 20,
                "tests/data/expression.py": 2,
                "tests/data/remove_parens.py": 32
            },
            "is_test": false,
            "is_fix": false
        },
        "03766f515b908b76a488da40fec3eeffb9369af7": {
            "datetime": "2019-10-21T11:20:13+02:00",
            "summary": "Do not load incompatible cache (#875) (#1034)",
            "message": "Do not load incompatible cache (#875) (#1034)\n\nA black cache created in Python 3.8 throws an unhandled\r\nValueError in earlier versions. This is because 3.6 does\r\nnot recognize the pickle protocol used as default in 3.8.\r\nAccordingly, this commit:\r\n\r\n  - Fixes read_cache to return an empty cache instead.\r\n\r\n  - Changes the pickle protocol to 4 as the highest protocol\r\n    fully supported by black's supported Python versions.",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "e9d4e7b67f359114ba57ecf0c1300f7eb4f08950": {
            "datetime": "2019-10-21T11:44:53+02:00",
            "summary": "add gitignore support using pathspec (#878)",
            "message": "add gitignore support using pathspec (#878)\n\n",
            "diff": {
                "black.py": 27,
                "setup.py": 1,
                "tests/test_black.py": 57
            },
            "is_test": true,
            "is_fix": false
        },
        "a701659da2e2b8cc5abca2c6c7c97832551627c0": {
            "datetime": "2019-10-21T15:03:01+02:00",
            "summary": "s/_version.py/_black_version.py/ (#1082)",
            "message": "s/_version.py/_black_version.py/ (#1082)\n\nSome users are installing Black as a dependency in their project. Having\r\na _version.py in site-packages is asking for a conflict sooner or later.\r\n\r\nIdeally we shouldn't require a separate version file at all, that's an\r\nadditional import we need to make. But I'll leave that bikeshedding for\r\na different time.",
            "diff": {
                "black.py": 2,
                "blackd.py": 2,
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "8ea13474a6d8dd6065d19a044477c02785424f18": {
            "datetime": "2019-10-23T21:15:12-07:00",
            "summary": "setup.py: rename _version.py to _black_version.py (#1089)",
            "message": "setup.py: rename _version.py to _black_version.py (#1089)\n\nIn #1082, _version.py was renamed to _black_version.py, but the\r\npy_modules line in setup.py wasn't changed, which meant that when\r\ninstalled from source, running it failed with something like:\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"~/.pyenv/versions/3.6.5/bin/black\", line 5, in <module>\r\n    from black import patched_main\r\n  File \"~/.pyenv/versions/3.6.5/lib/python3.6/site-packages/black.py\", line 55, in <module>\r\n    from _black_version import version as __version__\r\nModuleNotFoundError: No module named '_black_version'\r\n```",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4c4a51cb6bd01e2e813354502b8327285fc00e75": {
            "datetime": "2019-10-24T14:19:13-07:00",
            "summary": "Do not crash when failing to read an entry (#1090)",
            "message": "Do not crash when failing to read an entry (#1090)\n\n",
            "diff": {
                "black.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "53808e390294d717d69c71044527890d4ab7452e": {
            "datetime": "2019-10-27T11:31:10+00:00",
            "summary": "fix crash with long type annotations (#1093)",
            "message": "fix crash with long type annotations (#1093)\n\n",
            "diff": {
                "black.py": 8,
                "tests/data/function_trailing_comma.py": 11
            },
            "is_test": false,
            "is_fix": false
        },
        "58fd7885cd7ec3da248a1ce4d82a4e8d3dfd5af9": {
            "datetime": "2019-10-28T13:00:31+01:00",
            "summary": "Docstring nit",
            "message": "Docstring nit\n",
            "diff": {
                "black.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "b65af236cfd3c89938e3ddd012a5772d94826d84": {
            "datetime": "2019-10-28T14:09:57+01:00",
            "summary": "Upgrade typed-ast to 1.4.0",
            "message": "Upgrade typed-ast to 1.4.0\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "df6e1a41f79f462645f66f61d4d8785a415deb95": {
            "datetime": "2019-10-28T14:25:26+01:00",
            "summary": "Add diff support to blackd (#969)",
            "message": "Add diff support to blackd (#969)\n\n",
            "diff": {
                "blackd.py": 18,
                "tests/data/blackd_diff.py": 6,
                "tests/test_black.py": 26
            },
            "is_test": true,
            "is_fix": false
        },
        "6dca5278a3159cb35e8b9076bf81eacd35c1f0a7": {
            "datetime": "2019-10-28T14:55:24+01:00",
            "summary": "Fix regression: unexpected parentheses around non-mathematical powers",
            "message": "Fix regression: unexpected parentheses around non-mathematical powers\n\nThis was caused by an overly liberal application of parentheses in #909 that\nfixed #646.\n\nFixes #1041\n",
            "diff": {
                "black.py": 30,
                "tests/data/function2.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "e027fc9e75daadd7e22f12e6e1e374bcca998087": {
            "datetime": "2019-10-28T15:25:42+01:00",
            "summary": "line_length=1 to reduce churn (#1092)",
            "message": "line_length=1 to reduce churn (#1092)\n\n",
            "diff": {
                "black.py": 4,
                "tests/data/collections.py": 7,
                "tests/data/composition.py": 25
            },
            "is_test": false,
            "is_fix": false
        },
        "8adf5f08305c232632a63ff5fbb29be98c3aca5f": {
            "datetime": "2019-10-28T15:31:37+01:00",
            "summary": "Reword comment",
            "message": "Reword comment\n",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "95fd5cb6485c21cf0294899a4b2cb99c453fa01d": {
            "datetime": "2019-10-28T17:09:25+01:00",
            "summary": "Use early returns in `get_grammars()` to save an indentation level",
            "message": "Use early returns in `get_grammars()` to save an indentation level\n",
            "diff": {
                "black.py": 33
            },
            "is_test": false,
            "is_fix": false
        },
        "adce126949623da2f310e6ea3f9f83c37972582a": {
            "datetime": "2019-10-28T17:39:52+01:00",
            "summary": "Remove unnecessary casts after pinning Mypy to >= 0.740",
            "message": "Remove unnecessary casts after pinning Mypy to >= 0.740\n",
            "diff": {
                "black.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "0cf0d68cf20bf154667042c5240f460cbf9a81b1": {
            "datetime": "2019-10-28T17:42:46+01:00",
            "summary": "Explicitly close .gitignore during processing",
            "message": "Explicitly close .gitignore during processing\n",
            "diff": {
                "black.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "c1fe3aa4f81b39aeaf4a48138f7eedc73dfefc04": {
            "datetime": "2019-10-28T17:44:30+01:00",
            "summary": "Simplify some code flow",
            "message": "Simplify some code flow\n\nPut empty lines after control flow changes.\n",
            "diff": {
                "black.py": 43
            },
            "is_test": false,
            "is_fix": false
        },
        "32009775e569491a6a535c6e48201a3409e036f2": {
            "datetime": "2019-10-28T19:39:48+01:00",
            "summary": "Restore simple form of if statement",
            "message": "Restore simple form of if statement\n",
            "diff": {
                "black.py": 11
            },
            "is_test": false,
            "is_fix": false
        },
        "f99fad1b78a773f2a712b9ce21496e80cce6cf4f": {
            "datetime": "2019-10-28T20:34:37+01:00",
            "summary": "Always move the prefix out when wrapping with parentheses (#1103)",
            "message": "Always move the prefix out when wrapping with parentheses (#1103)\n\nFixes #1097",
            "diff": {
                "black.py": 39,
                "tests/data/tupleassign.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "23fec8b0f73a142d1796c8ca958230ad52d83c24": {
            "datetime": "2019-10-28T20:51:45+01:00",
            "summary": "Fix fmt on/off when multiple exist in leaf prefix (#1086)",
            "message": "Fix fmt on/off when multiple exist in leaf prefix (#1086)\n\nThe old behavior would detect the existence of a `# fmt: on` in a leaf\r\nnode's comment prefix and immediately mark the node as formatting-on,\r\neven if a subsequent `# fmt: off` in the same comment prefix would turn\r\nit back off. This change modifies that logic to track the state through\r\nthe entire prefix and take the final state.\r\n\r\nNote that this does not fully solve on/off behavior, since any _comment_\r\nlines between the off/on are still formatted. We may need to add\r\nvirtual leaf nodes to truly solve that. I will leave that for a separate\r\ncommit/PR.\r\n\r\nFixes #1005",
            "diff": {
                "black.py": 7,
                "tests/data/fmtonoff.py": 20,
                "tests/data/fmtonoff3.py": 35,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": true
        },
        "6bedb5c58a7d8c25aa9509f8217bc24e9797e90d": {
            "datetime": "2019-10-28T23:02:39+01:00",
            "summary": "Remove Poetry metadata",
            "message": "Remove Poetry metadata\n",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "31f4105731c9e5a6930905d358b62b2b834b940b": {
            "datetime": "2019-10-29T21:06:34-07:00",
            "summary": "Switch from attrs to dataclasses (#1116)",
            "message": "Switch from attrs to dataclasses (#1116)\n\nThe main motivation here is that mypyc is going to have custom support\r\nfor dataclasses but probably not attrs.\r\n",
            "diff": {
                "black.py": 29,
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "3e60f6d454616a795acb1e3e2b43efa979de4f46": {
            "datetime": "2019-10-30T07:29:29-07:00",
            "summary": "Support compilation with mypyc (#1009)",
            "message": "Support compilation with mypyc (#1009)\n\n* Make most of blib2to3 directly typed and mypyc-compatible\r\n\r\nThis used a combination of retype and pytype's merge-pyi to do the\r\ninitial merges of the stubs, which then required manual tweaking to\r\nmake actually typecheck and work with mypyc.\r\n\r\nCo-authored-by: Sanjit Kalapatapu <sanjitkal@gmail.com>\r\nCo-authored-by: Michael J. Sullivan <sully@msully.net>\r\n\r\n* Make black able to compile and run with mypyc\r\n\r\nThe changes made fall into a couple categories:\r\n * Fixing actual type mistakes that slip through the cracks\r\n * Working around a couple mypy bugs (the most annoying of which being\r\n   that we need to add type annotations in a number of places where\r\n   variables are initialized to None)\r\n\r\nCo-authored-by: Sanjit Kalapatapu <sanjitkal@gmail.com>\r\nCo-authored-by: Michael J. Sullivan <sully@msully.net>\r\n",
            "diff": {
                "black.py": 98,
                "blib2to3/pgen2/conv.py": 2,
                "blib2to3/pgen2/driver.py": 65,
                "blib2to3/pgen2/grammar.py": 54,
                "blib2to3/pgen2/literals.py": 13,
                "blib2to3/pgen2/parse.py": 66,
                "blib2to3/pgen2/pgen.py": 103,
                "blib2to3/pgen2/token.py": 135,
                "blib2to3/pgen2/tokenize.py": 73,
                "blib2to3/pygram.py": 148,
                "blib2to3/pytree.py": 304,
                "setup.py": 31,
                "tests/test_black.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "de6f4b1f6bd3211e80bc5a5f1f88e6ef69a550aa": {
            "datetime": "2019-11-07T12:57:39-08:00",
            "summary": "Fix simple typo: intput -> input (#1146)",
            "message": "Fix simple typo: intput -> input (#1146)\n\nFixes #1147",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4b449e7471c31ae2d3a890510322c40594cacc8f": {
            "datetime": "2019-11-25T14:16:00-08:00",
            "summary": "Fix unstable formatting with some `# type: ignore`s (#1113)",
            "message": "Fix unstable formatting with some `# type: ignore`s (#1113)\n\n`type: ignore` shouldn't block collapsing a line, since it will still\r\napply fine to the merged line. This prevents an issue where a reformat\r\ncauses it to shift lines and then be merged on a subsequent pass.\r\n\r\nThere is a downside to this, which is that it can cause a `type:\r\nignore` to apply to more code than was originally intended. There\r\nmight be a way to apply this in a more limited situation, but I'm not\r\nsure what it is.\r\n\r\nFixes #1061.",
            "diff": {
                "black.py": 5,
                "tests/data/comments2.py": 13,
                "tests/data/comments7.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "7af619b8c15f1825ac927f298596d53a8499feac": {
            "datetime": "2019-12-16T13:46:43-08:00",
            "summary": "Skip the broken version of regex (#1209)",
            "message": "Skip the broken version of regex (#1209)\n\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "1ab87a3f67bc80a2e59be2692f2e2f25dd143af7": {
            "datetime": "2020-01-02T14:33:30-08:00",
            "summary": "find_project_root: allow .git to be a file (#1217)",
            "message": "find_project_root: allow .git to be a file (#1217)\n\nFixes #1213",
            "diff": {
                "black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "9ef8e6c9b0090d787953bcd3c46a8942483fcc6b": {
            "datetime": "2020-01-18T07:12:24-08:00",
            "summary": "bump regex version, providing wheels (#1232)",
            "message": "bump regex version, providing wheels (#1232)\n\nClose #1112",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "a02829bea1452e0db150eec88c2d99eaf162aa72": {
            "datetime": "2020-01-18T07:13:15-08:00",
            "summary": "Use conditional case for diff reports (#1226)",
            "message": "Use conditional case for diff reports (#1226)\n\nWhen --diff flag is used, black will now use the\r\nconditional case in the Report output: eg \"would\r\nbe reformatted\"",
            "diff": {
                "black.py": 7,
                "tests/test_black.py": 21
            },
            "is_test": true,
            "is_fix": false
        },
        "7f5d0e97546f18c865160e31346f693341677149": {
            "datetime": "2020-01-18T07:21:19-08:00",
            "summary": "Remove unused variables tokenprog, Token and PlainToken (#1137)",
            "message": "Remove unused variables tokenprog, Token and PlainToken (#1137)\n\n",
            "diff": {
                "blib2to3/pgen2/tokenize.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "be49ac72a04dd70d3f496d3d062405ad4166ea0b": {
            "datetime": "2020-01-18T07:21:46-08:00",
            "summary": "Support py38-style starred expressions in return statement (#1121)",
            "message": "Support py38-style starred expressions in return statement (#1121)\n\n",
            "diff": {
                "tests/data/python38.py": 27,
                "tests/test_black.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "ce14fa8b497bae2b50ec48b3bd7022573a59cdb1": {
            "datetime": "2020-02-09T21:21:46+00:00",
            "summary": "Simplify Line.contains_multiline_strings method (#1267)",
            "message": "Simplify Line.contains_multiline_strings method (#1267)\n\n",
            "diff": {
                "black.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "8fef74cf527d7fa5f2da78fafc61152c8766d0ad": {
            "datetime": "2020-03-03T12:23:28+01:00",
            "summary": "Teach the Vim plugin to respect pyproject.toml (issue 414) (#1273)",
            "message": "Teach the Vim plugin to respect pyproject.toml (issue 414) (#1273)\n\nCreates two separate functions:\r\n\r\n1) abspath_pyproject_toml: find the absolute path to pyproject.toml\r\n2) parse_pyproject_toml: finds black-specific toml config\r\n\r\nCo-authored-by: Samuel Roeca <samuel.roeca@gmail.com>\r\n",
            "diff": {
                "black.py": 31
            },
            "is_test": false,
            "is_fix": false
        },
        "6d8b90167b00707c5524f993933e33ddbd5a90f6": {
            "datetime": "2020-03-03T14:55:14+01:00",
            "summary": "string prefixes: don't normalise capital R-strings (#1271)",
            "message": "string prefixes: don't normalise capital R-strings (#1271)\n\nResolves #1244\r\n\r\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\r\n",
            "diff": {
                "black.py": 2,
                "tests/data/string_prefixes.py": 6
            },
            "is_test": false,
            "is_fix": false
        }
    },
    "2020-03-03T12:55:32-07:00": {
        "d29303c9884e1ef715851d69acc5d54f84441720": {
            "datetime": "2020-03-04T16:40:48+01:00",
            "summary": "Split out Change Log (#1117)",
            "message": "Split out Change Log (#1117)\n\n* Split out Change Log\r\n- Move to CHANGES.md to allow bots to see changes\r\n- MANIFEST.in already includes *.md so CHANGES.md will be included\r\n- THis maintains format but the change log will now be after acknowledgements\r\n- This also ensure this gets added to pypi.org via setup.py function",
            "diff": {
                "setup.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "0626c89a5a0be5cca7d90bc01428ccf0ffe0f402": {
            "datetime": "2020-03-04T23:08:57+01:00",
            "summary": "Document how to use format_str()",
            "message": "Document how to use format_str()\n\nCloses #1064\n",
            "diff": {
                "black.py": 25
            },
            "is_test": false,
            "is_fix": false
        },
        "06f2790b5ca3fea45515e33c9660ad6265120a5a": {
            "datetime": "2020-03-04T23:16:55+01:00",
            "summary": "Rename FileMode into just Mode",
            "message": "Rename FileMode into just Mode\n\nThe mode was never just about files to begin with.  There are no other modes in\nBlack, this can be the default one.\n",
            "diff": {
                "black.py": 40
            },
            "is_test": false,
            "is_fix": false
        },
        "9a50ba261cf806a97923d170f53907c1424b4832": {
            "datetime": "2020-03-09T14:42:26+01:00",
            "summary": "Implement Black Version Gallery (#1294)",
            "message": "Implement Black Version Gallery (#1294)\n\nCloses #1290.",
            "diff": {
                "gallery/gallery.py": 305
            },
            "is_test": false,
            "is_fix": false
        },
        "3ac97a3084544d19ffe461a06e8ec6582eccf85d": {
            "datetime": "2020-03-09T15:32:27+00:00",
            "summary": "Update wording and formatting (#1302)",
            "message": "Update wording and formatting (#1302)\n\n",
            "diff": {
                "gallery/gallery.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "a33823e85956b30b3785120478775f8a9fe64b62": {
            "datetime": "2020-03-27T11:43:41+01:00",
            "summary": "Fix readthedocs build (#1321)",
            "message": "Fix readthedocs build (#1321)\n\n* migrate to new rtd config format and pip\r\n\r\n* no type field anymore\r\n\r\n* use builtin re for docs",
            "diff": {
                "docs/conf.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "9ed2542e938c327a53c17f8932ee5fc53776ba31": {
            "datetime": "2020-03-28T19:06:00-07:00",
            "summary": "Omit commit hash and date stamp from doc version (#1322)",
            "message": "Omit commit hash and date stamp from doc version (#1322)\n\n\r\nThis also removes the dependency on setuptools-scm while building the\r\ndocs.\r\n\r\nFixes #1104.\r\n",
            "diff": {
                "docs/conf.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "959848c17639bfc646128f6b582c5858164a5001": {
            "datetime": "2020-04-04T22:02:57-07:00",
            "summary": "Fix --diff output when encountering EOF (#1328)",
            "message": "Fix --diff output when encountering EOF (#1328)\n\n`split(\"\\n\")` includes a final empty element `\"\"` if the final line\r\nends with `\\n` (as it should for POSIX-compliant text files), which\r\nthen became an extra `\"\\n\"`.\r\n\r\n`splitlines()` solves that, but there's a caveat, as it will split\r\non other types of line breaks too (like `\\r`), which may not be\r\ndesired.\r\n\r\nFixes #526.",
            "diff": {
                "black.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "af7105f9ab4812c99f3d8a562b15913c2ccd7190": {
            "datetime": "2020-04-11T20:30:24-07:00",
            "summary": "Small nitpicks (#1340)",
            "message": "Small nitpicks (#1340)\n\nCo-authored-by: MomIsBestFriend <>",
            "diff": {
                "black.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "7a14a37981862ef418f3cdb4a7e2375856f97529": {
            "datetime": "2020-04-30T08:47:52+01:00",
            "summary": "Change exit code to 2 when config file doesn't exist (#1361)",
            "message": "Change exit code to 2 when config file doesn't exist (#1361)\n\nFixes #1360, where an invalid config file causes a return/exit code of 1. This\r\nchange means this case is caught earlier, treated like any other bad\r\nparameters, and results in an exit code of 2.\r\n\r\nCo-authored-by: Toby Fleming <tobywf@users.noreply.github.com>",
            "diff": {
                "black.py": 2,
                "tests/test_black.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "c8ca6b2b9ff3510bee12129824cebfc2fc51e5b2": {
            "datetime": "2020-05-08T05:10:04-07:00",
            "summary": "Issue 1144: Fix type annotations for --config option (#1166)",
            "message": "Issue 1144: Fix type annotations for --config option (#1166)\n\n",
            "diff": {
                "black.py": 19
            },
            "is_test": false,
            "is_fix": false
        },
        "892eddacd215d685e136686b7f629ade70adca83": {
            "datetime": "2020-05-08T14:37:17+02:00",
            "summary": "Fix for \"# fmt: on\" with decorators (#1325)",
            "message": "Fix for \"# fmt: on\" with decorators (#1325)\n\n",
            "diff": {
                "black.py": 51,
                "tests/data/fmtonoff4.py": 31,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": true
        },
        "544ea9c217cad9459d7b60665db787e94b52f93d": {
            "datetime": "2020-05-08T14:56:21+02:00",
            "summary": "Improve String Handling (#1132)",
            "message": "Improve String Handling (#1132)\n\nThis pull request's main intention is to wraps long strings (as requested by #182); however, it also provides better string handling in general and, in doing so, closes the following issues:\r\n\r\nCloses #26\r\nCloses #182\r\nCloses #933\r\nCloses #1183\r\nCloses #1243",
            "diff": {
                "black.py": 2164,
                "blib2to3/pgen2/pgen.py": 4,
                "blib2to3/pgen2/tokenize.py": 4,
                "gallery/gallery.py": 3,
                "tests/data/cantfit.py": 12,
                "tests/data/comments4.py": 42,
                "tests/data/comments6.py": 4,
                "tests/data/comments7.py": 8,
                "tests/data/composition.py": 15,
                "tests/data/long_strings.py": 563,
                "tests/data/long_strings__edge_case.py": 110,
                "tests/data/long_strings__regression.py": 698,
                "tests/data/string_quotes.py": 7,
                "tests/test_black.py": 128
            },
            "is_test": true,
            "is_fix": false
        },
        "9938c92fd72deda1156aca79946d7996a5365eaa": {
            "datetime": "2020-05-08T06:01:42-07:00",
            "summary": "Add error on non-list target-version in config file (#1284)",
            "message": "Add error on non-list target-version in config file (#1284)\n\n",
            "diff": {
                "black.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "a4c11a75e12300abfbe4c36854e450d42bdd1ee7": {
            "datetime": "2020-05-08T14:08:15+01:00",
            "summary": "Re-indent the contents of docstrings (#1053)",
            "message": "Re-indent the contents of docstrings (#1053)\n\n* Re-indent the contents of docstrings when indentation changes\r\n\r\nKeeping the contents of docstrings completely unchanged when\r\nre-indenting (from 2-space intents to 4, for example) can cause\r\nincorrect docstring indentation:\r\n\r\n```\r\nclass MyClass:\r\n  \"\"\"Multiline\r\n  class docstring\r\n  \"\"\"\r\n\r\n  def method(self):\r\n    \"\"\"Multiline\r\n    method docstring\r\n    \"\"\"\r\n    pass\r\n```\r\n...becomes:\r\n```\r\nclass MyClass:\r\n    \"\"\"Multiline\r\n  class docstring\r\n  \"\"\"\r\n\r\n    def method(self):\r\n        \"\"\"Multiline\r\n    method docstring\r\n    \"\"\"\r\n        pass\r\n```\r\n\r\nThis uses the PEP 257 algorithm for determining docstring indentation,\r\nand adjusts the contents of docstrings to match their new indentation\r\nafter `black` is applied.\r\n\r\nA small normalization is necessary to `assert_equivalent` because the\r\ntrees are technically no longer precisely equivalent -- some constant\r\nstrings have changed.  When comparing two ASTs, whitespace after\r\nnewlines within constant strings is thus folded into a single space.\r\n\r\nCo-authored-by: Luka Zakraj\u0161ek <luka@bancek.net>\r\n\r\n* Extract the inner `_v` method to decrease complexity\r\n\r\nThis reduces the cyclomatic complexity to a level that makes flake8 happy.\r\n\r\n* Blacken blib2to3's docstring which had an over-indent\r\n\r\nCo-authored-by: Luka Zakraj\u0161ek <luka@bancek.net>\r\nCo-authored-by: Zsolt Dollenstein <zsol.zsol@gmail.com>",
            "diff": {
                "black.py": 163,
                "blib2to3/pytree.py": 2,
                "tests/data/docstring.py": 138,
                "tests/test_black.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "92c611cfdf1124d0d2830ba9a503a7e7a57d2dee": {
            "datetime": "2020-05-08T06:16:57-07:00",
            "summary": "add bracket check in split_line (#1315)",
            "message": "add bracket check in split_line (#1315)\n\n",
            "diff": {
                "black.py": 1,
                "tests/data/comments.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "1382eabb3f27d7c9cd5328fb7fddd1ded98121fb": {
            "datetime": "2020-05-08T06:23:50-07:00",
            "summary": "Remove deprecated use of 'setup.py test' (#1275)",
            "message": "Remove deprecated use of 'setup.py test' (#1275)\n\nSince setuptools v41.5.0 (27 Oct 2019), the 'test' command is formally\r\ndeprecated and should not be used. Now use unittest as the test entry\r\npoint.",
            "diff": {
                "setup.py": 1,
                "tests/__init__.py": 0
            },
            "is_test": false,
            "is_fix": false
        },
        "8d6d92aa5b5248b5ff70ebf7977f8af5cbcb10b9": {
            "datetime": "2020-05-08T14:30:10+01:00",
            "summary": "Add option for printing a colored diff (#1266)",
            "message": "Add option for printing a colored diff (#1266)\n\n",
            "diff": {
                "black.py": 78,
                "setup.py": 6,
                "tests/test_black.py": 41
            },
            "is_test": true,
            "is_fix": false
        },
        "26c9465a22c732ab1e17b0dec578fa3432e9b558": {
            "datetime": "2020-05-08T06:40:56-07:00",
            "summary": "Add Change Log project URL (#1382)",
            "message": "Add Change Log project URL (#1382)\n\n* Add Change Log project URL\r\n\r\nCo-authored-by: Cooper Lees <me@cooperlees.com>\r\nCo-authored-by: Hugo van Kemenade <hugovk@users.noreply.github.com>",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "c0a7582e3d4cc8bec3b7f5a6c52b36880dcb57d7": {
            "datetime": "2020-05-08T15:46:07+02:00",
            "summary": "permits black to run in AWS Lambda: (#1141)",
            "message": "permits black to run in AWS Lambda: (#1141)\n\nAWS Lambda and some other virtualized environment may not permit access\r\nto /dev/shm on Linux and as such, trying to use ProcessPoolExecutor will\r\nfail.\r\n\r\nAs using parallelism is only a 'nice to have' feature of black, if it fails\r\nwe gracefully fallback to a monoprocess implementation, which permits black\r\nto finish normally.\r\n\r\nCo-authored-by: Allan Simon <asimon@yolaw.fr>",
            "diff": {
                "black.py": 14,
                "tests/test_black.py": 21
            },
            "is_test": true,
            "is_fix": false
        },
        "ede23ae7ff7056cd207398578588d37b386d4d76": {
            "datetime": "2020-05-08T15:47:18+02:00",
            "summary": "Add docstrings to fmt checking functions, add to docs",
            "message": "Add docstrings to fmt checking functions, add to docs\n\nFollow up from #1325\n\nAdds docstrings to the fmt checking functions.\nRenames fmt_on to is_fmt_on.\nAdds the functions to the autodocs.\n",
            "diff": {
                "black.py": 19
            },
            "is_test": false,
            "is_fix": false
        },
        "9104ebe5aeb1474cb163c303e35d40542673d5e8": {
            "datetime": "2020-05-08T14:57:32+01:00",
            "summary": "better test for mono executor",
            "message": "better test for mono executor\n",
            "diff": {
                "tests/test_black.py": 32
            },
            "is_test": true,
            "is_fix": false
        },
        "c5f87fb4ef49a0e0e497c75dffa2260a9cc33585": {
            "datetime": "2020-05-08T16:06:33+02:00",
            "summary": "Make the use of a ThreadPoolExecutor explicit",
            "message": "Make the use of a ThreadPoolExecutor explicit\n",
            "diff": {
                "black.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "67726a7cf351fd262861296ec38bf030619ad59d": {
            "datetime": "2020-05-08T15:37:08+01:00",
            "summary": "skip mono test while im working on it",
            "message": "skip mono test while im working on it\n",
            "diff": {
                "tests/test_black.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "89c87d22e79c744326c41e3a00c9dc7381762395": {
            "datetime": "2020-05-08T07:47:26-07:00",
            "summary": "add --force-exclude argument (#1032)",
            "message": "add --force-exclude argument (#1032)\n\nCo-authored-by: Peter Yu <2057325+yukw777@users.noreply.github.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "black.py": 168,
                "tests/test_black.py": 36
            },
            "is_test": true,
            "is_fix": false
        },
        "8e38b6626be681adbb367820ce65e05254664629": {
            "datetime": "2020-05-08T07:47:54-07:00",
            "summary": "Remove deprecated  --py36 option (#1236)",
            "message": "Remove deprecated  --py36 option (#1236)\n\n",
            "diff": {
                "black.py": 22
            },
            "is_test": false,
            "is_fix": false
        },
        "703faa323391165d13ee41d3ed4c417e62cd0ca2": {
            "datetime": "2020-05-08T16:15:31+01:00",
            "summary": "Fix mono test",
            "message": "Fix mono test\n",
            "diff": {
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": true
        },
        "6ea76e9b4f42e538540baa236875c94c9dc07697": {
            "datetime": "2020-05-08T16:15:31+01:00",
            "summary": "Improve error messages from BlackRunner",
            "message": "Improve error messages from BlackRunner\n",
            "diff": {
                "tests/test_black.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "7f4b27541330e2ff35b1a010c9de0c5f618f9f4c": {
            "datetime": "2020-05-08T16:27:50+01:00",
            "summary": "close event loop for all tests (#1394)",
            "message": "close event loop for all tests (#1394)\n\n",
            "diff": {
                "tests/test_black.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "2082a325fdd14f0aabd88f7f12a20f9fb085c538": {
            "datetime": "2020-05-08T08:50:50-07:00",
            "summary": "Refactor black into packages in src/ dir (#1376)",
            "message": "Refactor black into packages in src/ dir (#1376)\n\n- Move black.py to src/black/__init__.py\r\n- Have setuptools_scm make src/_black_version.py and exclude from git\r\n- Move blackd.py to src/blackd/__init__.py\r\n- Move blib2to3/ to src/\r\n- Update `setup.py`\r\n- Update unittests to pass\r\n  - Mostly path fixing + resolving\r\n- Update CI\r\n  - pre-commit config\r\n  - appveyor + travis\r\n\r\nTested on my mac with python 3.7.5 via:\r\n```\r\npython3 -m venv /tmp/tb3\r\n/tmp/tb3/bin/pip install --upgrade setuptools pip coverage pre-commit\r\n/tmp/tb2/bin/pip install ~/repos/black/\r\ncd ~/repos/black/\r\n/tmp/tb2/bin/coverage run tests/test_black.py\r\n/tmp/tb3/bin/pre-commit run -a\r\n/tmp/tb3/bin/black --help\r\n/tmp/tb3/bin/black ~/repos/ptr/ptr.py\r\n```",
            "diff": {
                "black.py": 0,
                "blackd.py": 0,
                "blib2to3/__init__.py": 0,
                "blib2to3/pgen2/__init__.py": 0,
                "blib2to3/pgen2/conv.py": 0,
                "blib2to3/pgen2/driver.py": 0,
                "blib2to3/pgen2/grammar.py": 0,
                "blib2to3/pgen2/literals.py": 0,
                "blib2to3/pgen2/parse.py": 0,
                "blib2to3/pgen2/pgen.py": 0,
                "blib2to3/pgen2/token.py": 0,
                "blib2to3/pgen2/tokenize.py": 0,
                "blib2to3/pygram.py": 0,
                "blib2to3/pytree.py": 0,
                "setup.py": 25,
                "tests/test_black.py": 29
            },
            "is_test": true,
            "is_fix": false
        },
        "3de8524de66fbe4843538115f2b21704ffeb79b2": {
            "datetime": "2020-05-08T09:53:07-07:00",
            "summary": "Add py.typed file. (#1395)",
            "message": "Add py.typed file. (#1395)\n\n* Add py.typed file",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "865f536143e73da60f7c6b60924eb2472deb1cfe": {
            "datetime": "2020-05-09T09:22:23-07:00",
            "summary": "Handle ImportError from multiprocessing module (#1400)",
            "message": "Handle ImportError from multiprocessing module (#1400)\n\nTermux's Python environment doesn't provide sem_open, but fails with a\r\nnested `ImportError` on import attempts:\r\n\r\n    ImportError: cannot import name 'SemLock' from '_multiprocessing'\r\n\r\nThis updates the existing handling for AWS Lambda to catch both\r\n`OSError` and `ImportError`.",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "c7da3482c7badf5c6d8c0c9a37495ab4529eaaad": {
            "datetime": "2020-05-15T20:47:21-07:00",
            "summary": "fix crashes on docstring whitespace changes (#1417)",
            "message": "fix crashes on docstring whitespace changes (#1417)\n\nFixes #1415",
            "diff": {
                "src/black/__init__.py": 5,
                "tests/data/docstring.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "b50a52708c564a9ded05b579e39eadbb928050a3": {
            "datetime": "2020-05-16T17:36:20-07:00",
            "summary": "Add primer CI tool \ud83c\udff4 (#1402)",
            "message": "Add primer CI tool \ud83c\udff4 (#1402)\n\n* Add primer CI tool \ud83d\udca9\r\n- Run in PATH `black` binary on configured projects\r\n- Can set wether we expect changes or not per project\r\n- Can set what python versions are supported for a project\r\n- if `long_checkout` True project will not be ran on CI\r\n\r\nWill add to CI after I finish unit tests to avoid silly bugs I'm sure I have \ud83e\udd2a\r\n\r\nTests:\r\n- Manual Run - Will add unit tests if people think it will be useful\r\n- Output:\r\n\r\n```shell\r\n(b) cooper-mbp1:black cooper$ time /tmp/b/bin/black-primer -k -w /tmp/cooper_primer_1\r\n[2020-05-10 08:48:25,696] INFO: 4 projects to run black over (lib.py:212)\r\n[2020-05-10 08:48:25,697] INFO: Skipping aioexabgp as it's disabled via config (lib.py:166)\r\n[2020-05-10 08:48:25,699] INFO: Skipping bandersnatch as it's disabled via config (lib.py:166)\r\n[2020-05-10 08:48:28,676] INFO: Analyzing results (lib.py:225)\r\n-- primer results \ud83d\udcca --\r\n\r\n2 / 4 succeeded (50.0%) \u2705\r\n0 / 4 FAILED (0.0%) \ud83d\udca9\r\n - 2 projects Disabled by config\r\n - 0 projects skipped due to Python Version\r\n - 0 skipped due to long checkout\r\n\r\nreal\t0m3.304s\r\nuser\t0m9.529s\r\nsys\t0m1.019s\r\n```\r\n\r\n- ls of /tmp/cooper_primer_1\r\n```\r\n(b) cooper-mbp1:black cooper$ ls -lh /tmp/cooper_primer_1\r\ntotal 0\r\ndrwxr-xr-x  21 cooper  wheel   672B May 10 08:48 attrs\r\ndrwxr-xr-x  14 cooper  wheel   448B May 10 08:48 flake8-bugbear\r\n```\r\n\r\n* Address mypy 3.6 type errors\r\n- Don't use asyncio.run() ... go back to the past :P\r\n- Refactor results into a named tuple of two dicts to avoid typing nightmare\r\n- Fix some variable names\r\n- Fix bug with rebase logic in git_checkout_or_rebase\r\n\r\n* Prettier the JSON config file for primer\r\n\r\n* Delete projects when finished, move dir to be timestamped + shallow copy\r\n\r\n* Re-enable disabled projects post @JelleZijlstra's docstring fix\r\n\r\n* Workaround for future annotations until someone tells me the correct fix",
            "diff": {
                "setup.py": 3,
                "src/black_primer/cli.py": 135,
                "src/black_primer/lib.py": 261
            },
            "is_test": false,
            "is_fix": false
        },
        "03b8304abd2ce5d29789f8a2b220143529fa5d90": {
            "datetime": "2020-05-17T07:18:45-07:00",
            "summary": "Update and fix Flake8 (#1424)",
            "message": "Update and fix Flake8 (#1424)\n\n* Update pre-commit\r\n\r\n* Fix F541 f-string is missing placeholders\r\n\r\n* Fix E741 ambiguous variable name 'l'\r\n\r\n* Update actions to v2",
            "diff": {
                "src/black/__init__.py": 22,
                "src/black_primer/cli.py": 2,
                "src/black_primer/lib.py": 6,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "8acc22f11480dab297ad31fa80fa63bea15066c6": {
            "datetime": "2020-05-17T12:18:49-07:00",
            "summary": "Add black-primer unittests (#1426)",
            "message": "Add black-primer unittests (#1426)\n\n* Add black-primer unittests\r\n\r\n- Get this tool covered with some decent unittests for all unittests wins\r\n- Have a CLI and lib test class\r\n- Import it from `test_black.py` so we always run tests\r\n- Revert typing asyncio.Queue as Queue[str] so we can work in 3.6\r\n- **mypy**: Until black > 3.6 disallow_any_generics=False for primer code\r\n\r\nTest:\r\n- Run tests: `coverage run tests/test_primer.py` or `coverage run -m unittest`\r\n```\r\n(b) cooper-mbp1:black cooper$ coverage report\r\nName                      Stmts   Miss  Cover\r\n---------------------------------------------\r\nsrc/black_primer/cli.py      49      8    84%\r\nsrc/black_primer/lib.py     148     28    81%\r\ntests/test_primer.py        114      1    99%\r\n---------------------------------------------\r\nTOTAL                       311     37    88%\r\n```\r\n\r\n* Use ProactorEventLoop for Windows + fix false path for Linux\r\n\r\n* Set Windows to use ProactorEventLoop in  to benefit all callers\r\n\r\n* sys.platform seems to not having the loop applied - So type ignore and use platform.system() gate\r\n\r\n* Have each test loop correctly set to ProactorEventLoop on Windows for < 3.8 too",
            "diff": {
                "src/black_primer/cli.py": 4,
                "src/black_primer/lib.py": 61,
                "tests/test_black.py": 4,
                "tests/test_primer.py": 207
            },
            "is_test": true,
            "is_fix": false
        },
        "a2408b3cb23fe252b3674cee484d742496bb3411": {
            "datetime": "2020-05-20T21:03:51-07:00",
            "summary": "black-primer: handle singular and plural in output messages (#1432)",
            "message": "black-primer: handle singular and plural in output messages (#1432)\n\n* Handle singular and plural in output messages",
            "diff": {
                "src/black_primer/cli.py": 6,
                "src/black_primer/lib.py": 22,
                "tests/test_primer.py": 14
            },
            "is_test": true,
            "is_fix": false
        },
        "f3599b22d4761558032b240605f1f37ee910ba10": {
            "datetime": "2020-05-21T06:44:43-07:00",
            "summary": "Fix typos (#1442)",
            "message": "Fix typos (#1442)\n\n",
            "diff": {
                "gallery/gallery.py": 2,
                "src/black/__init__.py": 12,
                "src/black_primer/lib.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "e6934fd8d9d749d8bab4e880d1e3f1f27537c2c1": {
            "datetime": "2020-05-21T21:57:58-07:00",
            "summary": "Enable primer on CI Runs + add all README listed black projects into primer.json (#1440)",
            "message": "Enable primer on CI Runs + add all README listed black projects into primer.json (#1440)\n\n* Add all listed by projects into primer.json + Enable on CI Runs\r\n- Change workers default to 2 as black uses system CPU count\r\n- Increase timeout to 5 mins for subprocess black runs\r\n- Takes about 120s for 13 (3 disabled) projects on my 2018 Macbook Pro\r\n  - I was not removing directories tho ...\r\n\r\nWill open an issue to investigate the failing projects and make this run cleaner.\r\n- Once we get more stable we can expect more repos to be black formatted\r\n\r\nRun it:\r\n- `black-primer -k -w /tmp/primer_large_test --debug --rebase`\r\n```\r\n[2020-05-20 21:44:01,273] DEBUG: Starting /Users/cooper/venvs/b/bin/black-primer (cli.py:125)\r\n[2020-05-20 21:44:01,273] DEBUG: Using selector: KqueueSelector (selector_events.py:53)\r\n[2020-05-20 21:44:01,274] INFO: 16 projects to run Black over (lib.py:276)\r\n[2020-05-20 21:44:01,274] DEBUG: Using 2 parallel workers to run Black (lib.py:281)\r\n[2020-05-20 21:44:01,274] DEBUG: worker 0 workng on aioexabgp (lib.py:215)\r\n[2020-05-20 21:44:01,276] DEBUG: worker 1 workng on attrs (lib.py:215)\r\n[2020-05-20 21:44:02,443] INFO: Finished aioexabgp (lib.py:249)\r\n[2020-05-20 21:44:02,443] DEBUG: worker 0 workng on bandersnatch (lib.py:215)\r\n[2020-05-20 21:44:04,409] INFO: Finished bandersnatch (lib.py:249)\r\n[2020-05-20 21:44:04,409] DEBUG: worker 0 workng on channels (lib.py:215)\r\n[2020-05-20 21:44:04,702] INFO: Finished attrs (lib.py:249)\r\n[2020-05-20 21:44:04,702] DEBUG: worker 1 workng on django (lib.py:215)\r\n[2020-05-20 21:44:04,702] INFO: Skipping django as it's disabled via config (lib.py:222)\r\n[2020-05-20 21:44:04,702] DEBUG: worker 1 workng on flake8-bugbear (lib.py:215)\r\n[2020-05-20 21:44:05,813] INFO: Finished channels (lib.py:249)\r\n[2020-05-20 21:44:05,813] DEBUG: worker 0 workng on hypothesis (lib.py:215)\r\n[2020-05-20 21:44:06,071] INFO: Finished flake8-bugbear (lib.py:249)\r\n[2020-05-20 21:44:06,071] DEBUG: worker 1 workng on pandas (lib.py:215)\r\n[2020-05-20 21:44:06,071] INFO: Skipping pandas as it's disabled via config (lib.py:222)\r\n[2020-05-20 21:44:06,071] DEBUG: worker 1 workng on poetry (lib.py:215)\r\n[2020-05-20 21:44:16,207] INFO: Finished hypothesis (lib.py:249)\r\n[2020-05-20 21:44:16,207] DEBUG: worker 0 workng on ptr (lib.py:215)\r\n[2020-05-20 21:44:17,077] INFO: Finished poetry (lib.py:249)\r\n[2020-05-20 21:44:17,077] DEBUG: worker 1 workng on pyramid (lib.py:215)\r\n[2020-05-20 21:44:17,460] INFO: Finished ptr (lib.py:249)\r\n[2020-05-20 21:44:17,460] DEBUG: worker 0 workng on pytest (lib.py:215)\r\n[2020-05-20 21:44:17,460] INFO: Skipping pytest as it's disabled via config (lib.py:222)\r\n[2020-05-20 21:44:17,460] DEBUG: worker 0 workng on sqlalchemy (lib.py:215)\r\n[2020-05-20 21:44:33,319] INFO: Finished pyramid (lib.py:249)\r\n[2020-05-20 21:44:33,319] DEBUG: worker 1 workng on tox (lib.py:215)\r\n[2020-05-20 21:44:42,274] INFO: Finished tox (lib.py:249)\r\n[2020-05-20 21:44:42,275] DEBUG: worker 1 workng on virtualenv (lib.py:215)\r\n[2020-05-20 21:44:47,928] INFO: Finished virtualenv (lib.py:249)\r\n[2020-05-20 21:44:47,928] DEBUG: worker 1 workng on warehouse (lib.py:215)\r\n[2020-05-20 21:45:16,784] INFO: Finished warehouse (lib.py:249)\r\n[2020-05-20 21:45:16,784] DEBUG: project_runner 1 exiting (lib.py:213)\r\n[2020-05-20 21:45:45,700] INFO: Finished sqlalchemy (lib.py:249)\r\n[2020-05-20 21:45:45,700] DEBUG: project_runner 0 exiting (lib.py:213)\r\n[2020-05-20 21:45:45,701] INFO: Analyzing results (lib.py:292)\r\n-- primer results \ud83d\udcca --\r\n\r\n13 / 16 succeeded (81.25%) \u2705\r\n0 / 16 FAILED (0.0%) \ud83d\udca9\r\n - 3 projects disabled by config\r\n - 0 projects skipped due to Python version\r\n - 0 skipped due to long checkout\r\n```\r\n\r\n* Move to partial for rmtree + specify a onerror handler for PermissionError on Windows for git\r\n\r\n* Set default coding to utf8 for very important emoji's on Windows\r\n\r\n* Set Python encoding to utf-8 for Windows\r\n\r\n* Appease the white space gods of Black!\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black_primer/cli.py": 7,
                "src/black_primer/lib.py": 40
            },
            "is_test": false,
            "is_fix": false
        },
        "ff6bbd5d960ef0053b20c9d9c621c8a348980833": {
            "datetime": "2020-05-22T12:16:31-07:00",
            "summary": "Capture CalledProcessError for any postitive returncode (#1450)",
            "message": "Capture CalledProcessError for any postitive returncode (#1450)\n\n- Leave logic to still allow for formatting changes to be ignored\r\n- Now just capture the output of any other error that has a > 1 returncode\r\n- Raise on anything else\r\n\r\nTest: Add unit test to exercise this new logic",
            "diff": {
                "src/black_primer/lib.py": 4,
                "tests/test_primer.py": 13
            },
            "is_test": true,
            "is_fix": false
        },
        "7403d95862ae54c3504a8003666e1a0739067894": {
            "datetime": "2020-05-24T09:37:46-07:00",
            "summary": "Refactor docs / Maintenance of docs (#1456)",
            "message": "Refactor docs / Maintenance of docs (#1456)\n\n* Split code style and components documentation\r\n\r\nSplits 'the_black_code_style', 'pragmatism', 'blackd',and 'black_primer'\r\ninto their own files. The exception being 'the_black_code_style' and\r\n'pragmatism'. They have been merged into one 'the_black_code_style_and_pragmatism'\r\nfile.\r\n\r\nThese changes are being made because the README is becoming very long. And\r\na README isn't great if it dissuades its reader because of its length.\r\n\r\n* Update the doc generation logic and configuration\r\n\r\nWith the moving of several sections in the README and the renaming of a\r\nfew files, 'conf.py' needs to be able to support custom sections.\r\n\r\nThis commit introduces DocSection which can be used to specify custom\r\nsections of documentation. The information stored in DocSection will be\r\nused by the process_sections function to read, process, and write the section\r\nto CURRENT_DIR.\r\n\r\nA large change has been made to the how the docs are prepared to be built.\r\nInstead of just generating the files needed by reading the README, this\r\nhas a full chain of operations so custom sections are supported. First,\r\nit reads the README and spits out a list of DocSection objects representing\r\nthe sections to be generated by process_sections. This is done since most\r\nof the docs still live in README. Then along with the defined custom_sections\r\n, the process_sections will be begin to process the DocSection objects.\r\nIt reads the information it needs to generate the section. Then fetches\r\nthe section's contents, calls processors required by the section to process\r\nthe section's contents, and finally writes the section to CURRENT_DIR.\r\n\r\nThis large change is so processing of the documentation can be done just\r\nfor the versions hosted on ReadTheDocs.org. An example processor using this\r\nfeature is a 'replace_links' processor. It will replace documentation\r\nlinks that point to the docs hosted on GitHub with links that point to the\r\nversion hosted on ReadTheDocs.org. (I won't be coding that ATM)\r\n\r\nThis also means that files will be overwritten or created once the docs\r\nhave been built. It is annoying, since you have to 'git reset --hard'\r\nand 'git clean -f -d' after each build, but there's nothing better. The old\r\nsystem had the same side effects, so yeah :(\r\n\r\n* Update filenames and delete unnecessary files\r\n\r\nUpdate the filenames since 'the_black_code_style' and 'pragmatism' were\r\nmerged and 'contributing' was deleted in favor of 'contributing_to_black'.\r\n\r\nAll symlinks were deleted since their home (_build/generated) is no longer\r\nused.\r\n\r\n* Fix broken links and a few redirections\r\n\r\n* Merge master into refactor_docs (manually done)\r\n\r\n* Add my and most of @hugovk suggestions\r\n\r\nCo-Authored-By: Hugo van Kemenade <hugovk@users.noreply.github.com>\r\n\r\n* Add logging and improve configurability\r\n\r\nJust some cleaning up up of the DocSection dataclass and added logging\r\nsupport so you know what's going on.\r\n\r\n* Rename a section and please the grammar gods of Black\r\n\r\nThanks @hugovk for the suggestion!\r\n\r\n* Fix Markdown comments\r\n\r\n* Add myself as an author :P\r\n\r\nSeems like the right time.\r\n\r\nCo-authored-by: Hugo van Kemenade <hugovk@users.noreply.github.com>",
            "diff": {
                "docs/conf.py": 205
            },
            "is_test": false,
            "is_fix": false
        },
        "34613383abad9afa5cc1b3945e50bbfca13d036e": {
            "datetime": "2020-05-26T19:42:07-07:00",
            "summary": "Make 'python -m black' work (#1460)",
            "message": "Make 'python -m black' work (#1460)\n\n",
            "diff": {
                "src/black/__main__.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "d10f85738ddc663fcc1ad72868d89df750956b4b": {
            "datetime": "2020-06-01T11:00:00-07:00",
            "summary": "Convert (most of the) configuration values from pyproject.toml to strings (#1466)",
            "message": "Convert (most of the) configuration values from pyproject.toml to strings (#1466)\n\n* Convert config values to string\r\n\r\nWe need to convert all configuration values from the pyproject.toml\r\nfile because Click already does value processing and conversion and\r\nit only expects the exact Python type or string. Click doesn't like\r\nthe integer 1 as a boolean for example. This also means other\r\nunsupported types like datetime.time will be rejected by Click as\r\na unvalid value instead of throwing an exception.\r\n\r\nWe only skip converting objects that are an instance of\r\ncollections.abc.Iterable because it's almost impossible to get back\r\nthe original iterable of a stringified iterable.\r\n\r\n* Move where the conversion happens\r\n\r\nInstead of converting the values in the merged 'default_map', I should\r\nconvert the values that were read from the 'pyproject.toml' file.\r\n\r\n* Change collections.abc.Iterable to (list, dict)\r\n\r\nI also moved where the conversion happens... again. I am rather indecisive\r\nif you haven't noticed. It should be better as it takes place in the\r\nparse_pyproject_toml logic where configuration modification already takes\r\nplace.\r\n\r\nActually when this PR was first created I had the conversion happen in that\r\nreturn statement, but the target_version check was complaining about it being\r\na string. So I moved the conversion after that check, but then Click didn't\r\nlike the stringifed list, which led me to check whether the value was an\r\ninstance of an Iterable before turning it into a string. And... I forgot that\r\ntype checking before conversion would allow it to work before the\r\ntarget_version check anyway.",
            "diff": {
                "src/black/__init__.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "88d12f88a97e5e4c8fd0d245df0a311e932fd1e1": {
            "datetime": "2020-06-03T15:15:54-07:00",
            "summary": "expression tests: adjust starred expression for Python 3.9 (#1441) (#1477)",
            "message": "expression tests: adjust starred expression for Python 3.9 (#1441) (#1477)\n\nAs discussed in #1441, Python 3.9's new parser will not parse\r\n`(*starred)` even using `compile()` with the `PyCF_ONLY_AST`\r\nflag (as `ast.parse()` does), it raises a `SyntaxError`. This\r\nbreaks the four tests that use this file with Python 3.9.\r\nUpstream does not consider this to be a bug - see\r\nhttps://bugs.python.org/issue40848#msg370643 - so we must\r\nadjust the expression. As suggested by @JelleZijlstra, this just\r\nadds a comma, which makes the new parser happy with it (the old\r\nparser is fine with this form also).\r\n\r\nSigned-off-by: Adam Williamson <awilliam@redhat.com>",
            "diff": {
                "tests/data/expression.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "b2c13de4906411ff0b3e20ec5a61f5803a660119": {
            "datetime": "2020-06-15T08:56:16-07:00",
            "summary": "Fix find_pyproject_toml type hint (#1495)",
            "message": "Fix find_pyproject_toml type hint (#1495)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "6ebdc5a644b5e53b83a99eb93d63c91d0751da16": {
            "datetime": "2020-06-16T11:58:33-07:00",
            "summary": "Fix toml parsing and bump toml from 0.10.0 to 0.10.1 (#1501)",
            "message": "Fix toml parsing and bump toml from 0.10.0 to 0.10.1 (#1501)\n\n* Bump toml from 0.10.0 to 0.10.1 to fix a bug\r\n\r\n* Add tests for TOML parsing and reading\r\n\r\n* Fix configuration bug affecting vim plugin\r\n\r\nThe vim plugin directly calls parse_pyproject and skips the Click processing\r\n, but parse_pyproject assumed that it would only be used before Click processing\r\nand therefore made the config values click friendly. This moves the \"make the values\r\nclick friendly processing\" into read_pyproject_toml which is only called by a Click\r\ncallback.\r\n\r\n* Please mypy and flake8",
            "diff": {
                "src/black/__init__.py": 15,
                "tests/test_black.py": 41
            },
            "is_test": true,
            "is_fix": true
        },
        "2471b9256d9d9dfea1124d20072201693b9b0865": {
            "datetime": "2020-06-24T10:09:07+01:00",
            "summary": "Find project root correctly (#1518)",
            "message": "Find project root correctly (#1518)\n\nEnsure root dir is a common parent of all inputs\r\nFixes #1493",
            "diff": {
                "src/black/__init__.py": 23,
                "tests/test_black.py": 22
            },
            "is_test": true,
            "is_fix": false
        },
        "cc2facaac69a8ffa4486e6fe498842debb17ce12": {
            "datetime": "2020-07-08T08:51:18-07:00",
            "summary": "ISSUE 1533: Fix --config argument description (#1534)",
            "message": "ISSUE 1533: Fix --config argument description (#1534)\n\nChange --config argument description to \"Read configuration from FILE.\"\r\nThe \"--config FILE                   Read configuration from FILE path\"",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "98ac69f04ccaf3328b05e65d19a24f205825be4f": {
            "datetime": "2020-07-15T08:06:30-07:00",
            "summary": "Ensure path for finding root is absolute (#1550)",
            "message": "Ensure path for finding root is absolute (#1550)\n\nAs Path.resolve() is buggy on windows (see https://bugs.python.org/issue38671)\r\nan absolute path is ensured by prepending the Path.cwd()",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "f825e7ef28c65689e06453d0c3a00310b90cdfdb": {
            "datetime": "2020-08-12T19:12:21-07:00",
            "summary": "Remove slow assertion (#1592)",
            "message": "Remove slow assertion (#1592)\n\nPartial fix for #1581\r\n\r\nThis assertion produces behavior quadratic in the number of leaves in a line, which is making Black extremely slow on files with very long expressions. On my benchmark file this change makes Black 10x faster.",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "149b38d67430f0c580a05c821db767592e7d55e2": {
            "datetime": "2020-08-12T19:28:01-07:00",
            "summary": "Add the direnv base directory to the default excludes (#1564)",
            "message": "Add the direnv base directory to the default excludes (#1564)\n\nCo-authored-by: Chris Rose <offline@offby1.net>",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "97c11f22aaf3eacad42d4f78309ffc1f6965e955": {
            "datetime": "2020-08-12T20:07:19-07:00",
            "summary": "Make --exclude only apply to recursively found files (#1591)",
            "message": "Make --exclude only apply to recursively found files (#1591)\n\nEver since --force-exclude was added, --exclude started to touch files\r\nthat were given to Black through the CLI too. This is not documented\r\nbehaviour and neither expected as --exclude and --force-exclude now\r\nbehave the same!\r\n\r\nBefore this commit, get_sources() when encountering a file that was passed\r\nexplicitly through the CLI would pass a single Path object list to\r\ngen_python_files(). This causes bad behaviour since that function\r\ndoesn't treat the exclude and force_exclude regexes differently. Which\r\nis fine for recursively found files, but *not* for files given through\r\nthe CLI.\r\n\r\nNow when get_sources() iterates through srcs and encounters\r\na file, it checks if the force_exclude regex matches, if not, then the\r\nfile will be added to the computed sources set.\r\n\r\nA new function had to be created since before you can do regex matching,\r\nthe path must be normalized. The full process of normalizing the path is\r\nsomewhat long as there is special error handling. I didn't want to\r\nduplicate this logic in get_sources() and gen_python_files() so that's\r\nwhy there is a new helper function.",
            "diff": {
                "src/black/__init__.py": 99,
                "tests/test_black.py": 63
            },
            "is_test": true,
            "is_fix": false
        },
        "8842c5ffa888aab2e4961fc54db45e7f3ca32ad9": {
            "datetime": "2020-08-13T11:14:34-07:00",
            "summary": "in verbose mode, print stack trace (#1594)",
            "message": "in verbose mode, print stack trace (#1594)\n\nMake Black failures easier to debug",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "5e1f620af7ff5d2bb4205e398849e5395999a0cb": {
            "datetime": "2020-08-13T16:40:45-07:00",
            "summary": "fix some docstring crashes (#1593)",
            "message": "fix some docstring crashes (#1593)\n\nAllow removing some trailing whitespace\r\n",
            "diff": {
                "src/black/__init__.py": 2,
                "tests/data/docstring.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "d1ad8730e36819f787c720d1917de22b59806a75": {
            "datetime": "2020-08-13T19:20:46-07:00",
            "summary": "don't strip brackets before lsqb (#1575) (#1590)",
            "message": "don't strip brackets before lsqb (#1575) (#1590)\n\nif the string contains a PERCENT, it's not safe to remove brackets that\r\nfollow and operator with the same or higher precedence than PERCENT",
            "diff": {
                "src/black/__init__.py": 45,
                "tests/data/percent_precedence.py": 39,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "820f38708fd41a1b992716b1f65c9b0656f589d0": {
            "datetime": "2020-08-14T09:17:56-07:00",
            "summary": "fix unary op detection (#1600)",
            "message": "fix unary op detection (#1600)\n\n",
            "diff": {
                "src/black/__init__.py": 20,
                "tests/data/percent_precedence.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "e5bb92f53c9ad736b4cade4738c8e6727f68a88c": {
            "datetime": "2020-08-20T14:23:28+02:00",
            "summary": "Disable string splitting/merging by default (#1609)",
            "message": "Disable string splitting/merging by default (#1609)\n\n* put experimental string stuff behind a flag\r\n* update tests\r\n* don't need an output section if it's the same as the input\r\n* Primer: Expect no formatting changes in attrs, hypothesis and poetry with --experimental-string-processing off\r\n\r\nCo-authored-by: Hugo van Kemenade <hugovk@users.noreply.github.com>",
            "diff": {
                "src/black/__init__.py": 86,
                "tests/data/long_strings_flag_disabled.py": 278,
                "tests/test_black.py": 172
            },
            "is_test": true,
            "is_fix": false
        },
        "37a0020e073555ffe0921ec1356a27610aadcca4": {
            "datetime": "2020-08-21T00:06:41+02:00",
            "summary": "Upgrade docs to Sphinx 3+ and add doc build test (#1613)",
            "message": "Upgrade docs to Sphinx 3+ and add doc build test (#1613)\n\n* Upgrade docs to Sphinx 3+\r\n* Fix all the warnings...\r\n\r\n- Fixed bad docstrings\r\n- Fixed bad fenced code blocks in documentation\r\n- Blocklisted some sections from being generated from the README\r\n- Added missing documentation to index.rst\r\n- Fixed an invalid autofunction directive in reference/reference_functions.rst\r\n- Pin another documentation dependency\r\n\r\n* Add documentation build test",
            "diff": {
                "docs/conf.py": 37,
                "src/black/__init__.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "205f3b67fbddc7ba0fa330c0493821e404451b82": {
            "datetime": "2020-08-21T16:45:30+02:00",
            "summary": "Fix dealing with generated files in docs",
            "message": "Fix dealing with generated files in docs\n",
            "diff": {
                "docs/conf.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "cb6f2198b8fc700f8cc0d36c338d613e509250f8": {
            "datetime": "2020-08-21T16:45:30+02:00",
            "summary": "Use properly renamed function name in docs",
            "message": "Use properly renamed function name in docs\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "bc71685d229baa28fdee8bb1928b82e9f632e0a4": {
            "datetime": "2020-08-21T16:45:30+02:00",
            "summary": "Open file explicitly with UTF-8 so it works on Windows, too",
            "message": "Open file explicitly with UTF-8 so it works on Windows, too\n",
            "diff": {
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "05cc7ede6a6e4f07e621fdd7a3541a5d39f6f156": {
            "datetime": "2020-08-21T16:45:30+02:00",
            "summary": "Reformat docs/conf.py according to the new style",
            "message": "Reformat docs/conf.py according to the new style\n",
            "diff": {
                "docs/conf.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "788268bc39a87d37a24d203fa5ee7b3953af3446": {
            "datetime": "2020-08-21T16:45:30+02:00",
            "summary": "Re-implement magic trailing comma handling:",
            "message": "Re-implement magic trailing comma handling:\n\n- when a trailing comma is specified in any bracket pair, that signals to Black\n  that this bracket pair needs to be always exploded, e.g. presented as \"one\n  item per line\";\n\n- this causes some changes to previously formatted code that erroneously left\n  trailing commas embedded into single-line expressions;\n\n- internally, Black needs to be able to identify trailing commas that it put\n  itself compared to pre-existing trailing commas. We do this by using/abusing\n  lib2to3's `was_checked` attribute.  It's True for internally generated\n  trailing commas and False for pre-existing ones (in fact, for all\n  pre-existing leaves and nodes).\n\nFixes #1288\n",
            "diff": {
                "gallery/gallery.py": 5,
                "src/black/__init__.py": 126,
                "src/blib2to3/pgen2/driver.py": 2,
                "tests/data/collections.py": 35,
                "tests/data/comments2.py": 8,
                "tests/data/comments7.py": 9,
                "tests/data/expression.py": 22,
                "tests/data/fmtonoff4.py": 7,
                "tests/data/function.py": 5,
                "tests/data/function2.py": 5,
                "tests/data/function_trailing_comma.py": 58,
                "tests/data/function_trailing_comma_wip.py": 5,
                "tests/data/import_spacing.py": 8,
                "tests/data/long_strings.py": 32,
                "tests/data/long_strings__regression.py": 12,
                "tests/data/long_strings_flag_disabled.py": 18,
                "tests/test_black.py": 52
            },
            "is_test": true,
            "is_fix": false
        },
        "4938cc9e9abf2581cb154c6a8d1ae66eb18e0d65": {
            "datetime": "2020-08-21T16:45:30+02:00",
            "summary": "Reset trailing comma handling",
            "message": "Reset trailing comma handling\n",
            "diff": {
                "src/black/__init__.py": 138
            },
            "is_test": false,
            "is_fix": false
        },
        "cd3a93a14689f046468ece2a5b1f78863c3c4cd2": {
            "datetime": "2020-08-21T16:47:49+02:00",
            "summary": "Property-based fuzz test",
            "message": "Property-based fuzz test\n",
            "diff": {
                "fuzz.py": 59
            },
            "is_test": false,
            "is_fix": false
        },
        "5faabb56160599c5303e53cf6113f1becc69756d": {
            "datetime": "2020-08-24T14:42:17+02:00",
            "summary": "Make doc generation a little smarter, update doc sections",
            "message": "Make doc generation a little smarter, update doc sections\n",
            "diff": {
                "docs/conf.py": 19
            },
            "is_test": false,
            "is_fix": false
        },
        "292bceb9fd2d7a642351d06c02d2e751933baa5c": {
            "datetime": "2020-08-24T18:48:11+02:00",
            "summary": "Add more trailing comma test variants",
            "message": "Add more trailing comma test variants\n",
            "diff": {
                "tests/data/comments7.py": 142,
                "tests/data/composition_no_trailing_comma.py": 367,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "d46268cd671760d4c370476006795919951b1076": {
            "datetime": "2020-08-24T21:33:51+02:00",
            "summary": "Run trailing comma tests with TargetVersion.PY38",
            "message": "Run trailing comma tests with TargetVersion.PY38\n",
            "diff": {
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "586d24236e6b57bc3b5da85fdbe2563835021076": {
            "datetime": "2020-08-25T22:10:05+02:00",
            "summary": "Address pre-existing trailing commas when not in the rightmost bracket pair",
            "message": "Address pre-existing trailing commas when not in the rightmost bracket pair\n\nThis required some hackery.  Long story short, we need to reuse the ability to\nomit rightmost bracket pairs (which glues them together and splits on something\nelse instead), for use with pre-existing trailing commas.\n\nThis form of user-controlled formatting is brittle so we have to be careful not\nto cause a scenario where Black first formats code without trailing commas in\none way, and then looks at the same file with pre-existing trailing commas\n(that it itself put on the previous run) and decides to format the code again.\n\nOne particular ugly edge case here is handling of optional parentheses.  In\nparticular, the long-standing `line_length=1` hack got in the way of\npre-existing trailing commas and had to be removed.  Instead, a more\nintelligent but costly solution was put in place: a \"second opinion\" if the\nformatting that omits optional parentheses ended up causing lines to be too\nlong.  Again, for efficiency purposes, Black reuses Leaf objects from blib2to3\nand modifies them in place, which was invalid for having two separate\nformattings.  Line cloning was used to mitigate this.\n\nFixes #1619\n",
            "diff": {
                "src/black/__init__.py": 247,
                "tests/data/cantfit.py": 12,
                "tests/data/function_trailing_comma.py": 21,
                "tests/data/function_trailing_comma_wip.py": 5,
                "tests/data/long_strings_flag_disabled.py": 13,
                "tests/test_black.py": 16
            },
            "is_test": true,
            "is_fix": false
        },
        "9270a10f6f59f069eb14ffba0c75f58e5895b27c": {
            "datetime": "2020-08-25T23:14:39+02:00",
            "summary": "Improve docstring re-indentation handling",
            "message": "Improve docstring re-indentation handling\n\nThis addresses a few crashers, namely:\n\n* producing non-equivalent code due to mangling escaped newlines,\n\n* invalid hugging quote characters in the docstring body to the docstring outer\n  triple quotes (causing a quadruple quote which is a syntax error),\n\n* lack of handling for docstrings that start on the same line as the `def`, and\n\n* invalid stripping of outer triple quotes when the docstring contained\n  a string prefix.\n\nAs a bonus, tests now also run when string normalization is disabled.\n",
            "diff": {
                "src/black/__init__.py": 42,
                "tests/data/docstring.py": 59,
                "tests/test_black.py": 5
            },
            "is_test": true,
            "is_fix": false
        },
        "ceeb1d9a2ee08190704076f616e74a3cdd5e10c6": {
            "datetime": "2020-08-26T16:55:05+02:00",
            "summary": "Add expected failure tests with the unstable formattings",
            "message": "Add expected failure tests with the unstable formattings\n",
            "diff": {
                "tests/data/trailing_comma_optional_parens1.py": 3,
                "tests/data/trailing_comma_optional_parens2.py": 3,
                "tests/data/trailing_comma_optional_parens3.py": 8,
                "tests/test_black.py": 21
            },
            "is_test": true,
            "is_fix": false
        },
        "30a332c32fabe13d883d86b0422bcded0c91642f": {
            "datetime": "2020-08-26T16:55:05+02:00",
            "summary": "Include mode information for unstable formattings",
            "message": "Include mode information for unstable formattings\n",
            "diff": {
                "src/black/__init__.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "d7aa7f3cdd1e832204cd63a574a8935157e18de7": {
            "datetime": "2020-08-26T16:55:05+02:00",
            "summary": "Treat all trailing commas as pre-existing, as they effectively are",
            "message": "Treat all trailing commas as pre-existing, as they effectively are\n\nOn a second pass of Black on the same file, inserted trailing commas are now\npre-existing.  Doesn't make sense to differentiate between the passes then.\n",
            "diff": {
                "src/black/__init__.py": 27
            },
            "is_test": false,
            "is_fix": false
        },
        "3ae83c3090954c45b805010bc04354c2fbe3f2aa": {
            "datetime": "2020-08-26T17:16:26+02:00",
            "summary": "Make dependency on Click 7.0, regex 2020.1.8, and toml 0.10.1 explicit",
            "message": "Make dependency on Click 7.0, regex 2020.1.8, and toml 0.10.1 explicit\n",
            "diff": {
                "setup.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "e268cbaf668cc86b1e6aa52e52483cf4592e176c": {
            "datetime": "2020-08-27T01:29:21+02:00",
            "summary": " Revert contains_pragma_comment function changes",
            "message": " Revert contains_pragma_comment function changes\n",
            "diff": {
                "src/black/__init__.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "4ca92ac91c944b252caf8c2265e5854f839a66f4": {
            "datetime": "2020-08-27T01:29:21+02:00",
            "summary": "Revert contains_standalone_comments function changes",
            "message": "Revert contains_standalone_comments function changes\n",
            "diff": {
                "src/black/__init__.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "1ebe9b70c5624da964364841e30a2e3ffe109c4e": {
            "datetime": "2020-08-27T01:29:21+02:00",
            "summary": "Simplify black code by using generator expressions",
            "message": "Simplify black code by using generator expressions\n",
            "diff": {
                "src/black/__init__.py": 44
            },
            "is_test": false,
            "is_fix": false
        },
        "7fe19fac5bccc08dbcf21c293ab50f1fcda7716f": {
            "datetime": "2020-08-27T01:59:41+02:00",
            "summary": "Fix multiline docstring quote normalization",
            "message": "Fix multiline docstring quote normalization\n\nThe quotes of multiline docstrings are now only normalized when string\nnormalization is off, instead of the string normalization setting being\nignored and the quotes being *always* normalized.\n\nI had to make a new test case and data file since the current pair for\ndocstrings only worked when there is no formatting difference between the\nformatting results with string normalization on and off. I needed to add\ntests for when there *are* differences between the two. So I split\ntest_docstring's test code when string normalization is disabled into a\nnew test case along with a new data file.\n",
            "diff": {
                "src/black/__init__.py": 1,
                "tests/data/docstring_no_string_normalization.py": 209,
                "tests/test_black.py": 13
            },
            "is_test": true,
            "is_fix": true
        },
        "2b75f8870eac943c93e93c740c9d2ef74efeeb41": {
            "datetime": "2020-08-27T04:47:59-07:00",
            "summary": "fix 1631 and add test (#1641)",
            "message": "fix 1631 and add test (#1641)\n\n",
            "diff": {
                "src/black/__init__.py": 3,
                "tests/test_black.py": 18
            },
            "is_test": true,
            "is_fix": true
        },
        "0c6d4ca0c33aa97202e0e94a4a2389cc432597bc": {
            "datetime": "2020-08-28T08:37:37-07:00",
            "summary": "Fix typo in comment (#1650)",
            "message": "Fix typo in comment (#1650)\n\nCo-authored-by: Hugo van Kemenade <hugovk@users.noreply.github.com>",
            "diff": {
                "fuzz.py": 4
            },
            "is_test": false,
            "is_fix": false
        }
    },
    "2020-08-30T12:55:32-07:00": {
        "1d2d7264ec7c448744b771910cc972da03b1cb80": {
            "datetime": "2020-08-31T14:20:05-07:00",
            "summary": "Fix incorrect space before colon in if/while stmts (#1655)",
            "message": "Fix incorrect space before colon in if/while stmts (#1655)\n\n* Fix incorrect space before colon in if/while stmts\r\n\r\nPreviously Black would format this code\r\n\r\n```\r\nif (foo := True):\r\n\tprint(foo)\r\n```\r\n\r\nas\r\n\r\n```\r\nif (foo := True) :\r\n\tprint(foo)\r\n```\r\n\r\nadding an incorrect space after the RPAR. Buggy code in the\r\nnormalize_invisible_parens function caused the colon to be wrapped in\r\ninvisible parentheses. The LPAR of that pair was then prefixed with a\r\nsingle space at the request of the whitespace function.\r\n\r\nThis commit fixes the accidental skipping of a pre-condition check\r\nwhich must return True before parenthesis normalization of a specific\r\nchild Leaf or Node can happen. The pre-condition check being skipped\r\nwas why the colon was wrapped in invisible parentheses.\r\n\r\n* Add an entry in CHANGES.md",
            "diff": {
                "src/black/__init__.py": 4,
                "tests/data/pep_572.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "6b5753a41781ef7a8746aeea52c26e07f4b43c27": {
            "datetime": "2020-09-05T12:15:28-07:00",
            "summary": "Handle .COLOR_DIFF in the same way as .DIFF (#1673)",
            "message": "Handle .COLOR_DIFF in the same way as .DIFF (#1673)\n\n",
            "diff": {
                "src/black/__init__.py": 6,
                "tests/test_black.py": 53
            },
            "is_test": true,
            "is_fix": false
        },
        "e3ccabb23c5dc5495bd8f96b5c90c1db6a350d6d": {
            "datetime": "2020-09-05T17:24:00-07:00",
            "summary": "Fix unstable formatting on string split + % formatting (#1680)",
            "message": "Fix unstable formatting on string split + % formatting (#1680)\n\nFixes #1595",
            "diff": {
                "src/black/__init__.py": 2,
                "src/blib2to3/pgen2/pgen.py": 3,
                "tests/data/long_strings.py": 6,
                "tests/data/long_strings__regression.py": 21
            },
            "is_test": false,
            "is_fix": false
        },
        "7bca930ca3d84bbd01e98937b6b8a493d0254c7c": {
            "datetime": "2020-09-06T08:02:57-07:00",
            "summary": "Fix crash on concatenated string + comment (fixes #1596) (#1677)",
            "message": "Fix crash on concatenated string + comment (fixes #1596) (#1677)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 28,
                "tests/data/long_strings__regression.py": 27
            },
            "is_test": false,
            "is_fix": false
        },
        "6284953d07060804dcdeacf4626b76aed7a20683": {
            "datetime": "2020-09-06T09:15:40-07:00",
            "summary": "Fix crash on assert and parenthesized % format (fixes #1597, fixes #1605) (#1681)",
            "message": "Fix crash on assert and parenthesized % format (fixes #1597, fixes #1605) (#1681)\n\n",
            "diff": {
                "src/black/__init__.py": 27,
                "tests/data/long_strings__regression.py": 42
            },
            "is_test": false,
            "is_fix": false
        },
        "cd055efd7d999421984e8b63afe53b5f9854deb9": {
            "datetime": "2020-09-10T09:24:01-07:00",
            "summary": "Fix unstable subscript assignment string wrapping (#1678)",
            "message": "Fix unstable subscript assignment string wrapping (#1678)\n\nFixes #1598",
            "diff": {
                "src/black/__init__.py": 7,
                "tests/data/long_strings__regression.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "c0a8e4224360a6917dcb5d889b08d5fdcfaf7c2d": {
            "datetime": "2020-09-10T13:21:37-07:00",
            "summary": "Fix empty line handling when formatting typing stubs (#1646)",
            "message": "Fix empty line handling when formatting typing stubs (#1646)\n\nBlack used to erroneously remove all empty lines between non-function\r\ncode and decorators when formatting typing stubs. Now a single empty\r\nline is enforced.\r\n\r\nI chose for putting empty lines around decorated classes that have empty\r\nbodies since removing empty lines around such classes would cause a\r\nformatting issue that seems to be impossible to fix.\r\n\r\nFor example:\r\n\r\n```\r\nclass A: ...\r\n@some_decorator\r\nclass B: ...\r\nclass C: ...\r\nclass D: ...\r\n\r\n@some_other_decorator\r\ndef foo(): -> None: ...\r\n```\r\n\r\nIt is easy to enforce no empty lines between class A, B, and C.\r\nJust return 0, 0 for a line that is a decorator and precedes an stub\r\nclass. Fortunately before this commit, empty lines after that class\r\nwould be removed already.\r\n\r\nNow let's look at the empty line between class D and function foo. In\r\nthis case, there should be an empty line there since it's class code next\r\nto function code. The problem is that when deciding to add X empty lines\r\nbefore a decorator, you can't tell whether it's before a class or a\r\nfunction. If the decorator is before a function, then an empty line\r\nis needed, while no empty lines are needed when the decorator is\r\nbefore a class.\r\n\r\nSo even though I personally prefer no empty lines around decorated\r\nclasses, I had to go the other way surrounding decorated classes with\r\nempty lines.\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 11,
                "tests/data/force_pyi.py": 67,
                "tests/test_black.py": 7
            },
            "is_test": true,
            "is_fix": true
        },
        "811decd7f10fb2fb3ae343b9d9d0a3ae53b86a53": {
            "datetime": "2020-09-13T08:59:18-07:00",
            "summary": "Fix typo in docstring (#1700)",
            "message": "Fix typo in docstring (#1700)\n\nAdded a missing preposition",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "6dddbd72414061cde9dd8ee72eac373b7fcf8b54": {
            "datetime": "2020-09-19T20:33:10+02:00",
            "summary": "PEP 614 support (#1717)",
            "message": "PEP 614 support (#1717)\n\n",
            "diff": {
                "src/black/__init__.py": 70,
                "tests/data/decorators.py": 176,
                "tests/data/python39.py": 37,
                "tests/test_black.py": 61
            },
            "is_test": true,
            "is_fix": false
        },
        "bc138d12630ec38cb1b11b2fb2ca8762ac2ae7a4": {
            "datetime": "2020-09-27T07:54:21+02:00",
            "summary": "End 'force-exclude' help message with a period (#1727)",
            "message": "End 'force-exclude' help message with a period (#1727)\n\nIt would be nice, if like other options help message, force-exclude's\r\nhelp message also ends with a period punctuation mark.",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4d71d74a442ccc6c309a0667147997c1eeb755fd": {
            "datetime": "2020-09-27T22:41:11+01:00",
            "summary": "Repair colorama wrapping on non-Windows platforms (#1670)",
            "message": "Repair colorama wrapping on non-Windows platforms (#1670)\n\n* Repair colorama wrapping on non-Windows platforms\r\n\r\nThe wrap_stream_for_windows() function calls\r\ncolorama.initialise.wrap_stream() function to apply colorama's magic to\r\nwrapper to the output stream. Except this wrapper is only applied on\r\nWindows platforms that need it, otherwise the original stream is\r\nreturned as-is.\r\n\r\nThe colorama wrapped stream lacks a detach() method, so a no-op lambda\r\nwas being assigned to the wrapped stream.\r\n\r\nThe problem is that the no-op lambda was being assigned unconditionally\r\nwhether or not colorama actually returns a wrapped stream, thus\r\nreplacing the original TextIOWrapper's detach() method. Replacing the\r\ndetach() method with a no-op lambda is the root cause of the problem\r\nobserved in #1664.\r\n\r\nThe solution is to only assign the no-op detach() method if the stream\r\nlacks its own detach() method.\r\n\r\nRepairs #1664\r\n",
            "diff": {
                "src/black/__init__.py": 30
            },
            "is_test": false,
            "is_fix": false
        },
        "172c0a78facd8f938629f216c95507bbfeddfe5e": {
            "datetime": "2020-09-28T12:55:35-07:00",
            "summary": "Fix unnecessary if checks (#1728)",
            "message": "Fix unnecessary if checks (#1728)\n\n",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "dd2f86ac0a043815821d228b9db036a295be5372": {
            "datetime": "2020-10-08T14:13:13-07:00",
            "summary": "Support stable Python3.9. (#1748)",
            "message": "Support stable Python3.9. (#1748)\n\n* Support stable Python3.9.\r\n\r\n* Get back to 3.9-dev\r\n\r\n* Add py39 to black usage.\r\n\r\n* remove 3.9 temporarily.",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "f311d82569b9595d85c08cc8fcf5250de525e7a0": {
            "datetime": "2020-10-13T07:03:00+02:00",
            "summary": "Add blackd to nicely exit if missing aiohttp deps (#1761)",
            "message": "Add blackd to nicely exit if missing aiohttp deps (#1761)\n\n- If no aiohttp* deps exist nicely print a helpful message and exit\r\n- There seems to be no nice way to optionally install the entry point, so lets make the entry point nicer\r\n\r\nTest:\r\n```\r\ncooper-mbp1:black cooper$ /tmp/tb/bin/pip install .\r\ncooper-mbp1:black cooper$ /tmp/tb/bin/blackd\r\naiohttp dependency is not installed: No module named 'aiohttp'. Please re-install black with the '[d]' extra install  to obtain aiohttp_cors: `pip install black[d]`\r\ncooper-mbp1:black cooper$ /tmp/tb/bin/pip install .[d]\r\n...\r\nSuccessfully installed aiohttp-3.6.3 aiohttp-cors-0.7.0 black\r\ncooper-mbp1:black cooper$ /tmp/tb/bin/blackd\r\nblackd version 20.8b2.dev31+gdd2f86a.d20201013 listening on localhost port 45484\r\n```\r\n\r\nFixes #1688",
            "diff": {
                "src/blackd/__init__.py": 17
            },
            "is_test": false,
            "is_fix": false
        },
        "407052724fa1c97ee8bcd4e96de650def00be03e": {
            "datetime": "2020-10-19T10:35:26-07:00",
            "summary": "Switch to pytest and tox (#1763)",
            "message": "Switch to pytest and tox (#1763)\n\n* Add venv to .gitignore\r\n\r\n* Use tox to run tests\r\n\r\n* Make fuzz run in tox\r\n\r\n* Split tests files\r\n\r\n* Fix import error",
            "diff": {
                "tests/test_black.py": 230,
                "tests/test_blackd.py": 192,
                "tests/util.py": 43
            },
            "is_test": true,
            "is_fix": false
        },
        "e6cd10e7615f4df537e2eaefcf3904a4feecad1f": {
            "datetime": "2020-10-30T08:12:04-07:00",
            "summary": "Extract formatting tests (#1785)",
            "message": "Extract formatting tests (#1785)\n\n* Update test versions\r\n\r\n* Use parametrize to remove tests duplications\r\n\r\n* Extract sources format tests\r\n\r\n* Fix mypy errors\r\n\r\n* Fix .travis.yml",
            "diff": {
                "tests/test_black.py": 416,
                "tests/test_format.py": 98,
                "tests/util.py": 48
            },
            "is_test": true,
            "is_fix": false
        },
        "6c3f8181854160f3db354f6f6ef3315ef05db8e7": {
            "datetime": "2020-10-31T10:42:36-07:00",
            "summary": "Fix bug where black tries to split string on escaped space (#1799)",
            "message": "Fix bug where black tries to split string on escaped space (#1799)\n\nCloses #1505.",
            "diff": {
                "src/black/__init__.py": 17,
                "tests/data/long_strings__regression.py": 37
            },
            "is_test": false,
            "is_fix": false
        },
        "edf1c9dc0f20239b9d5351d8b0607c9e936dd43f": {
            "datetime": "2020-11-06T16:17:23-08:00",
            "summary": "Fix bug which causes f-expressions to be split (#1809)",
            "message": "Fix bug which causes f-expressions to be split (#1809)\n\nCloses #1807.",
            "diff": {
                "src/black/__init__.py": 5,
                "tests/data/long_strings__regression.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "1d8b4d766d912c7b9e91fa885419730c334345ef": {
            "datetime": "2020-11-09T11:58:23-08:00",
            "summary": "Correctly handle inline tabs in docstrings (#1810)",
            "message": "Correctly handle inline tabs in docstrings (#1810)\n\nThe `fix_docstring` function expanded all tabs, which caused a\r\ndifference in the AST representation when those tabs were inline and not\r\nleading. This changes the function to only expand leading tabs so inline\r\ntabs are preserved.\r\n\r\nFixes #1601.",
            "diff": {
                "src/black/__init__.py": 26,
                "tests/data/docstring.py": 51
            },
            "is_test": false,
            "is_fix": false
        },
        "7d032fa848c8910007a0a41c1ba61d70d2846f48": {
            "datetime": "2020-11-13T07:25:17-08:00",
            "summary": "Use lowercase hex numbers fixes #1692 (#1775)",
            "message": "Use lowercase hex numbers fixes #1692 (#1775)\n\n* Made hex lower case\r\n\r\n* Refactored numeric formatting section\r\n\r\n* Redid some refactoring and removed bloat\r\n\r\n* Removed additions from test_requirements.txt\r\n\r\n* Primer now expects expected changes\r\n\r\n* Undid some refactoring\r\n\r\n* added to changelog\r\n\r\n* Update src/black/__init__.py\r\n\r\nCo-authored-by: Zsolt Dollenstein <zsol.zsol@gmail.com>\r\n\r\nCo-authored-by: Zsolt Dollenstein <zsol.zsol@gmail.com>\r\nCo-authored-by: Cooper Lees <me@cooperlees.com>",
            "diff": {
                "src/black/__init__.py": 57,
                "src/blib2to3/pytree.py": 2,
                "tests/data/numeric_literals.py": 4,
                "tests/data/numeric_literals_py2.py": 4,
                "tests/data/numeric_literals_skip_underscores.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "dea81b7ad5cfa04c3572771c34af823449d0a8f3": {
            "datetime": "2020-11-13T07:26:07-08:00",
            "summary": "Provide a stdin-filename to allow stdin to respect force-exclude rules (#1780)",
            "message": "Provide a stdin-filename to allow stdin to respect force-exclude rules (#1780)\n\n* Provide a stdin-filename to allow stdin to respect exclude/force-exclude rules\r\n\r\nThis will allow automatic tools to enforce the project's\r\nexclude/force-exclude rules even if they pass the file through stdin to\r\nupdate its buffer.\r\n\r\nThis is a similar solution to --stdin-display-name in flake8.\r\n\r\n* Update src/black/__init__.py\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\n\r\n* --stdin-filename should only respect --exclude-filename\r\n\r\n* Update README with the new --stdin-filename option\r\n\r\n* Write some tests for the new stdin-filename functionality\r\n\r\n* Apply suggestions from code review\r\n\r\nCo-authored-by: Hugo van Kemenade <hugovk@users.noreply.github.com>\r\n\r\n* Force stdin output when we asked for stdin even if the file exists\r\n\r\n* Add an entry in the changelog regarding --stdin-filename\r\n\r\n* Reduce disk reads if possible\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\n\r\n* Check for is_stdin and p.is_file before checking for p.is_dir()\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\nCo-authored-by: Hugo van Kemenade <hugovk@users.noreply.github.com>",
            "diff": {
                "src/black/__init__.py": 71,
                "tests/test_black.py": 159
            },
            "is_test": true,
            "is_fix": false
        },
        "4d03716eaea58ee38d77cf2bba0a72b7a27ec9fa": {
            "datetime": "2020-11-24T09:39:25+00:00",
            "summary": "Allow same RHS expressions in annotated assignments as in regular assignments (#1835)",
            "message": "Allow same RHS expressions in annotated assignments as in regular assignments (#1835)\n\n",
            "diff": {
                "tests/data/python38.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "c3df2c1a69c687d34f41478235c869d0526a46bd": {
            "datetime": "2020-12-27T07:18:35-08:00",
            "summary": "fix format_str() docstring to prevent users from running into NameError (#1885)",
            "message": "fix format_str() docstring to prevent users from running into NameError (#1885)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "a497570fcb364b40e0d952d3133e8d4f2d329fea": {
            "datetime": "2020-12-27T18:38:11-08:00",
            "summary": "Bump mypy to 0.780 in pre-commit config (#1887)",
            "message": "Bump mypy to 0.780 in pre-commit config (#1887)\n\nTo avoid hitting a mypy bug causes pre-commit to always fail on CPython\r\n3.9. Even though it's still an outdated version, the bug effectively\r\nblocks development on CPython 3.9 so that's why this commit exists\r\ninstead of waiting for cooperlees to finish his bump to 0.790 PR.\r\n\r\nAlso this fixes primer to ensure it always raises CalledProcessError\r\nwith an int error code. I stole the patch from cooperlees's mypy bump\r\nPR.\r\n\r\nIt's funny how mypy 0.790 is already asked for in our\r\nPipfile.lock file, but oh well mypy is probably more commonly run\r\nthrough pre-commit than standalone I guess.\r\n\r\nOh and if you're curious why the bug doesn't up on CPython 3.8 or lower:\r\nthere was some subscription AST changes in CPython 3.9.",
            "diff": {
                "src/black_primer/lib.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "e912c7ff54c392e92a765c5eff0bd2ca3bb05b47": {
            "datetime": "2020-12-28T12:30:23-08:00",
            "summary": "Fix INTERNAL ERROR caused by removing parens from pointless string (#1888)",
            "message": "Fix INTERNAL ERROR caused by removing parens from pointless string (#1888)\n\nFixes #1846.",
            "diff": {
                "src/black/__init__.py": 11,
                "tests/data/long_strings__regression.py": 42
            },
            "is_test": false,
            "is_fix": false
        },
        "60de5bbc32b6ff283d386d00ab7d07fe1564931d": {
            "datetime": "2020-12-31T09:07:31-08:00",
            "summary": "Bump typed-ast to fix for s390x (#1892)",
            "message": "Bump typed-ast to fix for s390x (#1892)\n\n* Bump typed-ast to fix for s390x\r\n\r\n* pipenv install typed-ast==1.4.2",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "966baaacbc24a4affa88ea5bb0b5a44b0f52fe2f": {
            "datetime": "2021-01-03T08:14:59-08:00",
            "summary": "Only require typing-extensions if Python < 3.8 (#1873)",
            "message": "Only require typing-extensions if Python < 3.8 (#1873)\n\n",
            "diff": {
                "setup.py": 2,
                "src/black/__init__.py": 6,
                "src/blib2to3/pgen2/token.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "a81702ce027ef6792955d5db02aad60a34c7ec44": {
            "datetime": "2021-01-08T12:26:42-08:00",
            "summary": "Changed max workers on windows to 60 (#1912)",
            "message": "Changed max workers on windows to 60 (#1912)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "e8aadedd970140a840e8120bd36e8df52cc26ed2": {
            "datetime": "2021-01-15T14:43:23-08:00",
            "summary": "Fix typo (#1931)",
            "message": "Fix typo (#1931)\n\n",
            "diff": {
                "src/black_primer/lib.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "de510478d9b12490eddf93a785494f726897363b": {
            "datetime": "2021-01-15T16:05:15-08:00",
            "summary": "OSS-Fuzz integration (#1930)",
            "message": "OSS-Fuzz integration (#1930)\n\n",
            "diff": {
                "fuzz.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "692c0f50d91e3163bb87401e4a0e070b2eb5b163": {
            "datetime": "2021-01-17T16:59:06-08:00",
            "summary": "Add --skip-magic-trailing-comma (#1824)",
            "message": "Add --skip-magic-trailing-comma (#1824)\n\n",
            "diff": {
                "src/black/__init__.py": 89,
                "src/blackd/__init__.py": 6,
                "tests/test_black.py": 25
            },
            "is_test": true,
            "is_fix": false
        },
        "988c686d312986760a42cc7edd9a79a8f31c4769": {
            "datetime": "2021-02-01T09:54:19-08:00",
            "summary": "Remove placeholder exit code in unreachable 'black-primer' subprocess handler (#1952)",
            "message": "Remove placeholder exit code in unreachable 'black-primer' subprocess handler (#1952)\n\n",
            "diff": {
                "src/black_primer/lib.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "3fca540d05a0f0b4480cfcce84d7e0392270b841": {
            "datetime": "2021-02-04T13:03:42-08:00",
            "summary": "speed up cache by approximately 42x by avoiding pathlib (#1953)",
            "message": "speed up cache by approximately 42x by avoiding pathlib (#1953)\n\n",
            "diff": {
                "src/black/__init__.py": 14,
                "tests/test_black.py": 39
            },
            "is_test": true,
            "is_fix": false
        },
        "b8c1020b526b488a1a216d9a4d58fc8616b61a99": {
            "datetime": "2021-02-11T12:11:42-08:00",
            "summary": "Stability fixup: interaction between newlines and comments (#1975)",
            "message": "Stability fixup: interaction between newlines and comments (#1975)\n\n* Add test case to illustrate the issue\r\n\r\n* Accept carriage returns as valid separators while enumerating comments\r\n\r\nWithout this acceptance, escaped multi-line statments that use carriage returns will not be counted into the 'ignored_lines' variable since the emitted line values will end with a CR and not an escape character.  That leads to comments associated with the line being incorrectly labeled with the STANDALONE_COMMENT type, affecting comment placement and line space management.\r\n\r\n* Remove comment linking to ephemeral build log",
            "diff": {
                "src/black/__init__.py": 2,
                "tests/test_black.py": 5
            },
            "is_test": true,
            "is_fix": false
        },
        "6a105e019fcaa10cc0b6fb59edea4a4018eac97e": {
            "datetime": "2021-02-15T08:02:48-08:00",
            "summary": "Add \"# fmt: skip\" directive to black (#1800)",
            "message": "Add \"# fmt: skip\" directive to black (#1800)\n\nFixes #1162",
            "diff": {
                "src/black/__init__.py": 104,
                "tests/data/fmtskip.py": 3,
                "tests/data/fmtskip2.py": 17,
                "tests/data/fmtskip3.py": 20,
                "tests/data/fmtskip4.py": 13,
                "tests/data/fmtskip5.py": 22,
                "tests/test_format.py": 5
            },
            "is_test": true,
            "is_fix": false
        },
        "306a513137ec93a5053d415319e24bd4057d4045": {
            "datetime": "2021-02-20T08:44:48-08:00",
            "summary": "fuzzer: add special-case for multi-line EOF TokenError (#1991)",
            "message": "fuzzer: add special-case for multi-line EOF TokenError (#1991)\n\n* Add special-case for multi-line EOF TokenError under Python3.7\r\n\r\n* Update conditional check to correspond to original issue description (and include issue hyperlink)\r\n\r\n* Add warning and hint regarding replaying the fuzzer code generation\r\n\r\n* Include code review suggestion (with modifications for this to follow)\r\n\r\nCo-authored-by: Zac Hatfield-Dodds <zac.hatfield.dodds@gmail.com>\r\n\r\n* Remove Python version check, since this issue does exist across more recent Python versions than 3.7\r\n\r\n* Update explanatory comment\r\n\r\n* Add clarification for potentially-ambiguous blib2to3 import\r\n\r\n* Update explanatory comment\r\n\r\n* Bring comment into consistent format with previous comment\r\n\r\n* Revert \"Add clarification for potentially-ambiguous blib2to3 import\"\r\n\r\nThis reverts commit 357b7cc03bdb19dd924f1accd428352f4bb44e5c.\r\n\r\nCo-authored-by: Zac Hatfield-Dodds <zac.hatfield.dodds@gmail.com>",
            "diff": {
                "fuzz.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "0cbe19c813559d6642e71832242264ab8d5a5d59": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Minimize changes: more closely resemble original conditional logic",
            "message": "Minimize changes: more closely resemble original conditional logic\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "22127c633eba10d41519fb562c1252f859e2d7fa": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Readability: reduce boolean nesting",
            "message": "Readability: reduce boolean nesting\n",
            "diff": {
                "src/black/__init__.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "24700806f681f2809a2b85999871e291c36dd948": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Cleanup: remove unused / redundant variables from conditionals",
            "message": "Cleanup: remove unused / redundant variables from conditionals\n",
            "diff": {
                "src/black/__init__.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "e0d766727dc87f5c5f39ef751d0bf23fc5ff31a0": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Simplification: only yield empty omit list when magic trailing comma is present",
            "message": "Simplification: only yield empty omit list when magic trailing comma is present\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "829331a8777aa758c6fc2a5032d38d8fbb5b5ac6": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Simplification: only use special-case token retrieval logic when magic trailing comma is present",
            "message": "Simplification: only use special-case token retrieval logic when magic trailing comma is present\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "89c42a0011721e164738c17a192452ee77d9cc99": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Clarity: special case: avoid using variables that have the same names as methods",
            "message": "Clarity: special case: avoid using variables that have the same names as methods\n",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "51141f1af4aab0e0c7f71932ffe06482a884f1d5": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Consistency: use variable names that correspond to the methods they invoke",
            "message": "Consistency: use variable names that correspond to the methods they invoke\n",
            "diff": {
                "src/black/__init__.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "a23f521fee1b283b10000d94267ef93069b7f7ec": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Brevity: only use the variables required to convey the intended expressions",
            "message": "Brevity: only use the variables required to convey the intended expressions\n",
            "diff": {
                "src/black/__init__.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "caa3fcc2de3cfb6162bee0bb6f68b10bc38e612f": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Clarity: isolate and extract each responsibility from an overloaded variable",
            "message": "Clarity: isolate and extract each responsibility from an overloaded variable\n",
            "diff": {
                "src/black/__init__.py": 19
            },
            "is_test": false,
            "is_fix": false
        },
        "afc8c326bf97ce7a22e8fc0b8cc5ced1586ef022": {
            "datetime": "2021-02-20T19:36:21+01:00",
            "summary": "Brevity: rename method",
            "message": "Brevity: rename method\n",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "cd4295dd9888f491cfd9aae060d7832b7f831b24": {
            "datetime": "2021-02-21T22:43:23-08:00",
            "summary": "Indicate that a final newline was added in --diff (#1897) (#1897)",
            "message": "Indicate that a final newline was added in --diff (#1897) (#1897)\n\nFixes: #1662\r\n\r\nWork-around for https://bugs.python.org/issue2142\r\n\r\nThe test has to slightly mess with its input data, because the utility\r\nfunctions default to ensuring the test data has a final newline, which\r\ndefeats the point of the test.\r\n\r\nSigned-off-by: Paul \"TBBle\" Hampson <Paul.Hampson@Pobox.com>",
            "diff": {
                "src/black/__init__.py": 23,
                "tests/data/missing_final_newline.py": 3,
                "tests/test_black.py": 23
            },
            "is_test": true,
            "is_fix": false
        },
        "24e8dad575f2ae373e64b583f6ad103cf9193781": {
            "datetime": "2021-02-22T07:42:05-08:00",
            "summary": "Fix for enum changes in 3.10 (#1999)",
            "message": "Fix for enum changes in 3.10 (#1999)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "fe4a9d6bee21c471139e07fa27b464187477556c": {
            "datetime": "2021-02-22T07:46:38-08:00",
            "summary": "Fixup: update function name in docs to match source (#1997)",
            "message": "Fixup: update function name in docs to match source (#1997)\n\n",
            "diff": {
                "src/black/__init__.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "e1c86f987eca7e532f7d69f7ff4b9c70432fabbf": {
            "datetime": "2021-02-22T07:49:38-08:00",
            "summary": "Fuzzer testing: less strict special-case regex match passthrough for multi-line EOF exceptions (#1998)",
            "message": "Fuzzer testing: less strict special-case regex match passthrough for multi-line EOF exceptions (#1998)\n\n",
            "diff": {
                "fuzz.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "b06cd15666e5d766347cda0434dc6c828a96c74a": {
            "datetime": "2021-02-24T03:56:56-08:00",
            "summary": "Wrap arithmetic and binary arithmetic expressions in invisible parentheses (#2001)",
            "message": "Wrap arithmetic and binary arithmetic expressions in invisible parentheses (#2001)\n\n",
            "diff": {
                "src/black/__init__.py": 13,
                "tests/data/expression.py": 24
            },
            "is_test": false,
            "is_fix": false
        }
    },
    "2021-02-26T12:55:32-07:00": {
        "858225d34dc49ca353f9e573dd82dd5845766115": {
            "datetime": "2021-02-27T17:20:23-08:00",
            "summary": "Strip redundant parentheses from assignment exprs (#1906)",
            "message": "Strip redundant parentheses from assignment exprs (#1906)\n\nFixes #1656\r\n",
            "diff": {
                "src/black/__init__.py": 10,
                "tests/data/pep_572.py": 4,
                "tests/data/pep_572_remove_parens.py": 38,
                "tests/data/remove_parens.py": 2,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "beecd6fd0a9103aa91b1019dcf8fc774b667ea6c": {
            "datetime": "2021-03-01T14:07:36-08:00",
            "summary": "Add --extend-exclude parameter (#2005)",
            "message": "Add --extend-exclude parameter (#2005)\n\nLook ma! I contribute to open source!\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/__init__.py": 78,
                "tests/test_black.py": 86
            },
            "is_test": true,
            "is_fix": false
        },
        "e3c71c3a477a44e6d817d37825a59bc6ba6a9897": {
            "datetime": "2021-03-02T17:21:50-08:00",
            "summary": "Turn test_regex into a click callback (#2016)",
            "message": "Turn test_regex into a click callback (#2016)\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/__init__.py": 61,
                "tests/test_black.py": 28
            },
            "is_test": true,
            "is_fix": false
        },
        "24418a54501381e1cdbe0ab1de4e4ced7537c124": {
            "datetime": "2021-03-04T05:59:31-08:00",
            "summary": "Black requires Python 3.6.2+ (#1668)",
            "message": "Black requires Python 3.6.2+ (#1668)\n\n",
            "diff": {
                "setup.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "b3ceb293d9e69295a190fed93517cbe1b7372154": {
            "datetime": "2021-03-05T11:58:00-08:00",
            "summary": "Remove unused import statements using Pycln. (#2021)",
            "message": "Remove unused import statements using Pycln. (#2021)\n\n* remove unused imports using Pycln.\r\n\r\n* reverse comma style.",
            "diff": {
                "src/blib2to3/pgen2/driver.py": 3,
                "src/blib2to3/pgen2/parse.py": 2,
                "src/blib2to3/pgen2/pgen.py": 1,
                "src/blib2to3/pytree.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "ed9d58b7410f24446cedebd0f767b71b154f5f5b": {
            "datetime": "2021-04-01T17:38:04+02:00",
            "summary": "don't require typed-ast",
            "message": "don't require typed-ast\n",
            "diff": {
                "setup.py": 3,
                "src/black/__init__.py": 22
            },
            "is_test": false,
            "is_fix": false
        },
        "9451c57d1c60d70ddd55e21b44382ca96637398e": {
            "datetime": "2021-04-01T18:39:18+02:00",
            "summary": "Support for top-level user configuration (#1899)",
            "message": "Support for top-level user configuration (#1899)\n\n* Added support for top-level user configuration\r\n\r\nAt the user level, a TOML config can be specified in the following locations:\r\n* Windows: ~\\.black\r\n* Unix-like: $XDG_CONFIG_HOME/black (~/.config/black fallback)\r\n\r\nInstead of changing env vars for the entire black-primer process, they\r\nare now changed only for the black subprocess, using a tmpdir.",
            "diff": {
                "src/black/__init__.py": 22,
                "src/black_primer/lib.py": 47,
                "tests/test_black.py": 36
            },
            "is_test": true,
            "is_fix": false
        },
        "e114ef5514e95cb9908b38c2397978f2070c1b0e": {
            "datetime": "2021-04-04T07:21:33-07:00",
            "summary": "Get rid of redundant spaces in docs (#2085)",
            "message": "Get rid of redundant spaces in docs (#2085)\n\nThanks!",
            "diff": {
                "src/black/__init__.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "4d36304a2c70a5b6e39cdabf404fe72186fc8202": {
            "datetime": "2021-04-08T10:25:37-07:00",
            "summary": "Fix error from upcoming typeshed change (#2096)",
            "message": "Fix error from upcoming typeshed change (#2096)\n\nSee python/typeshed#5190\r\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "e4003c2c439fc08a407d3024a195c010f03c4173": {
            "datetime": "2021-04-10T05:07:34-07:00",
            "summary": "Exclude venv directory by default (#1683)",
            "message": "Exclude venv directory by default (#1683)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "2116eca51f1108ebc924185c87bc363d8e0329b3": {
            "datetime": "2021-04-11T07:49:42-07:00",
            "summary": "fix typing issue around lru_cache arguments (#2098)",
            "message": "fix typing issue around lru_cache arguments (#2098)\n\nThis was found by python/mypy#10308",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "d960d5d238bc8c73010a3ca5a9f316678ad91e6f": {
            "datetime": "2021-04-11T14:41:22-07:00",
            "summary": "Remove NBSP at the beginning of comments (#2092)",
            "message": "Remove NBSP at the beginning of comments (#2092)\n\nCloses #2091",
            "diff": {
                "src/black/__init__.py": 7,
                "tests/data/comments7.py": 5,
                "tests/data/comments_non_breaking_space.py": 44,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "9eb29a6d4733c0e467ba5c1c54361f097cc1c305": {
            "datetime": "2021-04-16T10:41:19-07:00",
            "summary": "Fix small comment typo (#2112)",
            "message": "Fix small comment typo (#2112)\n\nWe probably don't need to fall back on \"polling\" when setting up an asyncio loop",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "1fc3215e8c8856094b20d497e4e0e3e547ed38eb": {
            "datetime": "2021-04-22T08:23:41-07:00",
            "summary": "Make black remove leading and trailing spaces from one-line docstrings (#1740)",
            "message": "Make black remove leading and trailing spaces from one-line docstrings (#1740)\n\nFixes #1738. Fixes #1812.\r\n\r\nPreviously, Black removed leading and trailing spaces in multiline docstrings but failed to remove them from one-line docstrings.\r\n\r\n",
            "diff": {
                "src/black/__init__.py": 40,
                "tests/data/docstring.py": 36
            },
            "is_test": false,
            "is_fix": false
        },
        "5316bbff0e9db989db98b14761ce2c299a05895b": {
            "datetime": "2021-04-22T08:40:51-07:00",
            "summary": "Handle Docstrings as bytes + strip all whitespace (#2037)",
            "message": "Handle Docstrings as bytes + strip all whitespace (#2037)\n\n(fixes #1844, fixes #1923, fixes #1851, fixes #2002, fixes #2103)",
            "diff": {
                "src/black/__init__.py": 14,
                "tests/test_black.py": 20
            },
            "is_test": true,
            "is_fix": false
        },
        "368f043f138112f63ff521c3481993c589eb7508": {
            "datetime": "2021-04-22T10:37:27-07:00",
            "summary": "Document experimental string processing and docstring indentation (#2106)",
            "message": "Document experimental string processing and docstring indentation (#2106)\n\n",
            "diff": {
                "tests/data/docstring.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "773e4a22d58be1f1aa82df7ad9a0f4c4e1328c10": {
            "datetime": "2021-04-25T19:13:23+02:00",
            "summary": "Revert \"Use lowercase hex numbers fixes #1692 (#1775)\"",
            "message": "Revert \"Use lowercase hex numbers fixes #1692 (#1775)\"\n\nThis reverts commit 7d032fa848c8910007a0a41c1ba61d70d2846f48.\n",
            "diff": {
                "src/black/__init__.py": 9,
                "src/blib2to3/pytree.py": 2,
                "tests/data/numeric_literals.py": 4,
                "tests/data/numeric_literals_py2.py": 4,
                "tests/data/numeric_literals_skip_underscores.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "8672af35f052a636545e38110f0419ea92aeca0f": {
            "datetime": "2021-04-25T20:15:54+02:00",
            "summary": "Work around stability errors due to optional trailing commas (#2126)",
            "message": "Work around stability errors due to optional trailing commas (#2126)\n\nOptional trailing commas put by Black become magic trailing commas on another\r\npass of the tool.  Since they are influencing formatting around optional\r\nparentheses, on rare occasions the tool changes its mind in terms of putting\r\nparentheses or not.\r\n\r\nIdeally this would never be the case but sadly the decision to put optional\r\nparentheses or not (which looks at pre-existing \"magic\" trailing commas) is\r\nhappening around the same time as the decision to put an optional trailing\r\ncomma.  Untangling the two proved to be impractically difficult.\r\n\r\nThis shameful workaround uses the fact that the formatting instability\r\nintroduced by magic trailing commas is deterministic: if the optional trailing\r\ncomma becoming a pre-existing \"magic\" trailing comma changes formatting, the\r\nsecond pass becomes stable since there is no variable factor anymore on pass 3,\r\n4, and so on.\r\n\r\nFor most files, this will introduce no performance penalty since `--safe` is\r\nalready re-formatting everything twice to ensure formatting stability.  We're\r\nusing this result and if all's good, the behavior is equivalent.  If there is\r\na difference, we treat the second result as the binding one, and check its\r\nsanity again.",
            "diff": {
                "src/black/__init__.py": 24,
                "tests/test_black.py": 18
            },
            "is_test": true,
            "is_fix": false
        },
        "0a833b4b14953f98e81d632281a75318faa66170": {
            "datetime": "2021-04-26T07:46:48+02:00",
            "summary": "fix magic comma and experimental string cache flags (#2131)",
            "message": "fix magic comma and experimental string cache flags (#2131)\n\n* fix magic comma and experimental string cache flags\r\n\r\n* more changelog\r\n\r\n* Update CHANGES.md\r\n\r\nCo-authored-by: Cooper Lees <me@cooperlees.com>\r\n\r\n* fix tests\r\n\r\nCo-authored-by: Cooper Lees <me@cooperlees.com>",
            "diff": {
                "src/black/__init__.py": 4,
                "tests/test_black.py": 7,
                "tests/test_format.py": 37,
                "tests/util.py": 2
            },
            "is_test": true,
            "is_fix": true
        },
        "db30456916ca733d011a2774e66beb3dd7064e14": {
            "datetime": "2021-04-26T08:28:42-07:00",
            "summary": "Don't strip parens in assert / return with assign expr (#2143)",
            "message": "Don't strip parens in assert / return with assign expr (#2143)\n\nBlack would previously strip the parenthesis away from statements like this these ones:\r\n\r\n    assert (spam := 12 + 1)\r\n    return (cheese := 1 - 12)\r\n\r\nWhich happens to be invalid code. Now before making the parenthesis invisible, Black\r\nchecks if the assignment expression's parent is an assert stamtment, aborting if True.\r\n\r\nRaise, yield, and await are already handled fine.\r\n\r\nI added a bunch of test cases from the PEP defining asssignment expressions (PEP 572).",
            "diff": {
                "src/black/__init__.py": 7,
                "tests/data/pep_572_remove_parens.py": 52
            },
            "is_test": false,
            "is_fix": false
        },
        "97c24664c5bc251f7b67756b8b184962ca44b6d9": {
            "datetime": "2021-04-26T10:26:03-07:00",
            "summary": "Symlink docs/change_log.md to CHANGES.md, don't copy (#2146)",
            "message": "Symlink docs/change_log.md to CHANGES.md, don't copy (#2146)\n\nSuper duper janky stopgap fix until I get my documentation reorganization\r\nwork done and merged",
            "diff": {
                "docs/conf.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "557b54aa60e9abbb93e5737512d9963e640f2d1f": {
            "datetime": "2021-04-26T19:42:16+02:00",
            "summary": "Fix crash on docstrings ending with \"\\ \" (#2142)",
            "message": "Fix crash on docstrings ending with \"\\ \" (#2142)\n\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>",
            "diff": {
                "src/black/__init__.py": 8,
                "tests/data/docstring.py": 31
            },
            "is_test": false,
            "is_fix": false
        },
        "eaa337f176b086a9ebd91884c0b9d9a96772aeb3": {
            "datetime": "2021-04-26T20:24:06+02:00",
            "summary": "Add more tests for fancy whitespace (#2147)",
            "message": "Add more tests for fancy whitespace (#2147)\n\n",
            "diff": {
                "tests/data/docstring.py": 28,
                "tests/data/docstring_no_string_normalization.py": 40
            },
            "is_test": false,
            "is_fix": false
        },
        "a0b4e609a7393fac11ecc94eb859c1e85b540036": {
            "datetime": "2021-04-26T21:22:25+02:00",
            "summary": "Bump pathspec to >= 0.8.1 to solve invalid .gitignore exclusion handling (#2084)",
            "message": "Bump pathspec to >= 0.8.1 to solve invalid .gitignore exclusion handling (#2084)\n\nAlso made the Click requirement in Pipfile consistent with setup.py and bumped mypy.\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "b55ea63ff4858109fe4606a6caafb03fda946743": {
            "datetime": "2021-04-26T22:26:43+02:00",
            "summary": "Stop stripping parens in even more illegal spots (#2148)",
            "message": "Stop stripping parens in even more illegal spots (#2148)\n\nWe're only fixing them so fuzzers don't yell at us when we break \"valid\"\r\ncode. I mean \"valid\" because some of the examples aren't even accepted by\r\nPython.",
            "diff": {
                "src/black/__init__.py": 3,
                "tests/data/pep_572_do_not_remove_parens.py": 21,
                "tests/data/pep_572_remove_parens.py": 15,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "76e1602d60391cca1bb3b21a9ef6ed07a1bca17d": {
            "datetime": "2021-04-27T08:58:39-07:00",
            "summary": "Install primer.json (used by black-primer by default) with black (#2154)",
            "message": "Install primer.json (used by black-primer by default) with black (#2154)\n\nFixes https://github.com/psf/black/issues/2153",
            "diff": {
                "setup.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "ad1696422b7343a0cfea3c4b304e6acfa15d3cff": {
            "datetime": "2021-04-27T14:16:35-07:00",
            "summary": "Ignore inaccessible user config (#2158)",
            "message": "Ignore inaccessible user config (#2158)\n\nFixes #2157",
            "diff": {
                "src/black/__init__.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "89a856d742d31054bc31a6ff7ffc6ad2d24377d5": {
            "datetime": "2021-04-28T07:07:15-07:00",
            "summary": "Remove useless shebangs in non-executable files (#2161)",
            "message": "Remove useless shebangs in non-executable files (#2161)\n\nSuch shebangs are only ever used if the file is executed directly, i.e.:\r\n\r\n    $ /usr/lib/python3.9/site-packages/black_primer/cli.py\r\n\r\nBut that doesn't work:\r\n\r\n    $ /usr/lib/python3.9/site-packages/black_primer/cli.py\r\n    bash: /usr/lib/python3.9/site-packages/black_primer/cli.py: Permission denied\r\n\r\nThe lib file even has: \"lib is a library, funnily enough\"",
            "diff": {
                "src/black_primer/cli.py": 2,
                "src/black_primer/lib.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "35e8d1560d68e8113ff926a9f832582f8f4a694f": {
            "datetime": "2021-05-02T14:48:54+02:00",
            "summary": "Set `is_pyi` if `stdin_filename` ends with `.pyi` (#2169)",
            "message": "Set `is_pyi` if `stdin_filename` ends with `.pyi` (#2169)\n\nFixes #2167\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 2,
                "tests/test_black.py": 32
            },
            "is_test": true,
            "is_fix": false
        },
        "a18c7bc09942951e93cbd142fb7384aa2af18951": {
            "datetime": "2021-05-04T10:44:40+02:00",
            "summary": "primer: Add `--no-diff` option (#2187)",
            "message": "primer: Add `--no-diff` option (#2187)\n\n- Allow runs with no code diff output\r\n- This is handy for reducing output to see which file is erroring\r\n\r\nTest:\r\n- Edit config for 'channels' to expect no changes and run with `--no-diff` and see no diff output",
            "diff": {
                "src/black_primer/cli.py": 15,
                "src/black_primer/lib.py": 25,
                "tests/test_primer.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "e42f9921e291790202147c1e3dc1a3df7036c652": {
            "datetime": "2021-05-04T10:46:46+02:00",
            "summary": "Detect `'@' dotted_name '(' ')' NEWLINE` as a simple decorator (#2182)",
            "message": "Detect `'@' dotted_name '(' ')' NEWLINE` as a simple decorator (#2182)\n\nPreviously the RELAXED_DECORATOR detection would be falsely True on that\r\nexample. The problem was that an argument-less parentheses pair didn't\r\npass the `is_simple_decorator_trailer` check even it should. OTOH a\r\nparentheses pair containing an argument or more passed as expected.",
            "diff": {
                "src/black/__init__.py": 7,
                "tests/data/decorators.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "204f76e0c02a12aeccb3ab708fe41f7e95435a29": {
            "datetime": "2021-05-04T10:47:22+02:00",
            "summary": "add test configurations that don't contain python2 optional install (#2190)",
            "message": "add test configurations that don't contain python2 optional install (#2190)\n\nadd test for negative scenario: formatting python2 code\r\ntag python2 only tests\r\n\r\nCo-authored-by: KotlinIsland <kotlinisland@users.noreply.github.com>",
            "diff": {
                "tests/test_black.py": 30,
                "tests/test_format.py": 16
            },
            "is_test": true,
            "is_fix": false
        },
        "5918a016ff82e5fa12097d07b1624a89ec4e60ac": {
            "datetime": "2021-05-04T10:47:59+02:00",
            "summary": "Drop Travis CI and migrate Coveralls (#2186)",
            "message": "Drop Travis CI and migrate Coveralls (#2186)\n\nTravis CI for Open Source is shutting down in a few weeks so the queue\r\nfor jobs is insane due to lower resources. I'm 99.99% sure we don't need\r\nit as our Test, Lint, Docs, Upload / Package, Primer, and Fuzz workflows\r\nare all on GitHub Actions. So even though we *can* migrate to the .com\r\nversion with its 1000 free Linux minutes(?), I don't think we need to.\r\n\r\nmore information here:\r\n- https://blog.travis-ci.com/oss-announcement\r\n- https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing\r\n- https://docs.travis-ci.com/user/migrate/open-source-repository-migration\r\n\r\nThis commit does the following:\r\n- delete the Travis CI configuration\r\n- add to the GHA test workflows so coverage continues to be recorded\r\n  - tweaked coverage configuration so this wouldn't break\r\n- remove any references to Travis CI in the docs (i.e. readme + sphinx\r\n  docs)\r\n\r\nRegarding the Travis CI to GitHub Actions Coveralls transition, the\r\nofficial action doesn't support the coverage files produced by coverage.py\r\nunfornately. Also no, I don't really know what I am doing so don't @ me\r\nif this breaks :p (well you can, but don't expect me to be THAT useful).\r\n\r\nThe Coveralls setup has two downfalls AFAIK:\r\n- Only Linux runs are used because AndreMiras/coveralls-python-action\r\n  only supports Linux. Although this isn't a big issue since the Travis\r\n  Coveralls configuration only used Linux data too.\r\n- Pull requests from an internal branch (i.e. one on psf/black) will be\r\n  marked as a push coverage build by Coveralls since our anti-duplicate-\r\n  workflows system runs under the push even for such cases.",
            "diff": {
                "docs/conf.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "07c8812937cf75ac5bc7ceac07ef5ea383f10f2f": {
            "datetime": "2021-05-05T08:33:23-07:00",
            "summary": "Enable ` --experimental-string-processing` on most primer projects (#2184)",
            "message": "Enable ` --experimental-string-processing` on most primer projects (#2184)\n\n* Enable ` --experimental-string-processing` on all primer projects\r\n- We want to make this default so need to test it more\r\n- Fixed splat/star bug in extending black args for each project\r\n\r\n* Disable sqlalchemy due to crash",
            "diff": {
                "src/black_primer/lib.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "1fe2efd8573a63ffc76c69320720d349b21897da": {
            "datetime": "2021-05-07T14:54:21+02:00",
            "summary": "Do not use gitignore if explicitly passing excludes (#2170)",
            "message": "Do not use gitignore if explicitly passing excludes (#2170)\n\nCloses #2164.\r\n\r\nChanges behavior of how .gitignore is handled. With this change, the rules in .gitignore are only used as a fallback if no exclusion rule is explicitly passed on the command line or in pyproject.toml. Previously they were used regardless if explicit exclusion rules were specified, preventing any overriding of .gitignore rules.\r\n\r\nThose that depend only on .gitignore for their exclusion rules will not be affected. Those that use both .gitignore and exclude will find that exclude will act more like actually specifying exclude and not just another extra-excludes. If the previous behavior was desired, they should move their rules from exclude to extra-excludes.",
            "diff": {
                "src/black/__init__.py": 25,
                "tests/test_black.py": 28
            },
            "is_test": true,
            "is_fix": false
        },
        "e4b4fb02b91e0f5a60a9678604653aecedff513b": {
            "datetime": "2021-05-07T15:03:13+02:00",
            "summary": "Use optional tests for \"no_python2\" to simplify local testing (#2203)",
            "message": "Use optional tests for \"no_python2\" to simplify local testing (#2203)\n\n",
            "diff": {
                "tests/conftest.py": 1,
                "tests/optional.py": 119,
                "tests/test_black.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "d0e06b53b09248be34c1d5c0fa8f050bff1d201c": {
            "datetime": "2021-05-07T16:33:36+02:00",
            "summary": "Mark blackd tests with the `blackd` optional marker (#2204)",
            "message": "Mark blackd tests with the `blackd` optional marker (#2204)\n\nThis is a follow-up of #2203 that uses a pytest marker instead of a bunch of\r\n`skipUnless`.  Similarly to the Python 2 tests, they are running by default and\r\nwill crash on an unsuspecting contributor with missing dependencies.  This is\r\nby design, we WANT contributors to test everything.  Unless we actually don't\r\nand then we can run:\r\n\r\n  pytest --run-optional=no_blackd\r\n\r\nRelatedly, bump required aiohttp to 3.6.0 at least to get rid of expected\r\nfailures on Python 3.8 (see 6b5eb7d4651c7333cc3f5df4bf7aa7a1f1ffb45b).",
            "diff": {
                "setup.py": 2,
                "tests/test_blackd.py": 32,
                "tests/util.py": 14
            },
            "is_test": true,
            "is_fix": false
        },
        "f2ea461e9e9fa5c47bb61fd72d512c748928badc": {
            "datetime": "2021-05-08T11:29:47+02:00",
            "summary": "Refactor `src/black/__init__.py` into many files (#2206)",
            "message": "Refactor `src/black/__init__.py` into many files (#2206)\n\n* Move string-related utility to functions to strings.py, const.py\r\n* Move Leaf/Node-related functionality to nodes.py\r\n* Move comment-related functions to comments.py\r\n* Move caching to cache.py and Mode/TargetVersion/Feature to mode.py\r\n* Move some leftover functions to nodes.py, comments.py, strings.py\r\n* Add missing files to source list for test runs\r\n* Move line-related functionality into lines.py, brackets into brackets.py\r\n* Move transformers to trans.py\r\n* Move file handling, output, parsing, concurrency, debug, and report\r\n* Move two more functions to nodes.py\r\n* Add CHANGES\r\n* Add numeric.py\r\n* Add linegen.py\r\n* More docstrings\r\n* Include new files in tests\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 6098,
                "src/black/brackets.py": 334,
                "src/black/cache.py": 83,
                "src/black/comments.py": 269,
                "src/black/concurrency.py": 39,
                "src/black/const.py": 4,
                "src/black/debug.py": 48,
                "src/black/files.py": 241,
                "src/black/linegen.py": 984,
                "src/black/lines.py": 734,
                "src/black/mode.py": 123,
                "src/black/nodes.py": 843,
                "src/black/numerics.py": 65,
                "src/black/output.py": 83,
                "src/black/parsing.py": 215,
                "src/black/report.py": 100,
                "src/black/rusty.py": 28,
                "src/black/strings.py": 216,
                "src/black/trans.py": 1925,
                "tests/test_black.py": 43,
                "tests/test_format.py": 30,
                "tests/util.py": 19
            },
            "is_test": true,
            "is_fix": false
        },
        "036bea4aa0e2b9b3fe50d0d49addc811cce61fa4": {
            "datetime": "2021-05-08T11:34:25+02:00",
            "summary": "Speed up tests even more (#2205)",
            "message": "Speed up tests even more (#2205)\n\nThere's three optimizations in this commit:\r\n\r\n1. Don't check if Black's output is stable or equivalant if no changes\r\n   were made in the first place. It's not like passing the same code\r\n   (for both source and actual) through black.assert_equivalent or\r\n   black.assert_stable is useful. It's not a big deal for the smaller\r\n   tests, but it eats a lot of time in tests/test_format.py since\r\n   its test cases are big. This is also closer to how Black works IRL.\r\n\r\n2. Use a smaller file for `test_root_logger_not_used_directly` since\r\n   the logging it's checking happens during blib2to3's startup so the\r\n   file doesn't really matter.\r\n\r\n3. If we're checking a file is formatting (i.e. test_source_is_formatted)\r\n   don't run Black over it again with `black.format_file_in_place`.\r\n   `tests/test_format.py::TestSimpleFormat.check_file` is good enough.",
            "diff": {
                "tests/test_black.py": 7,
                "tests/test_format.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "62bfbd6a63dcac2f6f31eb014f69397c9eb967d2": {
            "datetime": "2021-05-08T15:17:38-04:00",
            "summary": "Reorganize docs v2 (GH-2174)",
            "message": "Reorganize docs v2 (GH-2174)\n\nI know I know, this is the second reorganization of the docs. I'm not\r\nsaying the first one was bad or anything... but.. actually wait nah,\r\n*it was bad*.\r\n\r\nAnyway, welcome to probably my biggest commit. The main thing with this\r\nreorganization was to introduce nesting to the documentation! Having\r\nall of the docs be part of the main TOC was becoming too much. There\r\nwasn't much room to expand either. Finally, the old setup required\r\na documentation generation step which was just annoying.\r\n\r\nThe goals of this reorganization was to:\r\n\r\n1. Significantly restructure the docs to be discoverable and\r\n   understandable\r\n\r\n2. Add room for further docs (like guides or contributing docs)\r\n\r\n3. Get rid of the doc generation step (it was slow and frustrating)\r\n\r\n4. Unblock other improvements and also just make contributing to the\r\n   docs easier\r\n\r\nAnother important change with this is that we are no longer using GitHub\r\nas a documentation host. While GitHub does support Markdown based docs\r\nactually pretty well, the lack of any features outside of GitHub Flavoured\r\nMarkdown is quite limiting. ReadTheDocs is just much better suited for\r\ndocumentation. You can use reST, MyST, CommonMark, and all of their\r\ngreat features like toctrees and admonitions.\r\n\r\nRelated to this change, we're adopting MyST as our flavour of Markdown.\r\nMyST introduces neat syntax extensions to Markdown that pretty much\r\ngives us the best of both worlds. The ease of use and simplicity of MD\r\nand the flexibility and expressiveness of reST. Also recommonmark is\r\ndeprecated now. This switch was possible now we don't use GH as a docs\r\nhost. MyST docs have to be built to really be usable / pretty, so the MD\r\ndocs are going to look pretty bad on GH, but that's fine now!\r\n\r\nAnother thing that should be noted is that the README has been stripped\r\nof most content since it was confusing. Users would read the README and\r\nthen think some feature or bug was fixed already and is available in a\r\nrelease when in reality, they weren't. They were reading effectively\r\nthe latest docs without knowing.\r\n\r\nSee also: https://github.com/psf/black/issues/1759\r\n\r\nFYI: CommonMark is a rationalized version of Markdown syntax\r\n\r\n--\r\n\r\nCommit history before merge:\r\n\r\n* Switch to MyST-Parser + doc config cleanup\r\n\r\n  recommonmark is being deprecated in favour of MyST-Parser. This change\r\n  is welcomed, especially since MyST-Parser has syntax extensions for the\r\n  Commonmark standard. Effectively we get to use a language that's powerful\r\n  and expressive like ReST, but get the simplicity of Markdown.\r\n\r\n  The rest of this effort will be using some MyST features.\r\n\r\n  This reorganization efforts aims to remove as much duplication as possible.\r\n  The regeneration step once needed is gone, significantly simplifing our\r\n  Sphinx documentation configuration.\r\n\r\n* Tell pipenv we replaced recommonmark for MyST-Parser\r\n\r\n  Also update `docs/requirements.txt`\r\n\r\n* Delete all auto generated content\r\n* Switch prettier for mdformat (plus a few plugins)\r\n\r\n  **FYI: THIS WAS EFFECTIVELY REVERTED, SEE THIRD TO LAST COMMIT**\r\n\r\n  prettier doesn't support MyST's syntax extensions which are going to be\r\n  used in this reorganization effort so we have to switch formatter.\r\n\r\n  Unfortanately mdformat's style is different from prettier's so time to\r\n  reformat the whole repo too.\r\n\r\n  We're excluding .github/ISSUE_TEMPLATE because I have no idea whether\r\n  its changes are safe, so let's play it safe.\r\n\r\n* Fix the heading levels in CHANGES.md + a link\r\n\r\n  MyST-Parser / sphinx's linkcheck complains otherwise.\r\n\r\n* Move reference docs into a docs/contributing dir\r\n\r\n  They're for contributors of Black anyway. Also added a note in the\r\n  summary document warning about the lack of attention the reference has\r\n  been dealing with.\r\n\r\n* Rewrite and setup the new landing page + main TOC\r\n\r\n  - add some more detail about Black's beta status\r\n  - add licensing info\r\n  - add external links in the main TOC for GitHub, PyPI, and IRC\r\n  - prepare main TOC for new structure\r\n\r\n* Break out AUTHORS into its own file\r\n\r\n  Not only was the AUTHORS list quite long, this makes it easy to include\r\n  it in the Sphinx docs with just a simple symlink.\r\n\r\n* Add license to docs via a simple include\r\n\r\n  Yes the document is orphaned but it is linked to in the landing page\r\n  (docs/index.rst).\r\n\r\n* Add \"The Black Code Style\" section\r\n\r\n  This mostly was a restructuring commit, there has been a few updates but\r\n  not many. The main goal was to split \"current style\" and \"planned\r\n  changes to the style that haven't happened yet\" to avoid confusion.\r\n\r\n* Add \"Getting Started\" page\r\n\r\n  This is basically a quick start + even more. This commit is certainly\r\n  one of most creatively involved in this effort.\r\n\r\n* Add \"Usage and Configuration\" section\r\n\r\n  This commit was as much restructuring as new content. Instead of being\r\n  in one giant file, usage and configuration documentation can expand\r\n  without bloating a single file.\r\n\r\n* Add \"Integrations\" section\r\n\r\nJust a restructuring commit ...\r\n\r\n* Add \"Guides\" section\r\n\r\n  This is a promising area of documentation that could easily grow in the\r\n  future, let's prepare for that!\r\n\r\n* Add \"Contributing\" section\r\n\r\n  This is also another area that I expect to see significant growth in.\r\n  Contributors to Black could definitely do with some more specific docs\r\n  that clears up certain parts of our slightly confusing project (it's\r\n  only confusing because we're getting big and old!).\r\n\r\n* Rewrite CONTRIBUTING.md to just point to RTD\r\n* Rewrite README.md to delegate most info to RTD\r\n* Address feedback + a lot of corrections and edits\r\n\r\n  I know I said I wanted to do these after landing this but given there's\r\n  going to be no time between this being merged and a release getting\r\n  pushed, I want these changes to make it in.\r\n\r\n  - drop the number flag for mdformat - to reduce diffs, see also:\r\n    https://mdformat.readthedocs.io/en/stable/users/style.html#ordered-lists\r\n  - the GH issue templates should be safe by mdformat, so get rid of the\r\n    exclude\r\n  - clarify our configuration position - i.e. stop claiming we don't have\r\n    many options, instead say we want as little formatting knobs as\r\n    possible\r\n  - lots and lots of punctuation, spelling, and grammar corrections (thanks\r\n    Jelle!)\r\n  - use RTD as the source for the CHANGELOG too\r\n  - visual style cleanups\r\n  - add docs about our .gitignore behaviour\r\n  - expand GHA Action docs\r\n  - clarify we want the PR number in the CHANGELOG entry\r\n  - claify Black's behaviour for with statements post Python 3.9\r\n  - italicize a bunch of \"Black\"s\r\n\r\n  Thank you goes to Jelle, Taneli (hukkinj1 on GH), Felix\r\n  (felix-hilden on GH), and Wouter (wbolster on GH) for the feedback!\r\n\r\n* Merge remote-tracking branch 'upstream/master' into reorganize-docs-v2\r\n\r\n  merge conflicts suck, although these ones weren't too bad.\r\n\r\n* Add changelog entry + fix merge conflict resolution error\r\n\r\n  I consider this important enough to be worthy of a changelog entry :)\r\n\r\n* Merge branch 'master' into reorganize-docs-v2\r\n\r\n  Co-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\r\n\r\n* Actually let's continue using prettier\r\n\r\n  Prettier works fine for all of the default MyST syntax so let's not\r\n  rock the boat as much. Dropping the mdformat commit was merge-conflict\r\n  filled so here's additional commit instead.\r\n\r\n* Address Cooper's, Taneli's, and Jelle's feedback\r\n\r\n  Lots of wording improvements by Cooper. Taneli suggested to disable the\r\n  enabled by default MyST syntax not supported by Prettier and I agreed.\r\n  And Jelle found one more spelling error!\r\n\r\n* More minor fixes\r\n",
            "diff": {
                "docs/conf.py": 229
            },
            "is_test": false,
            "is_fix": false
        },
        "06ccb88bf2bd35a4dc5d591bb296b5b299d07323": {
            "datetime": "2021-05-09T17:50:17-04:00",
            "summary": "Replace references to master branch (#2210)",
            "message": "Replace references to master branch (#2210)\n\nCommit history before merge:\r\n\r\n* Replace references to master branch\r\n* Update .flake8 to reference docs on RTD\r\n\r\n  We're moving away from GitHub as a documentation host to only RTD because\r\n  it's makes our lives easier creating good docs. I know this link is dead right now,\r\n  but it won't be once we release a new version with the documentation reorganization\r\n  changes (which should be soon!).\r\n\r\n  Co-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "gallery/gallery.py": 8,
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "3d96b7f10a56fcf826693e98f08b673dad8ac256": {
            "datetime": "2021-05-09T19:35:56-07:00",
            "summary": "Autogenerate black(d|-primer)? help in usage docs (#2212)",
            "message": "Autogenerate black(d|-primer)? help in usage docs (#2212)\n\nSo these won't go out of date. This does mean the environment has be\r\nsetup a bit more carefully so the right version of the tool is used,\r\nbut thankfully the build environment is rebuilt on change on RTD anyway.\r\n\r\nAlso since the HTML docs are known to build fine, let's provide\r\ndownloadable HTMLzips of our docs.\r\n\r\nThis change needs RTD and GH to install Black with the [d] extra so\r\nblackd's help can generated. While editing RTD's config file, let's\r\nmigrate the file to a non-deprecated filename.\r\n\r\nAlso I missed adding AUTHORS.md to the files key in the doc GHA config.",
            "diff": {
                "docs/conf.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "94a0b07dbebabe344991dc27f9eb0b11597bb3b5": {
            "datetime": "2021-05-11T14:09:33-04:00",
            "summary": "Remove useless flake8 config + test support code (#2221)",
            "message": "Remove useless flake8 config + test support code (#2221)\n\nWe've depended on Click 7.x ever since we broke CI systems across the\r\nworld (oops lol) and flake8-mypy was purged a fair bit back: #1867\r\n\r\nAlso remove the primer tests import in tests/test_black.py because it's\r\nannoying when just trying to actually target tests/test_black.py tests.\r\n`pytest -k test_black.py` doesn't do what you expect due to that import.",
            "diff": {
                "tests/test_black.py": 35
            },
            "is_test": true,
            "is_fix": false
        },
        "b2ee211b5ad84b62738ac0997b73bf6ee9a74d06": {
            "datetime": "2021-05-12T21:47:32+02:00",
            "summary": "Click 8.0 renamed its \"die on LANG=C\" function so we need to look for that one too (#2227)",
            "message": "Click 8.0 renamed its \"die on LANG=C\" function so we need to look for that one too (#2227)\n\n",
            "diff": {
                "src/black/__init__.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "445f094f1fa2d998bf0cc0007ea48d62953fa876": {
            "datetime": "2021-05-13T10:28:41-07:00",
            "summary": "Use codespell to find typos (#2228)",
            "message": "Use codespell to find typos (#2228)\n\n",
            "diff": {
                "src/black/trans.py": 2,
                "src/black_primer/lib.py": 2,
                "tests/test_black.py": 4
            },
            "is_test": true,
            "is_fix": false
        },
        "904fe94ceba29f3f0c5b8772c4faf699de57338f": {
            "datetime": "2021-05-13T12:30:34-07:00",
            "summary": "Add lower bound for aiohttp-cors + fix primer (#2231)",
            "message": "Add lower bound for aiohttp-cors + fix primer (#2231)\n\nIt appears sqlalchemy has recently reformatted their project with\r\nBlack 21.5b1.\r\n\r\nMost of our dependencies have a lower bound and creating a test\r\nenvironment with the oldest acceptable dependencies runs the full\r\nBlack test suite just fine. The only exception to this is aiohttp-cors.\r\nIt's unbounded and the oldest version 0.1.0 until 0.4.0 breaks the\r\ntest suite in such an old environment.\r\n\r\nFailure with 0.1.0:\r\n\r\n```\r\ntests/test_blackd.py:10: in <module>\r\n    import blackd\r\ntestenv/lib/python3.8/site-packages/blackd/__init__.py:12: in <module>\r\n    import aiohttp_cors\r\ntestenv/lib/python3.8/site-packages/aiohttp_cors/__init__.py:29: in <module>\r\n    from .urldispatcher_router_adapter import UrlDistatcherRouterAdapter\r\ntestenv/lib/python3.8/site-packages/aiohttp_cors/urldispatcher_router_adapter.py:27: in <module>\r\n    class UrlDistatcherRouterAdapter(RouterAdapter):\r\ntestenv/lib/python3.8/site-packages/aiohttp_cors/urldispatcher_router_adapter.py:32: in UrlDistatcherRouterAdapter\r\n    def route_methods(self, route: web.Route):\r\nE   AttributeError: module 'aiohttp.web' has no attribute 'Route'\r\n```\r\n\r\nFor 0.2.0:\r\n\r\n```\r\ntests/test_blackd.py:10: in <module>\r\n    import blackd\r\ntestenv/lib/python3.8/site-packages/blackd/__init__.py:12: in <module>\r\n    import aiohttp_cors\r\ntestenv/lib/python3.8/site-packages/aiohttp_cors/__init__.py:27: in <module>\r\n    from .cors_config import CorsConfig\r\ntestenv/lib/python3.8/site-packages/aiohttp_cors/cors_config.py:24: in <module>\r\n    from .urldispatcher_router_adapter import UrlDistatcherRouterAdapter\r\ntestenv/lib/python3.8/site-packages/aiohttp_cors/urldispatcher_router_adapter.py:27: in <module>\r\n    class UrlDistatcherRouterAdapter(AbstractRouterAdapter):\r\ntestenv/lib/python3.8/site-packages/aiohttp_cors/urldispatcher_router_adapter.py:32: in UrlDistatcherRouterAdapter\r\n    def route_methods(self, route: web.Route):\r\nE   AttributeError: module 'aiohttp.web' has no attribute 'Route'\r\n```\r\n\r\nFor 0.3.0:\r\n\r\n```\r\nERROR: Cannot install aiohttp-cors==0.3.0 and aiohttp==3.6.0 because these package versions have conflicting dependencies.\r\n\r\nThe conflict is caused by:\r\n    The user requested aiohttp==3.6.0\r\n    aiohttp-cors 0.3.0 depends on aiohttp<=0.20.2 and >=0.18.0\r\n\r\nTo fix this you could try to:\r\n1. loosen the range of package versions you've specified\r\n2. remove package versions to allow pip attempt to solve the dependency conflict\r\n\r\nERROR: ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/user_guide/#fixing-conflicting-dependencies\r\n```",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "403ce1a18a8a1600ab8249d828e7eaaca442cad7": {
            "datetime": "2021-05-16T18:07:27+02:00",
            "summary": "Add issue triage documentation (#2236)",
            "message": "Add issue triage documentation (#2236)\n\n* Add issue triage documentation\r\n\r\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "docs/conf.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "b8450b9faee10f3a0a63378b58adde60a27964e0": {
            "datetime": "2021-05-16T13:51:27-04:00",
            "summary": "Fix: black only respects the root gitignore. (#2225)",
            "message": "Fix: black only respects the root gitignore. (#2225)\n\nCommit history before merge:\r\n\r\nBlack now respects .gitignore files in all levels, not only root/.gitignore file\r\n(apply .gitignore rules like git does).\r\n\r\n* Fix: typo\r\n* Fix: respect .gitignore files in all levels.\r\n* Add: CHANGELOG note.\r\n* Fix: TypeError: unsupported operand type(s) for +: 'NoneType' and 'PathSpec'\r\n* Update docs.\r\n* Fix: no parent .gitignore\r\n* Add a comment since the if expression is a bit hard to understand\r\n* Update tests - conver no parent .gitignore case.\r\n* Use main's Pipfile.lock instead\r\n\r\n  The original changes in Pipfile.lock are whitespace only. The changes\r\n  turned the JSON's file indentation from 4 to 2. Effectively this\r\n  happened: `json.dumps(json.loads(old_pipfile_lock), indent=2) + \"\\n\"`.\r\n\r\n  Just using main's Pipfile.lock instead of undoing the changes because\r\n  1) I don't know how to do that easily and quickly, and 2) there's a\r\n  merge conflict.\r\n\r\n  Co-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\n\r\n* Merge remote-tracking branch 'upstream/main' into i1730 \u2026\r\n  \r\n  conflicts for days ay?",
            "diff": {
                "src/black/files.py": 4,
                "tests/data/nested_gitignore_tests/root/a.py": 1,
                "tests/data/nested_gitignore_tests/root/b.py": 1,
                "tests/data/nested_gitignore_tests/root/c.py": 1,
                "tests/data/nested_gitignore_tests/root/child/a.py": 1,
                "tests/data/nested_gitignore_tests/root/child/b.py": 1,
                "tests/data/nested_gitignore_tests/root/child/c.py": 1,
                "tests/data/nested_gitignore_tests/x.py": 0,
                "tests/test_black.py": 29
            },
            "is_test": true,
            "is_fix": true
        },
        "3759b856af3434e96ff48ac635928079a4a48ae7": {
            "datetime": "2021-05-23T22:19:03-04:00",
            "summary": "Solved Problem with Non-ASCII .gitignore Files (#2229)",
            "message": "Solved Problem with Non-ASCII .gitignore Files (#2229)\n\n* Solved Problem with non-alphabetical .gitignore files\r\n\r\nWhen .gitignore file in the user's project directory contained non-alphabetical\r\ncharacters(Japanese, Korean, Chinese, etc), Nothing works and printed this\r\nweird message in the console('cp949' is the encoding for Korean characters\r\nin this case). It even blocks VSCode's formatting from working. This commit\r\nsolves the problem.\r\n\r\nTraceback (most recent call last):\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\runpy.py\", line 193, in _run_module_as_main\r\n    \"__main__\", mod_spec)\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\runpy.py\", line 85, in _run_code\r\n    exec(code, run_globals)\r\n  File \"C:\\Users\\username\\anaconda3\\envs\\project-name\\Scripts\\black.exe\\__main__.py\", line 7, in <module>\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\black\\__init__.py\", line 1056, in patched_main      \r\n    main()\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\click\\core.py\", line 829, in __call__\r\n    return self.main(*args, **kwargs)\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\click\\core.py\", line 782, in main\r\n    rv = self.invoke(ctx)\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\click\\core.py\", line 1066, in invoke\r\n    return ctx.invoke(self.callback, **ctx.params)\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\click\\core.py\", line 610, in invoke\r\n    return callback(*args, **kwargs)\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\click\\decorators.py\", line 21, in new_func\r\n    return f(get_current_context(), *args, **kwargs)\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\black\\__init__.py\", line 394, in main\r\n    stdin_filename=stdin_filename,\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\black\\__init__.py\", line 445, in get_sources        \r\n    gitignore = get_gitignore(root)\r\n  File \"c:\\users\\username\\anaconda3\\envs\\project-name\\lib\\site-packages\\black\\files.py\", line 122, in get_gitignore\r\n    lines = gf.readlines()\r\nUnicodeDecodeError: 'cp949' codec can't decode byte 0xb0 in position 13: illegal multibyte sequence\r\n\r\n* Made .gitignore File Reader Detect Its Encoding\r\n* Revert \"Made .gitignore File Reader Detect Its Encoding\"\r\n\r\n  This reverts commit 6c3a7ea42b5b1e441cc0026c8205d1cee68c1bba.\r\n\r\n* Revert \"Solved Problem with non-alphabetical .gitignore files\"\r\n\r\n  This reverts commit b0100b5d91c2f5db544a60f34aafab120f0aa458.\r\n\r\n* Made .gitignore Reader Open the File with Auto Encoding Detecting\r\n\r\n  https://docs.python.org/3.8/library/tokenize.html#tokenize.open\r\n\r\n* Revert \"Made .gitignore Reader Open the File with Auto Encoding Detecting\"\r\n\r\n  This reverts commit 50dd80422938649ccc8c7f43aac752f9f6481779.\r\n\r\n* Made .gitignore Reader Use UTF-8\r\n* Updated CHANGES.md for #2229\r\n* Updated CHANGES.md for #2229\r\n* Update CHANGES.md\r\n* Update CHANGES.md\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/files.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "92f20d7f8493f9d0f27531f68b776fb435d53d2e": {
            "datetime": "2021-05-25T15:43:28-07:00",
            "summary": "Removed adding a space into empty docstrings. (#2249)",
            "message": "Removed adding a space into empty docstrings. (#2249)\n\nResolves #2168 by disabling the insertion of a \" \" when the docstring is entirely empty.\r\n\r\nNote that this PR is focussed only on the case of empty docstrings. In particular this does not make any changes to the behaviour that a \" \" is inserted if a non-empty docstring begins with the quoting character. That is, black still prefers:\r\n\r\n    \"\"\" \"something\" \"\"\"\r\n\r\nto:\r\n\r\n    \"\"\"\"something\" \"\"\"\r\n\r\nand that:\r\n\r\n    \"\"\"\"Something\"\"\"\"\r\n\r\nis not a legal docstring.\r\n",
            "diff": {
                "src/black/linegen.py": 4,
                "tests/data/docstring.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "754eecf69eed0bdc75fe224c19a702a4f0676807": {
            "datetime": "2021-05-26T05:52:09-07:00",
            "summary": "Add optional uvloop import (#2258)",
            "message": "Add optional uvloop import (#2258)\n\n* Add optional uvloop import\r\n\r\n- If we find `uvloop` in the env for black, blackd or black-primer lets try and use it\r\n- Add a uvloop extra install\r\n\r\nFixes #2257\r\n\r\nTest:\r\n- Add ci job to install black[uvloop] and run a primer run with uvloop\r\n  - Only with latest python (3.9)\r\n  - Will be handy to compare runtimes as a very unoffical benchmark\r\n\r\n* Remove tox install\r\n\r\n* Add to CHANGES/news",
            "diff": {
                "setup.py": 1,
                "src/black/__init__.py": 7,
                "src/black_primer/cli.py": 8,
                "src/blackd/__init__.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "6613e76658143bcbbe363da76461e0202d589400": {
            "datetime": "2021-05-26T19:04:10-07:00",
            "summary": "Fix and test docs on Windows (#2262)",
            "message": "Fix and test docs on Windows (#2262)\n\nThere's some weird interaction between Click and\r\nsphinxcontrib-programoutput on Windows that leads to an encoding error\r\nduring the printing of black-primer's help text.\r\n\r\nAlso symlinks aren't well supported on Windows so let's just use\r\nincludes which actually work because we now use MyST :D",
            "diff": {
                "docs/conf.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "ab9baf0d65dedb87a853f87afc63d40276e10b3b": {
            "datetime": "2021-05-29T09:03:08-07:00",
            "summary": "Fix path_empty() (#2275)",
            "message": "Fix path_empty() (#2275)\n\nBehavior other than output shouldn't depend on the verbose/quiet option. As far as I can tell this currently has no visible effect, since code after this function is called handles an empty list gracefully.",
            "diff": {
                "src/black/__init__.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "eec44f5977f195a10b81676525f463d0b634bd80": {
            "datetime": "2021-05-30T12:32:28-07:00",
            "summary": "Fix --experiemental-string-processing crash when matching parens not found (#2283)",
            "message": "Fix --experiemental-string-processing crash when matching parens not found (#2283)\n\nFixes #2271\r\n",
            "diff": {
                "src/black/trans.py": 14,
                "tests/data/long_strings__regression.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "4ca4407b4adc49b96c9536b16ed7d0a1e0b2deca": {
            "datetime": "2021-05-30T23:41:03+02:00",
            "summary": "Make sure to split lines that start with a string operator (#2286)",
            "message": "Make sure to split lines that start with a string operator (#2286)\n\nFixes #2284",
            "diff": {
                "src/black/trans.py": 78,
                "tests/data/long_strings__regression.py": 84
            },
            "is_test": false,
            "is_fix": false
        },
        "199e3eb76b74d9d2cada527403a3989287c4e8b3": {
            "datetime": "2021-05-30T15:34:33-07:00",
            "summary": "Fix regular expression that black uses to identify f-expressions (#2287)",
            "message": "Fix regular expression that black uses to identify f-expressions (#2287)\n\nFixes #1469\r\n",
            "diff": {
                "src/black/trans.py": 4,
                "tests/data/long_strings__regression.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "a4e35b314977baae2e930abd24fa1013c7235e39": {
            "datetime": "2021-05-31T17:57:23-07:00",
            "summary": "Correct max string length calculation when there are string operators (#2292)",
            "message": "Correct max string length calculation when there are string operators (#2292)\n\nPR #2286 did not fix the edge-cases (e.g. when the string is just long\r\nenough to cause a line to be 89 characters long). This PR corrects that\r\nmistake.\r\n",
            "diff": {
                "src/black/trans.py": 28,
                "tests/data/long_strings__edge_case.py": 19
            },
            "is_test": false,
            "is_fix": false
        },
        "4005246f86d1459e1123ac399721054182e9fef6": {
            "datetime": "2021-05-31T21:45:50-04:00",
            "summary": "Add `version` to github action (and rewrite the whole thing while at it) (#1940)",
            "message": "Add `version` to github action (and rewrite the whole thing while at it) (#1940)\n\nCommit history before merge:\n\n* Add black_version to github action\n* Merge upstream/main into this branch\n* Add version support for the Black action pt.2\n\n  Since we're moving to a composite based action, quite a few changes\n  were made. 1) Support was added for all OSes (Windows was painful). \n  2) Isolation from the rest of the workflow had to be done manually\n  with a virtual environment.\n\n  Other noteworthy changes:\n\n  - Rewrote basically all of the logic and put it in a Python script\n    for easy testing (not doing it here tho cause I'm lazy and I can't\n    think of a reasonable way of testing it).\n  - Renamed `black_version` to `version` to better fit the existing\n    input naming scheme.\n  - Added support for log groups, this makes our action's output a\n    bit more fancy (I may or may have not added some debug output too).\n\n* Add more to and sorta rewrite the Action's docs\n\n  Reflect compatability and gotchas.\n\n* Add CHANGELOG entry\n* Merge main into this branch\n* Remove debug; address typos; clean up action.yml\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "action/main.py": 39
            },
            "is_test": false,
            "is_fix": false
        },
        "7567cdf3b4f32d4fb12bd5ca0da838f7ff252cfc": {
            "datetime": "2021-06-01T18:55:21-07:00",
            "summary": "Code Flag Options (#2259)",
            "message": "Code Flag Options (#2259)\n\nProperly handles the diff, color, and fast option when black is run with\r\n the `--code` option.\r\n\r\nCloses #2104, closes #1801.",
            "diff": {
                "src/black/__init__.py": 119,
                "src/black/files.py": 2,
                "tests/test_black.py": 144
            },
            "is_test": true,
            "is_fix": false
        },
        "df1c86cbe7cf0727d81e526e904b0752d7371da0": {
            "datetime": "2021-06-03T19:13:55+02:00",
            "summary": "don't uvloop.install on import (#2303)",
            "message": "don't uvloop.install on import (#2303)\n\n",
            "diff": {
                "src/black/__init__.py": 11,
                "src/black/concurrency.py": 15,
                "src/blackd/__init__.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "a2b5ba2a3a97eb3a0b5130a5b317bb750c1624cf": {
            "datetime": "2021-06-03T13:09:41-07:00",
            "summary": "Add option to require a specific version to be running (#2300)",
            "message": "Add option to require a specific version to be running (#2300)\n\nCloses #1246: This PR adds a new option (and automatically a toml entry, hooray for existing configuration management \ud83c\udf89) to require a specific version of Black to be running.\r\n\r\nFor example: `black --required-version 20.8b -c \"format = 'this'\"`\r\n\r\nExecution fails straight away if it doesn't match `__version__`. ",
            "diff": {
                "src/black/__init__.py": 26,
                "tests/test_black.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "6380b9f2f6e53748360a120ed9acb874a35885e0": {
            "datetime": "2021-06-07T07:01:57-07:00",
            "summary": "Account for += assignment when deciding whether to split string (#2312)",
            "message": "Account for += assignment when deciding whether to split string (#2312)\n\nFixes #2294\r\n",
            "diff": {
                "src/black/trans.py": 2,
                "tests/data/long_strings__edge_case.py": 11,
                "tests/data/long_strings__regression.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "99b68e59ce0424a86215cc9ca0cb46e481d2a6fe": {
            "datetime": "2021-06-07T07:03:39-07:00",
            "summary": "Fix incorrect custom breakpoint indices when string group contains fake f-strings (#2311)",
            "message": "Fix incorrect custom breakpoint indices when string group contains fake f-strings (#2311)\n\nFixes #2293\r\n",
            "diff": {
                "src/black/trans.py": 33,
                "tests/data/long_strings__regression.py": 78
            },
            "is_test": false,
            "is_fix": false
        },
        "c1c2418368cfcaa4f49edd7ec599fa45cce2d47d": {
            "datetime": "2021-06-07T11:05:08-04:00",
            "summary": "[primer] Enable everything (#2288)",
            "message": "[primer] Enable everything (#2288)\n\nSee if we pass all our repos with experimental string processing enabled.\r\nDjango probably needed:\r\n- Ignores >= 3.8 only\r\n\r\nWe could support PEP440 version specifiers, but that would introduce the packaging module as a dependency that I'd like to avoid ... Or I could implement a poor persons version or vendor\r\n\r\nCommit history before merge:\r\n * [primer] Enable everything\r\n * Add exclude extend to django CLI args for primer\r\n * Change default timeout to from 5 to 10 mins for a primer project\r\n * Skip string normalization for Django\r\n * Limit Django to >= 3.8 due to := operator",
            "diff": {
                "src/black_primer/lib.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "40fae18134916b8499bd992d8bef4ae23bcd2986": {
            "datetime": "2021-06-08T14:37:34-07:00",
            "summary": "Possible fix for issue with indentation and fmt: skip (#2281)",
            "message": "Possible fix for issue with indentation and fmt: skip (#2281)\n\nNot sure the fix is right.  Here is what I found: issue is connected\r\nwith line\r\n\r\n    first.prefix = prefix[comment.consumed :]\r\n\r\nin `comments.py`.  `first.prefix` is a prefix of the line, that ends\r\nwith `# fmt: skip`, but `comment.consumed` is the length of the\r\n`\"  # fmt: skip\"` string.  If prefix length is greater than 14,\r\n`first.prefix` will grow every time we apply formatting.\r\n\r\nFixes #2254",
            "diff": {
                "src/black/comments.py": 5,
                "tests/data/fmtskip6.py": 13,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "a9eab85f226df3b3070aca122d089dbd62b42b9c": {
            "datetime": "2021-06-08T17:57:23-04:00",
            "summary": "Mention comment non-processing in documentation (#2306)",
            "message": "Mention comment non-processing in documentation (#2306)\n\nThis commit adds a short section discussing the non-processing of docstrings\r\nbesides spacing improvements, mentions comment moving and links to the\r\nAST equivalence discussion. I also added a simple spacing test for good\r\nmeasure.\r\n\r\nCommit history before merge:\r\n\r\n* Mention comment non-processing in documentation, add spacing test\r\n* Mention special cases for comment spacing\r\n* Add all special cases, improve wording",
            "diff": {
                "tests/data/comments2.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "00e7e12a3a412ea386806d5d4eeaed345e912940": {
            "datetime": "2021-06-08T17:46:09-07:00",
            "summary": "Regression fix: leave R prefixes capitalization alone (#2285)",
            "message": "Regression fix: leave R prefixes capitalization alone (#2285)\n\n`black.strings.get_string_prefix` used to lowercase the extracted\r\nprefix before returning it. This is wrong because 1) it ignores the\r\nfact we should leave R prefixes alone because of MagicPython, and 2)\r\nthere is dedicated prefix casing handling code that fixes issue 1.\r\n`.lower` is too naive.\r\n\r\nThis was originally fixed in 20.8b0, but was reintroduced since 21.4b0.\r\n\r\nI also added proper prefix normalization for docstrings by using the\r\n`black.strings.normalize_string_prefix` helper.\r\n\r\nSome more test strings were added to make sure strings with capitalized\r\nprefixes aren't treated differently (actually happened with my original\r\npatch, Jelle had to point it out to me).",
            "diff": {
                "src/black/linegen.py": 5,
                "src/black/strings.py": 2,
                "src/black/trans.py": 10,
                "tests/data/long_strings__regression.py": 42,
                "tests/data/string_prefixes.py": 21
            },
            "is_test": false,
            "is_fix": false
        },
        "229498e531b26f93c482115b1ccdb16b70bad620": {
            "datetime": "2021-06-09T07:01:07-07:00",
            "summary": "Fix flake8 configuration by switching from extend-ignore to ignore (#2320)",
            "message": "Fix flake8 configuration by switching from extend-ignore to ignore (#2320)\n\n",
            "diff": {
                "src/black/output.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "62402a32618bc62ae90cfcdc3d47c7ad20e60e10": {
            "datetime": "2021-06-09T12:29:32-07:00",
            "summary": "Support named escapes (`\\N{...}`) in string processing (#2319)",
            "message": "Support named escapes (`\\N{...}`) in string processing (#2319)\n\nCo-authored-by: Felix Hild\u00e9n <felix.hilden@gmail.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/trans.py": 91,
                "tests/data/long_strings.py": 72,
                "tests/data/long_strings__regression.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "aa31a117b16ed849710cf13cea5c064839beb29e": {
            "datetime": "2021-06-10T21:06:50-07:00",
            "summary": "Add STDIN test to primer (#2315)",
            "message": "Add STDIN test to primer (#2315)\n\n* Add STDIN test to primer\r\n\r\n- Check that out STDIN black support stays working\r\n- Add asyncio.subprocess STDIN pip via communicate\r\n- We just check we format python code from primer's `lib.py`\r\n\r\nFixes #2310",
            "diff": {
                "src/black_primer/lib.py": 45,
                "tests/test_primer.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "e2fd914dc172a13c0e6395d2d08efa5a25380381": {
            "datetime": "2021-06-13T10:20:50-07:00",
            "summary": "Fix internal error when FORCE_OPTIONAL_PARENTHESES feature is enabled (#2332)",
            "message": "Fix internal error when FORCE_OPTIONAL_PARENTHESES feature is enabled (#2332)\n\nFixes #2313.",
            "diff": {
                "src/black/linegen.py": 21,
                "tests/data/long_strings__regression.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "be16cfa0353f33adf0ee5f026d9b46f9ca6ac7ac": {
            "datetime": "2021-06-22T11:58:49-04:00",
            "summary": "Get `click` types from main repo (#2344)",
            "message": "Get `click` types from main repo (#2344)\n\nClick types have been moved to click repo itself. See pallets/click#1856\r\n\r\nI've had some issues with typeshed types being outdated in another project\r\nso might be good to avoid that here.\r\n\r\nCommit history before merge:\r\n\r\n* Get `click` types from main repo\r\n* Fix mypy errors\r\n* Require click v8 for type annotations\r\n* Update Pipfile",
            "diff": {
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "017aafea992ca1c6d7af45d3013af7ddb7fda12a": {
            "datetime": "2021-06-23T15:11:23-04:00",
            "summary": "Accept empty stdin (close #2337) (#2346)",
            "message": "Accept empty stdin (close #2337) (#2346)\n\nCommit history before merge:\r\n\r\n* Accept empty stdin (close #2337)\r\n* Update tests/test_black.py\r\n* Add changelog\r\n* Assert Black reformats an empty string to an empty string (#2337) (#2346)\r\n* fix",
            "diff": {
                "src/black/__init__.py": 3,
                "tests/test_black.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "ae56983a5f36d69e2a8cfa762f255a800039b0df": {
            "datetime": "2021-07-08T18:46:32-07:00",
            "summary": "Avoid src being marked as optional in help (#2356)",
            "message": "Avoid src being marked as optional in help (#2356)\n\n",
            "diff": {
                "src/black/__init__.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "dd6c674e3a33ac6d20faea751764aeafecdf34c2": {
            "datetime": "2021-07-09T17:09:29-07:00",
            "summary": "Use setuptools.find_packages in setup (#2363)",
            "message": "Use setuptools.find_packages in setup (#2363)\n\n* Use setuptools.find_packages in setup\r\n\r\n* Address mypy errors",
            "diff": {
                "setup.py": 4,
                "src/black_primer/__init__.py": 0,
                "src/black_primer/cli.py": 6,
                "tests/test_primer.py": 4
            },
            "is_test": true,
            "is_fix": false
        },
        "2946d3b03d499475ed2276e590516df46d01d01a": {
            "datetime": "2021-07-12T16:01:38-04:00",
            "summary": "Switch `toml` TOML library for `tomli` (#2301)",
            "message": "Switch `toml` TOML library for `tomli` (#2301)\n\ntoml unfortunately has a lack of maintainership issue right now. It's\r\nevident by the fact toml only supports TOML v0.5.0. TOML v1.0.0 has\r\nbeen recently released and right now Black crashes hard on its usage.\r\n\r\ntomli is a brand new parse only TOML library. It supports TOML\r\nv1.0.0. Although TBH we're switching to this one mostly because\r\npip is doing the same.\r\n\r\n*The upper bound was included at the library maintainer's request.\r\n\r\nCo-authored-by: \u0141ukasz Langa <lukasz@langa.pl>\r\nCo-authored-by: Taneli Hukkinen <3275109+hukkin@users.noreply.github.com>",
            "diff": {
                "setup.py": 2,
                "src/black/files.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "91773b89097927a2393bc5223295d37ed26e1632": {
            "datetime": "2021-07-13T10:24:55-07:00",
            "summary": "Improve AST safety parsing error message (#2304)",
            "message": "Improve AST safety parsing error message (#2304)\n\nCo-authored-by: Hasan Ramezani <hasan.r67@gmail.com>",
            "diff": {
                "src/black/parsing.py": 52,
                "tests/test_black.py": 32
            },
            "is_test": true,
            "is_fix": false
        },
        "4dd100bff283b3c60ce67491dd53f47b45f68ac2": {
            "datetime": "2021-07-16T13:45:47-04:00",
            "summary": "Use platformdirs over appdirs (#2375)",
            "message": "Use platformdirs over appdirs (#2375)\n\nSigned-off-by: Bern\u00e1t G\u00e1bor <bgabor8@bloomberg.net>\r\nSigned-off-by: Bern\u00e1t G\u00e1bor <gaborjbernat@gmail.com>\r\n",
            "diff": {
                "setup.py": 2,
                "src/black/cache.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "65abd1006bca13aa5fc12b173bf206dc261bd592": {
            "datetime": "2021-07-16T22:21:34-04:00",
            "summary": "add context manager to temporarily change the cwd (#2377)",
            "message": "add context manager to temporarily change the cwd (#2377)\n\nCommit history before merge:\r\n\r\n* add context manager to temporarily change the cwd\r\n* Iterator, not Iterable",
            "diff": {
                "tests/test_black.py": 39,
                "tests/util.py": 14
            },
            "is_test": true,
            "is_fix": false
        },
        "e76adbecb8c3b62631868332c3b632363c7c16b4": {
            "datetime": "2021-08-06T14:53:24-04:00",
            "summary": "Fix type dependencies of mypy invocation (#2411)",
            "message": "Fix type dependencies of mypy invocation (#2411)\n\nCommit history before merge:\r\n\r\n* Fix type dependencies of mypy invocation\r\n* Consistent version upper bound",
            "diff": {
                "src/black/files.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "b1d060101626aa1c332f52e4bdf0ae5e4cc07990": {
            "datetime": "2021-08-06T16:57:46-04:00",
            "summary": "Jupyter notebook support (#2357)",
            "message": "Jupyter notebook support (#2357)\n\nTo summarise, based on what was discussed in that issue:\r\n\r\ndue to not being able to parse automagics (e.g. pip install black)\r\nwithout a running IPython kernel, cells with syntax which is parseable\r\nby neither ast.parse nor IPython will be skipped cells with multiline\r\nmagics will be skipped trailing semicolons will be preserved, as they\r\nare often put there intentionally in Jupyter Notebooks to suppress\r\nunnecessary output\r\n\r\nCommit history before merge (excluding merge commits):\r\n\r\n* wip\r\n* fixup tests\r\n* skip tests if no IPython\r\n* install test requirements in ipynb tests\r\n* if --ipynb format all as ipynb\r\n* wip\r\n* add some whole-notebook tests\r\n* docstrings\r\n* skip multiline magics\r\n* add test for nested cell magic\r\n* remove ipynb_test.yml, put ipynb tests in tox.ini\r\n* add changelog entry\r\n* typo\r\n* make token same length as magic it replaces\r\n* only include .ipynb by default if jupyter dependencies are found\r\n* remove logic from const\r\n* fixup\r\n* fixup\r\n* re.compile\r\n* noop\r\n* clear up\r\n* new_src -> dst\r\n* early exit for non-python notebooks\r\n* add non-python test notebook\r\n* add repo with many notebooks to black-primer\r\n* install extra dependencies for black-primer\r\n* fix planetary computer examples url\r\n* dont run on ipynb files by default\r\n* add scikit-lego (Expected to change) to black-primer\r\n* add ipynb-specific diff\r\n* fixup\r\n* run on all (including ipynb) by default\r\n* remove --include .ipynb from scikit-lego black-primer\r\n* use tokenize so as to mirror the exact logic in IPython.core.displayhooks quiet\r\n* fixup\r\n* :art:\r\n* clarify docstring\r\n* add test for when comment is after trailing semicolon\r\n* enumerate(reversed) instead of [::-1]\r\n* clarify docstrings\r\n* wip\r\n* use jupyter and no_jupyter marks\r\n* use THIS_DIR\r\n* windows fixup\r\n* perform safe check cell-by-cell for ipynb\r\n* only perform safe check in ipynb if not fast\r\n* remove redundant Optional\r\n* :art:\r\n* use typeguard\r\n* dont process cell containing transformed magic\r\n* require typing extensions before 3.10 so as to have TypeGuard\r\n* use dataclasses\r\n* mention black[jupyter] in docs as well as in README\r\n* add faq\r\n* add message to assertion error\r\n* add test for indented quieted cell\r\n* use tokenize_rt else we cant roundtrip\r\n* fmake fronzet set for tokens to ignore when looking for trailing semicolon\r\n* remove planetary code examples as recent commits result in changes\r\n* use dataclasses which inherit from ast.NodeVisitor\r\n* bump typing-extensions so that TypeGuard is available\r\n* bump typing-extensions in Pipfile\r\n* add test with notebook with empty metadata\r\n* pipenv lock\r\n* deprivative validate_cell\r\n* Update README.md\r\n* Update docs/getting_started.md\r\n* dont cache notebooks if jupyter dependencies arent found\r\n* dont write to cache if jupyter deps are not installed\r\n* add notebook which cant be parsed\r\n* use clirunner\r\n* remove other subprocess calls\r\n* add docstring\r\n* make verbose and quiet keyword only\r\n* :art:\r\n* run second many test on directory, not on file\r\n* test for warning message when running on directory\r\n* early return from non-python cell magics\r\n* move NothingChanged to report to avoid circular import\r\n* remove circular import\r\n* reinstate --ipynb flag\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "setup.py": 3,
                "src/black/__init__.py": 191,
                "src/black/const.py": 2,
                "src/black/files.py": 10,
                "src/black/handle_ipynb_magics.py": 457,
                "src/black/mode.py": 2,
                "src/black/output.py": 18,
                "src/black/report.py": 4,
                "tests/test_black.py": 14,
                "tests/test_ipynb.py": 455,
                "tests/test_no_ipynb.py": 37
            },
            "is_test": true,
            "is_fix": false
        },
        "104aec555fae0883ef5b53709569bd9c4d420bc5": {
            "datetime": "2021-08-20T19:54:53-04:00",
            "summary": "Present a more user-friendly error if .gitignore is invalid (#2414)",
            "message": "Present a more user-friendly error if .gitignore is invalid (#2414)\n\nFixes #2359.\r\n\r\nThis commit now makes Black exit with an user-friendly error message if a\r\n.gitignore file couldn't be parsed -- a massive improvement over an opaque\r\ntraceback!",
            "diff": {
                "setup.py": 2,
                "src/black/__init__.py": 28,
                "src/black/files.py": 7,
                "tests/data/invalid_gitignore_tests/a.py": 0,
                "tests/data/invalid_nested_gitignore_tests/a.py": 0,
                "tests/data/invalid_nested_gitignore_tests/a/a.py": 0,
                "tests/test_black.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "8c04847aa22d14f01bb206cfc1b1e1cebd2ae538": {
            "datetime": "2021-08-22T19:52:19-07:00",
            "summary": "Improve f-string expression detection regex so ... (#2437)",
            "message": "Improve f-string expression detection regex so ... (#2437)\n\nwe don't accidentally add backslashes to them when normalizing quotes\r\nbecause that's invalid syntax!\r\n\r\nThe problem this commit fixes is that matches would eat too much\r\nblocking important matches to occur. For example, here's one f-string\r\nbody:\r\n\r\n    {a}{b}{c}\r\n\r\nI know there's no risk of introducing backslashes here, but the regex\r\nalready goes sideways with this. Throwing this example at regex101\r\nI get:\r\n\r\n    {a}{b}{c}   # The As and Bs are the two matches, and the upper\r\n    ---- ----   # case letters are the groups with those matches.\r\n    aAaa bbBb\r\n\r\n... we've missed the middle expression (so if any backslashes in a\r\nmore complex example were introduced there we wouldn't bail out\r\neven though we should -- hence the bug). As it stands the regex\r\nneeds somesort of extra character (or the start/end of the body)\r\naround the expressions but that isn't always the case as shown\r\nabove.\r\n\r\nThe fix implemented here is to turn the \"eat a surrounding non-curly\r\nbracket character\" groups ie. `(?:[^{]|^)` and `(?:[^}]|$)` into\r\nnegative lookaheads and lookbehinds. This still guarantees the\r\nalready specified rules but without problematically eating extra\r\ncharacters ^^",
            "diff": {
                "src/black/strings.py": 4,
                "tests/data/string_quotes.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "0969ca4a46c4a2081be38f7e96a81a74b308c75f": {
            "datetime": "2021-08-24T16:59:24-04:00",
            "summary": "Change sys.exit to raise ImportError (#2440)",
            "message": "Change sys.exit to raise ImportError (#2440)\n\nThe fix for #1688 in #1761 breaks help(\"modules\") introspection and also leads\r\nto unhappy results when inadvertently importing blackd from Python. Basically\r\nthe sys.exit(-1) causes the whole Python REPL to exit -- not great to suffice.\r\n\r\nCommit history before merge:\r\n\r\n* Change sys.exit to Raise.\r\n* Add #2440 to changelog.\r\n* Fix lint error from prettier\r\n* Remove exception chain for more helpful user message.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/blackd/__init__.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "5bb4da02c2c8c92d017e8b6be57eb442cc8f04ff": {
            "datetime": "2021-08-24T17:29:49-04:00",
            "summary": "Add cpython Lib/ repository config into primer config - Disabled (#2429)",
            "message": "Add cpython Lib/ repository config into primer config - Disabled (#2429)\n\n* Add CPython repository into primer runs\r\n\r\n- CPython tests is probably the best repo for black to test on as the stdlib's unittests should use all syntax\r\n  - Limit to running in recent versions of the python runtime - e.g. today >= 3.9\r\n    - This allows us to parse more syntax\r\n- Exclude all failing files for now\r\n  - Definitely have bugs to explore there - Refer to #2407 for more details there\r\n  - Some test files on purpose have syntax errors, so we will never be able to parse them\r\n- Add new black command arguments logging in debug mode; very handy for seeing how CLI arguments are formatted\r\n\r\nCPython now succeeds ignoring 16 files:\r\n```\r\nOh no! \ud83d\udca5 \ud83d\udc94 \ud83d\udca5\r\n1859 files would be reformatted, 148 files would be left unchanged.\r\n```\r\n\r\nTesting\r\n- Ran locally with and without string processing - Very little runtime difference BUT 3 more failed files\r\n```\r\ntime /tmp/tb/bin/black --experimental-string-processing --check . 2>&1 | tee /tmp/black_cpython_esp\r\n...\r\nOh no! \ud83d\udca5 \ud83d\udc94 \ud83d\udca5\r\n1859 files would be reformatted, 148 files would be left unchanged, 16 files would fail to reformat.\r\n\r\nreal\t4m8.563s\r\nuser\t16m21.735s\r\nsys\t0m6.000s\r\n```\r\n- Add unittest for new covienence config file flattening that allows long arguments to be broke up into an array/list of strings\r\n\r\nAddresses #2407\r\n\r\n---\r\n\r\nCommit history before merge:\r\n\r\n* Add new `timeout_seconds` support into primer.json\r\n- If present, will set forked process limit to that value in seconds\r\n- Otherwise, stay with default 10 minutes (600 seconds)\r\n\r\n* Add new \"base_path\" concept to black-primer\r\n- Rather than start at the repo root start at a configured path within the repository\r\n  - e.g. for cpython only run black on `Lib`\r\n\r\n* Disable by default - It's too much for GitHub Actions. But let's leave config for others to use\r\n* Minor tweak to _flatten_cli_args\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black_primer/lib.py": 42,
                "tests/test_primer.py": 7
            },
            "is_test": true,
            "is_fix": false
        }
    },
    "2021-08-25T12:55:32-07:00": {
        "8a59528c2d8ae1ef5f366039c728614aaf1a470b": {
            "datetime": "2021-08-25T18:32:27-07:00",
            "summary": "Stop changing return type annotations to tuples (#2384)",
            "message": "Stop changing return type annotations to tuples (#2384)\n\n\r\nThis fixes a bug where a trailing comma would be added to a\r\nparenthesized return annotation changing its type to a tuple.\r\nHere's one case where this bug shows up:\r\n\r\n```\r\ndef spam() -> (\r\n    this_is_a_long_type_annotation_which_should_NOT_get_a_trailing_comma\r\n):\r\n    pass\r\n```\r\n\r\nThe root problem was that the type annotation was treated as if it was\r\na parameter & import list (is_body=True to linegen::bracket_split_build_line)\r\nwhere a trailing comma is usually fine. Now there's another check in the\r\naforementioned function to make sure the body it's operating on isn't\r\na return annotation before truly adding a trailing comma.\r\n\r\n",
            "diff": {
                "src/black/linegen.py": 16,
                "src/black/nodes.py": 2,
                "tests/data/function_trailing_comma.py": 62
            },
            "is_test": false,
            "is_fix": false
        },
        "366a0806eb4edd94d4d20cc6912333586bdc9fa7": {
            "datetime": "2021-08-26T13:59:01-07:00",
            "summary": "blib2to3: support unparenthesized wulruses in more places (#2447)",
            "message": "blib2to3: support unparenthesized wulruses in more places (#2447)\n\n\r\nImplementation stolen from PR davidhalter/parso#162. Thanks parso!\r\n\r\nI could add support for these newer syntactical constructs in the\r\ntarget version detection logic, but until I get diff-shades up\r\nand running I don't feel very comfortable adding the code.\r\n",
            "diff": {
                "tests/data/pep_572_py310.py": 4,
                "tests/data/pep_572_py39.py": 7,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "8b0680533420c2ea367860fcbb08df99317a6b44": {
            "datetime": "2021-08-27T16:21:08-04:00",
            "summary": "Document jupyter hook (#2416)",
            "message": "Document jupyter hook (#2416)\n\nThis also introduces a script so we can reference the latest version in\r\nthe example pre-commit configuration in the docs without forgetting to\r\nupdate it when doing a release!\r\n\r\nCommit history before merge:\r\n\r\n* document jupyter hook\r\n* note minimum version\r\n* add check for pre-commit version\r\n* use git tag\r\n* curl api during ci\r\n* parse version from changes file\r\n* fixup script\r\n* rename variables\r\n* Tweak the docs & magical script\r\n* fix couple of typos\r\n* pin additional dependencies in hook\r\n* Add types-PyYAML to lockfile\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "scripts/__init__.py": 0,
                "scripts/check_pre_commit_rev_in_example.py": 54,
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "7a093f0303c3fa7fee0b6742b7c6a3ff03438ace": {
            "datetime": "2021-08-28T08:27:55-07:00",
            "summary": "add test which covers stdin filename ipynb (#2454)",
            "message": "add test which covers stdin filename ipynb (#2454)\n\n",
            "diff": {
                "tests/test_black.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "a8b4665e7d6eb945c47820adb1a3f8b006adce0c": {
            "datetime": "2021-08-29T17:04:49-04:00",
            "summary": "Exclude broken typing-extensions version + fix import (#2460)",
            "message": "Exclude broken typing-extensions version + fix import (#2460)\n\nre. import, the ipynb code was assuming that typing-extensions would\r\nalways be available, but that's not the case! There's an environment\r\nmarker on the requirement meaning it won't get installed on 3.10 or\r\nhigher. The test suite didn't catch this issue since aiohttp pulls in\r\ntyping-extensions unconditionally.",
            "diff": {
                "setup.py": 5,
                "src/black/handle_ipynb_magics.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "22747a6937d53e38397e96c4ed5ed0571db31f71": {
            "datetime": "2021-09-18T22:18:06+01:00",
            "summary": "fix all b904s (#2501)",
            "message": "fix all b904s (#2501)\n\n",
            "diff": {
                "src/black/__init__.py": 19,
                "src/black/linegen.py": 10,
                "src/blackd/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0540591e256c6121ee0bac970024501fcdcb8c0c": {
            "datetime": "2021-09-18T20:24:09-07:00",
            "summary": "add check for version in the-basics example (#2459)",
            "message": "add check for version in the-basics example (#2459)\n\n",
            "diff": {
                "scripts/check_version_in_basics_example.py": 47
            },
            "is_test": false,
            "is_fix": false
        },
        "a5381ba7648f7308145c78c248e29118e18dc530": {
            "datetime": "2021-09-25T12:58:44+01:00",
            "summary": "re-implement simple CORS middleware for blackd (#2500)",
            "message": "re-implement simple CORS middleware for blackd (#2500)\n\n* re-implement simple CORS middleware for blackd\r\n* remove aiohttp-cors from setup.py\r\n* Remove aiohttp-cors from Pipfile.lock\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "setup.py": 2,
                "src/blackd/__init__.py": 19,
                "src/blackd/middlewares.py": 34,
                "tests/test_blackd.py": 21
            },
            "is_test": true,
            "is_fix": false
        },
        "1af533108968e40cc005079a328ad117a864af13": {
            "datetime": "2021-09-25T15:45:13-04:00",
            "summary": "Bump required aiohttp version to 3.7.4 (#2509)",
            "message": "Bump required aiohttp version to 3.7.4 (#2509)\n\nCommit history before merge:\r\n\r\n* Bump required aiohttp version to 3.7.4\r\n\r\nThis release includes an important security fix\r\n(https://github.com/aio-libs/aiohttp/security/advisories/GHSA-v6wp-4m6f-gcjg) and many\r\nother improvements.\r\n\r\n* add changelog entry\r\n* Let's not forget about Pipfile\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "39b55f787cff41ef9726b256cfdbedefe6d5c716": {
            "datetime": "2021-09-25T15:46:36-04:00",
            "summary": "Add test to cover when unable to replace magics (#2471)",
            "message": "Add test to cover when unable to replace magics (#2471)\n\nAnother follow-up from #2357, adding a test for uncovered code.",
            "diff": {
                "src/black/handle_ipynb_magics.py": 7,
                "tests/test_ipynb.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "0fd353f1639c580c32599bf435902d08dbd9a560": {
            "datetime": "2021-09-29T09:50:44-07:00",
            "summary": "Add --workers CLI parameter (fixes #2513) (#2514)",
            "message": "Add --workers CLI parameter (fixes #2513) (#2514)\n\nFixes #2513",
            "diff": {
                "src/black/__init__.py": 21
            },
            "is_test": false,
            "is_fix": false
        },
        "3500e1cda5bef73ddc7eaf79be6c67c918738936": {
            "datetime": "2021-10-02T19:37:32-04:00",
            "summary": "MNT: remove unnecessary test deps + some refactoring (GH-2510)",
            "message": "MNT: remove unnecessary test deps + some refactoring (GH-2510)\n\nThe main goals of this commit include:\r\n\r\n* improving consistency on how strict the test suite is -- Jelle has\r\n  seen cases where a test did not fail to an incomplete test setup\r\n  even though it should've\r\n* simplifying tests for both ease of creation and reading via\r\n  parametrization and helpers\r\n* reorganizing the test suite by grouping more tests\r\n* dropping test suite dependencies that aren't strictly necessary\r\n\r\nThe test suite could definitely do with more refactoring, but this is a\r\ngood first pass. Anyway it would've gotten too big to review effectively\r\nif I did continue on this PR.\r\n\r\nCommit history before squash merge:\r\n\r\n* Drop parameterized dep and refactor format tests\r\n\r\nSince the test suite is already using pytest-only features we can drop\r\nthe parameterized test dependency in favour of pytest's own offering.\r\n\r\nI also added an utility function called assert_format that makes it\r\neven easier to verify Black formats some code correctly. We already\r\nhave great tooling if the case is very simple in test_format.py but\r\nany sort of complication makes it hard to use. Also if you're writing\r\na non-standard test case, you have to be careful to include all of\r\nthe steps so issues don't go undetected. assert_format aims to\r\n1) improve consistency, 2) avoid wasted CPU cycles, and 3) avoid\r\nlogical errors that hide issues.\r\n\r\nFinally, quite a few tests were either moved and/or simplified with\r\nthe new setup.\r\n\r\n* Move file collection tests\r\n* Add assert_collected_sources helper function\r\n\r\nTesting source collection involves a lot of repetitive boilerplate,\r\nsomething that black.files.get_sources's signature does not help with.\r\nSo to cut down on boilerplate like `report=black.Report()` I added\r\na convenience function to tests/test_black.py which wraps\r\nblack.get_sources. Its signature is designed to be much more lax to\r\nmake it much easier to use. Somehow this leads to cutting 100 lines!\r\n\r\nAlso IMO the test cases are much easier to read since it's more\r\ndeclarative than really procedural now.\r\n\r\n* Run isort on some test files\r\n* Move cache tests\r\n* Use pytest-style asserts & add parametrization\r\n* Drop now unnecessary test dependencies\r\n\r\n*pytest-cases might be interesting for further refactoring but I\r\nhaven't been able to wrap my head around it for the time being. We\r\ncan always revisit anyway.",
            "diff": {
                "tests/test_black.py": 1716,
                "tests/test_format.py": 151,
                "tests/util.py": 87
            },
            "is_test": true,
            "is_fix": false
        },
        "872bb9474efe683efaed1626c4c0172738634f28": {
            "datetime": "2021-10-04T17:36:57-07:00",
            "summary": "Bump typed-ast minimum to 1.4.3 for 3.10 compat (#2519)",
            "message": "Bump typed-ast minimum to 1.4.3 for 3.10 compat (#2519)\n\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "2f3fa1f6d0cbc2a3f31c7440c422da173b068e7b": {
            "datetime": "2021-10-11T21:45:58-07:00",
            "summary": "Fix feature detection for positional-only arguments in lambdas (#2532)",
            "message": "Fix feature detection for positional-only arguments in lambdas (#2532)\n\n",
            "diff": {
                "src/black/__init__.py": 6,
                "tests/test_black.py": 4
            },
            "is_test": true,
            "is_fix": true
        },
        "da8a5bb1895e5434695d9dc2d844119cd8f88524": {
            "datetime": "2021-10-21T19:38:39-07:00",
            "summary": "Disallow any Generics on mypy except in black_primer (#2556)",
            "message": "Disallow any Generics on mypy except in black_primer (#2556)\n\nOnly black_primer needs the disallowal - means we'll\r\nget better typing everywhere else.",
            "diff": {
                "src/black/__init__.py": 10,
                "src/black_primer/lib.py": 2,
                "tests/test_black.py": 4,
                "tests/test_primer.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "62ed5389fca51384721245ff1c2f1c62a13a04ff": {
            "datetime": "2021-10-21T20:59:48-07:00",
            "summary": "Remove some unneeded exceptions from mypy.ini (#2557)",
            "message": "Remove some unneeded exceptions from mypy.ini (#2557)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "26970742b76ddfd921fa36e4005738048477c952": {
            "datetime": "2021-10-27T07:36:10-07:00",
            "summary": "Refactor Jupyter magic handling (#2545)",
            "message": "Refactor Jupyter magic handling (#2545)\n\n",
            "diff": {
                "src/black/handle_ipynb_magics.py": 72
            },
            "is_test": false,
            "is_fix": false
        },
        "aedb4ff7f061b321ea5804bc4fc4943c52c6a786": {
            "datetime": "2021-10-27T07:37:20-07:00",
            "summary": "Print out line diff on test failure (#2552)",
            "message": "Print out line diff on test failure (#2552)\n\nIt currently prints both ASTs - this also\r\nadds the line diff, making it much easier to visualize\r\nthe changes as well. Not too verbose since it's only a diff.",
            "diff": {
                "tests/util.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "467efe15562e3bad88b1eb3bc11f76b5b9a68816": {
            "datetime": "2021-10-27T11:31:34-07:00",
            "summary": "Add --projects cli flag to black-primer (#2555)",
            "message": "Add --projects cli flag to black-primer (#2555)\n\n* Add --projects cli flag to black-primer\r\n\r\nMakes it possible to run a subset of projects on black primer\r\n\r\n* Refactor into click callback",
            "diff": {
                "src/black_primer/cli.py": 43,
                "src/black_primer/lib.py": 11,
                "tests/test_format.py": 2,
                "tests/test_primer.py": 51
            },
            "is_test": true,
            "is_fix": false
        },
        "5434407af7ba262f74d272c738006cbf1d0ab11a": {
            "datetime": "2021-10-28T10:35:37-07:00",
            "summary": "black-primer: Print summary after individual failures (#2570)",
            "message": "black-primer: Print summary after individual failures (#2570)\n\nIf the individual failures are verbose, it's useful to have\r\nthe summary at the end. Otherwise, it can be really difficult\r\nto figure out which projects have an issue.",
            "diff": {
                "src/black_primer/lib.py": 46,
                "tests/test_primer.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "cbf5401efff0524f7395c5fb81551de75b17c89e": {
            "datetime": "2021-10-30T11:50:45-04:00",
            "summary": "fix: allow tests to be run from (hopefully) any directory (GH-2574)",
            "message": "fix: allow tests to be run from (hopefully) any directory (GH-2574)\n\n* fix: allow tests to be run from the tests/ directory\r\n* fix: try fixing windows build with MarcoGorelli's suggestion\r\n* Windows hotfix + better respect test's spirit\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "tests/test_black.py": 11,
                "tests/test_ipynb.py": 49
            },
            "is_test": true,
            "is_fix": true
        },
        "92eeacc2e3ce917d6364ec06d891436f11536a1c": {
            "datetime": "2021-10-30T11:54:43-07:00",
            "summary": "Use STDIN project in test_projects to ensure it runs quickly (#2575)",
            "message": "Use STDIN project in test_projects to ensure it runs quickly (#2575)\n\nExisting test was actually running a full black-primer\r\nrun which could be slow. This goes from 8 seconds to\r\n0.4 seconds on my machine.\r\n\r\nNeeded to move to top level scope to leverage the caplog\r\nfeature of pytest in order to test that the command line\r\nwas parsing the bogus arguments and dumping to stderr.",
            "diff": {
                "tests/test_primer.py": 26
            },
            "is_test": true,
            "is_fix": false
        },
        "9afffacaa0e5ac911f9feacb916bc48473dcb117": {
            "datetime": "2021-10-30T15:35:55-07:00",
            "summary": "Address mypy errors on 3.10 w/ asyncio loop parameter (#2580)",
            "message": "Address mypy errors on 3.10 w/ asyncio loop parameter (#2580)\n\n",
            "diff": {
                "src/black/__init__.py": 5,
                "src/black/concurrency.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "b21c0c3d28d87bc944a1fdc979b30a0707b0df89": {
            "datetime": "2021-10-31T16:46:12-07:00",
            "summary": "Deprecate Python 2 formatting support (#2523)",
            "message": "Deprecate Python 2 formatting support (#2523)\n\n* Prepare for Python 2 depreciation\r\n\r\n- Use BlackRunner and .stdout in command line test\r\n\r\nSo the next commit won't break this test. This is in its own commit so\r\nwe can just revert the depreciation commit when dropping Python 2\r\nsupport completely.\r\n\r\n* Deprecate Python 2 formatting support",
            "diff": {
                "src/black/__init__.py": 17,
                "src/black/mode.py": 10,
                "src/blib2to3/pgen2/token.py": 3,
                "tests/test_black.py": 19
            },
            "is_test": true,
            "is_fix": false
        },
        "f80f49767cacafaeb20016d483b8315474504e6a": {
            "datetime": "2021-11-06T12:04:27-04:00",
            "summary": "Add a missing space in Python 2 deprecation (GH-2590)",
            "message": "Add a missing space in Python 2 deprecation (GH-2590)\n\n`DEPRECATION: Python 2 support will be removed in the first stable releaseexpected in January 2022` - > `DEPRECATION: Python 2 support will be removed in the first stable release expected in January 2022`",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0753d99519b0c90f0f9f280b73783b537900dc16": {
            "datetime": "2021-11-11T20:28:48-05:00",
            "summary": "Improve Python 2 only syntax detection (GH-2592)",
            "message": "Improve Python 2 only syntax detection (GH-2592)\n\n* Improve Python 2 only syntax detection\r\n\r\nFirst of all this fixes a mistake I made in Python 2 deprecation PR\r\nusing token.* to check for print/exec statements. Turns out that\r\nfor nodes with a type value higher than 256 its numeric type isn't\r\nguaranteed to be constant. Using syms.* instead fixes this.\r\n\r\nAlso add support for the following cases:\r\n\r\n    print \"hello, world!\"\r\n\r\n    exec \"print('hello, world!')\"\r\n\r\n    def set_position((x, y), value):\r\n        pass\r\n\r\n    try:\r\n        pass\r\n    except Exception, err:\r\n        pass\r\n\r\n    raise RuntimeError, \"I feel like crashing today :p\"\r\n\r\n    `wow_these_really_did_exist`\r\n\r\n    10L\r\n\r\n* Add octal support, more test cases, and fixup long ints\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 36,
                "src/black/mode.py": 12,
                "src/blib2to3/pgen2/token.py": 3,
                "tests/data/python2_detection.py": 90,
                "tests/test_black.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "1e0ec543ff3a7de715c8ee3359c8defb2c2c0e0d": {
            "datetime": "2021-11-13T19:15:31-08:00",
            "summary": "black/parser: partial support for pattern matching (#2586)",
            "message": "black/parser: partial support for pattern matching (#2586)\n\nPartial implementation for #2242. Only works when explicitly stated -t py310.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/linegen.py": 6,
                "src/black/mode.py": 5,
                "src/black/parsing.py": 3,
                "src/blib2to3/pgen2/driver.py": 81,
                "src/blib2to3/pgen2/grammar.py": 2,
                "src/blib2to3/pgen2/parse.py": 135,
                "src/blib2to3/pgen2/pgen.py": 11,
                "src/blib2to3/pygram.py": 19,
                "tests/data/parenthesized_context_managers.py": 21,
                "tests/data/pattern_matching_complex.py": 144,
                "tests/data/pattern_matching_simple.py": 92,
                "tests/test_format.py": 12
            },
            "is_test": true,
            "is_fix": false
        },
        "eb9d0396cd51065c975e366f06dfea60221a2d03": {
            "datetime": "2021-11-13T19:46:15-08:00",
            "summary": "Allow install under pypy (#2559)",
            "message": "Allow install under pypy (#2559)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "setup.py": 2,
                "src/black/cache.py": 2,
                "src/black/parsing.py": 25,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "147d075a4c702ffd6822100dc1f7a6384e52fa57": {
            "datetime": "2021-11-14T06:04:31-08:00",
            "summary": "black/parser: support as-exprs within call args (#2608)",
            "message": "black/parser: support as-exprs within call args (#2608)\n\n",
            "diff": {
                "tests/data/pattern_matching_extras.py": 9,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "3cb010ec8ec02392dee5073b74e6eff80030c5f0": {
            "datetime": "2021-11-14T06:37:06-08:00",
            "summary": "Declare support for Python 3.10 (#2562)",
            "message": "Declare support for Python 3.10 (#2562)\n\n",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "d7b091e762121ee38ca313ab25006abf4723d203": {
            "datetime": "2021-11-15T18:38:40-08:00",
            "summary": "black/parser: optimize deepcopying nodes (#2611)",
            "message": "black/parser: optimize deepcopying nodes (#2611)\n\nThe implementation of the new backtracking logic depends heavily on deepcopying the current state of the parser before seeing one of the new keywords, which by default is an very expensive operations. On my system, formatting these 3 files takes 1.3 seconds.\r\n\r\n```\r\n $ touch tests/data/pattern_matching_*; time python -m black -tpy310 tests/data/pattern_matching_*             19ms\r\nAll done! \u2728 \ud83c\udf70 \u2728\r\n3 files left unchanged.\r\npython -m black -tpy310 tests/data/pattern_matching_*  2,09s user 0,04s system 157% cpu 1,357 total\r\n```\r\n\r\nwhich can be optimized 3X if we integrate the existing copying logic (`clone`) to the deepcopy system;\r\n```\r\n $ touch tests/data/pattern_matching_*; time python -m black -tpy310 tests/data/pattern_matching_*              1ms\r\nAll done! \u2728 \ud83c\udf70 \u2728\r\n3 files left unchanged.\r\npython -m black -tpy310 tests/data/pattern_matching_*  0,66s user 0,02s system 147% cpu 0,464 total\r\n```\r\n\r\nThis still might have some potential, but that would be way trickier than this initial patch.\r\n\r\n",
            "diff": {
                "src/blib2to3/pytree.py": 5,
                "tests/data/pattern_matching_extras.py": 20
            },
            "is_test": false,
            "is_fix": false
        },
        "117891878e5be4d6b771ae5de299e51b679cea27": {
            "datetime": "2021-11-15T20:24:16-08:00",
            "summary": "Implementing mypyc support pt. 2  (#2431)",
            "message": "Implementing mypyc support pt. 2  (#2431)\n\n",
            "diff": {
                "setup.py": 49,
                "src/black/__init__.py": 23,
                "src/black/brackets.py": 2,
                "src/black/comments.py": 15,
                "src/black/files.py": 4,
                "src/black/handle_ipynb_magics.py": 13,
                "src/black/linegen.py": 25,
                "src/black/mode.py": 3,
                "src/black/nodes.py": 37,
                "src/black/output.py": 3,
                "src/black/parsing.py": 26,
                "src/black/strings.py": 30,
                "src/black/trans.py": 59,
                "src/black_primer/cli.py": 3,
                "src/blib2to3/pgen2/driver.py": 23,
                "src/blib2to3/pgen2/parse.py": 80,
                "src/blib2to3/pgen2/tokenize.py": 33,
                "src/blib2to3/pytree.py": 15,
                "tests/test_black.py": 22
            },
            "is_test": true,
            "is_fix": false
        },
        "0d1b957d400e2884ad312b4c113ee215effb8256": {
            "datetime": "2021-11-15T21:07:25-08:00",
            "summary": "Fix 3.10's supported features (#2614)",
            "message": "Fix 3.10's supported features (#2614)\n\n",
            "diff": {
                "src/black/mode.py": 9
            },
            "is_test": false,
            "is_fix": false
        },
        "ecf8c74481bef13e7a6ca68a953ae470de0d3890": {
            "datetime": "2021-11-17T19:46:28-08:00",
            "summary": "Bump regex dependency to 2021.4.4 to fix import of Pattern class (#2621)",
            "message": "Bump regex dependency to 2021.4.4 to fix import of Pattern class (#2621)\n\nFixes #2620\r\n\r\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "9a73bb86db59de1e12426fec81dcdb7f3bb9be7b": {
            "datetime": "2021-11-18T22:20:44-05:00",
            "summary": "Fix mypyc compat issue w/ AST safety check (GH-2628)",
            "message": "Fix mypyc compat issue w/ AST safety check (GH-2628)\n\nI can't wait for when we drop Python 2 support FWIW :)",
            "diff": {
                "src/black/parsing.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "05954c0950637aa1039d0ac86a4a7e832cbffd9f": {
            "datetime": "2021-11-20T14:25:30-05:00",
            "summary": "Fix process pool fallback on Python 3.10 (GH-2631)",
            "message": "Fix process pool fallback on Python 3.10 (GH-2631)\n\nIn Python 3.10 the exception generated by creating a process pool on\r\na Python build that doesn't support this is now `NotImplementedError`\r\n\r\nCommit history before merge:\r\n\r\n* Fix process pool fallback on Python 3.10\r\n* Update CHANGES.md\r\n* Update CHANGES.md\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "dfa45cec9e4991823b06fa655e3e444391fadb65": {
            "datetime": "2021-11-24T20:21:36-05:00",
            "summary": "grammar: accept open sequences on match subject (GH-2639)",
            "message": "grammar: accept open sequences on match subject (GH-2639)\n\n* grammar: accept open sequences on match subject\r\n* give an example about the fixed match subject",
            "diff": {
                "tests/data/pattern_matching_extras.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "17e42cb94b494f0e5d7c80ee842f578a5a3cefcc": {
            "datetime": "2021-11-25T18:34:19-08:00",
            "summary": "fix regex (#2643)",
            "message": "fix regex (#2643)\n\n",
            "diff": {
                "tests/test_black.py": 4
            },
            "is_test": true,
            "is_fix": true
        },
        "e0253080b0d2b61bf2105a2f5afdf5173e33d0e5": {
            "datetime": "2021-11-26T08:14:57-08:00",
            "summary": " Assignment to env var in Jupyter Notebook doesn't round-trip (#2642)",
            "message": " Assignment to env var in Jupyter Notebook doesn't round-trip (#2642)\n\ncloses #2641\r\n\r\n",
            "diff": {
                "src/black/handle_ipynb_magics.py": 27,
                "tests/test_ipynb.py": 4
            },
            "is_test": true,
            "is_fix": false
        },
        "72a84d4099f2930979bd1ca1d9e441140b0a304d": {
            "datetime": "2021-11-26T18:53:16-08:00",
            "summary": "add missing f-string (#2650)",
            "message": "add missing f-string (#2650)\n\n",
            "diff": {
                "src/black/handle_ipynb_magics.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "a18ee4018f855007bf4a23027a8d6478e56a36bf": {
            "datetime": "2021-11-28T18:20:52-08:00",
            "summary": "add more flake8 lints (#2653)",
            "message": "add more flake8 lints (#2653)\n\n",
            "diff": {
                "src/black/__init__.py": 2,
                "src/black/output.py": 4,
                "tests/optional.py": 2,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "a066a2bc8b1b7d87b2029f5ebd684582231b0bbc": {
            "datetime": "2021-11-29T15:07:35-08:00",
            "summary": "Return `NothingChanged` if non-Python cell magic is detected, to avoid tokenize error (#2630)",
            "message": "Return `NothingChanged` if non-Python cell magic is detected, to avoid tokenize error (#2630)\n\nFixes https://github.com/psf/black/issues/2627 , a non-Python cell magic such as `%%writeline` can legitimately contain \"incorrect\" indentation, however this causes `tokenize-rt` to return an error. To avoid this, `validate_cell` should early detect cell magics (just like it detects `TransformerManager` transformations).\r\n\r\nTest added too, in the shape of a \"badly indented\" `%%writefile` within `test_non_python_magics`.\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Marco Edward Gorelli <marcogorelli@protonmail.com>",
            "diff": {
                "src/black/__init__.py": 7,
                "src/black/handle_ipynb_magics.py": 23,
                "tests/test_ipynb.py": 5
            },
            "is_test": true,
            "is_fix": false
        },
        "8cdac18a04b64376e87c716cb9c2eafd182e63ff": {
            "datetime": "2021-11-30T07:52:25-08:00",
            "summary": "Allow top-level starred expression on match (#2659)",
            "message": "Allow top-level starred expression on match (#2659)\n\nFixes #2647\r\n\r\n",
            "diff": {
                "tests/data/pattern_matching_extras.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "b336b390d0613348e6208b392e41e5512b0a85be": {
            "datetime": "2021-11-30T15:56:38-05:00",
            "summary": "Fix line generation for `match match:` / `case case:` (GH-2661)",
            "message": "Fix line generation for `match match:` / `case case:` (GH-2661)\n\n",
            "diff": {
                "src/black/linegen.py": 14,
                "tests/data/pattern_matching_extras.py": 35
            },
            "is_test": false,
            "is_fix": false
        },
        "5e2bb528e09df368ed7dea6b7fb9c53e799a569f": {
            "datetime": "2021-11-30T18:01:36-08:00",
            "summary": "Reduce usage of regex (#2644)",
            "message": "Reduce usage of regex (#2644)\n\nThis removes all but one usage of the `regex` dependency. Tricky bits included:\r\n- A bug in test_black.py where we were incorrectly using a character range. Fix also submitted separately in #2643.\r\n- `tokenize.py` was the original use case for regex (#1047). The important bit is that we rely on `\\w` to match anything valid in an identifier, and `re` fails to match a few characters as part of identifiers. My solution is to instead match all characters *except* those we know to mean something else in Python: whitespace and ASCII punctuation. This will make Black able to parse some invalid Python programs, like those that contain non-ASCII punctuation in the place of an identifier, but that seems fine to me.\r\n- One import of `regex` remains, in `trans.py`. We use a recursive regex to parse f-strings, and only `regex` supports that. I haven't thought of a better fix there (except maybe writing a manual parser), so I'm leaving that for now.\r\n\r\nMy goal is to remove the `regex` dependency to reduce the risk of breakage due to dependencies and make life easier for users on platforms without wheels.",
            "diff": {
                "src/black/__init__.py": 2,
                "src/black/comments.py": 2,
                "src/black/strings.py": 4,
                "src/black/trans.py": 2,
                "src/blib2to3/pgen2/conv.py": 2,
                "src/blib2to3/pgen2/tokenize.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "0f7cf9187f9c9644565570a67a66f690f8f2bfbb": {
            "datetime": "2021-11-30T18:39:39-08:00",
            "summary": "fix error message for match (#2649)",
            "message": "fix error message for match (#2649)\n\nFixes #2648.\r\n\r\nCo-authored-by: Batuhan Taskaya <isidentical@gmail.com>",
            "diff": {
                "src/black/parsing.py": 6,
                "tests/data/pattern_matching_invalid.py": 18,
                "tests/test_format.py": 9
            },
            "is_test": true,
            "is_fix": true
        },
        "f1813e31b6deed0901c8a7fb1f102b9af53de351": {
            "datetime": "2021-12-01T09:52:24-08:00",
            "summary": "Fix determination of f-string expression spans (#2654)",
            "message": "Fix determination of f-string expression spans (#2654)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/trans.py": 72,
                "tests/test_trans.py": 50
            },
            "is_test": true,
            "is_fix": true
        },
        "b0c2bcc9537d238c8a580294ecbc41de465d7f55": {
            "datetime": "2021-12-01T18:05:59-05:00",
            "summary": "Treat functions/classes in blocks as if they're nested (GH-2472)",
            "message": "Treat functions/classes in blocks as if they're nested (GH-2472)\n\n* Treat functions/classes in blocks as if they're nested\r\n\r\nOne curveball is that we still want two preceding newlines before blocks\r\nthat are probably logically disconnected. In other words:\r\n\r\n    if condition:\r\n\r\n        def foo():\r\n            return \"hi\"\r\n                             # <- aside: this is the goal of this commit\r\n    else:\r\n\r\n        def foo():\r\n            return \"cya\"\r\n                             # <- the two newlines spacing here should stay\r\n                             #    since this probably isn't related\r\n    with open(\"db.json\", encoding=\"utf-8\") as f:\r\n        data = f.read()\r\n\r\nUnfortunately that means we have to special case specific clause types\r\ninstead of just being able to just for a colon leaf. The hack used here\r\nis to check whether we're adding preceding newlines for a standalone or\r\ndependent clause. \"Standalone\" being a clause that doesn't need another\r\nclause to be valid (eg. if) and vice versa.\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/lines.py": 24,
                "tests/data/function2.py": 63
            },
            "is_test": false,
            "is_fix": false
        },
        "20d7ae0676be4931d0b2e6d4a6a0877070264d13": {
            "datetime": "2021-12-02T09:58:22-08:00",
            "summary": "Ensure match/case are recognized as statements (#2665)",
            "message": "Ensure match/case are recognized as statements (#2665)\n\n",
            "diff": {
                "src/black/nodes.py": 2,
                "tests/data/pattern_matching_style.py": 27,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "bd9d52b52d58df60bffe164309a48cb61ac8d3b7": {
            "datetime": "2021-12-02T17:35:02-05:00",
            "summary": "Remove regex dependency (GH-2663)",
            "message": "Remove regex dependency (GH-2663)\n\nWe were no longer using it since GH-2644 and GH-2654. This should hopefully\r\nmake using Black easier to use as there's one less compiled dependency.\r\nThe core team also doesn't have to deal with the surprisingly frequent fires\r\nthe regex packaging setup goes through.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "setup.py": 1,
                "src/black/trans.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "136930fccb99320865622e12ffc21bdd45fd7501": {
            "datetime": "2021-12-03T06:49:33-08:00",
            "summary": "Make star-expression spacing consistent in match/case (#2667)",
            "message": "Make star-expression spacing consistent in match/case (#2667)\n\n",
            "diff": {
                "src/black/nodes.py": 2,
                "tests/data/pattern_matching_extras.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "f52cb0fe3775829245acfeae191e8d63120c8416": {
            "datetime": "2021-12-04T15:21:26-05:00",
            "summary": "Don't let TokenError bubble up from lib2to3_parse (GH-2343)",
            "message": "Don't let TokenError bubble up from lib2to3_parse (GH-2343)\n\nerror: cannot format <string>: ('EOF in multi-line statement', (2, 0))\r\n   \r\n \u25b2 before \u25bc after\r\n\r\nerror: cannot format <string>: Cannot parse: 2:0: EOF in multi-line statement\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/parsing.py": 7,
                "tests/test_black.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "dc8cdda8fdd6941103240ae3279034d2acdc69bc": {
            "datetime": "2021-12-04T15:30:23-08:00",
            "summary": "tell users to use -t py310 (#2668)",
            "message": "tell users to use -t py310 (#2668)\n\n",
            "diff": {
                "src/black/parsing.py": 24,
                "tests/test_format.py": 9
            },
            "is_test": true,
            "is_fix": false
        },
        "d9eee31ec81c42d9953aee0d7f0adaf211519a10": {
            "datetime": "2021-12-05T08:53:58-08:00",
            "summary": "blib2to3 can raise TokenError and IndentationError too (#2671)",
            "message": "blib2to3 can raise TokenError and IndentationError too (#2671)\n\n",
            "diff": {
                "src/black/parsing.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "28ab82aab013978b7ed91bda816de3d41385f260": {
            "datetime": "2021-12-05T13:03:48-08:00",
            "summary": "perf: drop the initial stack copy (#2670)",
            "message": "perf: drop the initial stack copy (#2670)\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/blib2to3/pgen2/parse.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "e7ddf524b056d2bc42ee6b2b5c3314e0dd5d95fb": {
            "datetime": "2021-12-07T22:13:05-05:00",
            "summary": "Show details when a regex fails to compile (GH-2678)",
            "message": "Show details when a regex fails to compile (GH-2678)\n\n",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "1c6b3a3a6fbc50b651d4ac34247903041d3f6329": {
            "datetime": "2021-12-12T16:10:22-05:00",
            "summary": "Support as-expressions on dict items (GH-2686)",
            "message": "Support as-expressions on dict items (GH-2686)\n\n",
            "diff": {
                "tests/data/pattern_matching_extras.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "ab8651371075ced6f58f519e48fc4e8ac529e8ce": {
            "datetime": "2021-12-14T15:22:56-08:00",
            "summary": "`from __future__ import annotations` now implies 3.7+ (#2690)",
            "message": "`from __future__ import annotations` now implies 3.7+ (#2690)\n\n",
            "diff": {
                "src/black/__init__.py": 22,
                "src/black/mode.py": 19,
                "tests/test_black.py": 18
            },
            "is_test": true,
            "is_fix": false
        },
        "3083f4470bba6838d0ad59e9748f45a7621623b5": {
            "datetime": "2021-12-14T19:32:14-05:00",
            "summary": "Don't colour diff headers white, only bold (GH-2691)",
            "message": "Don't colour diff headers white, only bold (GH-2691)\n\nSo people with light themed terminals can still read 'em.\r\n",
            "diff": {
                "src/black/output.py": 2,
                "tests/test_black.py": 4
            },
            "is_test": true,
            "is_fix": false
        },
        "3501cefb09eb8448bd82287840c9093f10c25299": {
            "datetime": "2021-12-14T18:21:28-08:00",
            "summary": "Include underlying error when AST safety check parsing fails (#2693)",
            "message": "Include underlying error when AST safety check parsing fails (#2693)\n\n",
            "diff": {
                "src/black/__init__.py": 2,
                "tests/test_black.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "dc90d4951f66ac665582159537b902017d9a0361": {
            "datetime": "2021-12-15T16:17:33-08:00",
            "summary": "Unpacking on flow constructs (return/yield) now implies 3.8+ (#2700)",
            "message": "Unpacking on flow constructs (return/yield) now implies 3.8+ (#2700)\n\n",
            "diff": {
                "src/black/__init__.py": 8,
                "src/black/mode.py": 4,
                "tests/test_black.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "b97ec62368ac57b29a0ccd5fc68ba875418eb8cc": {
            "datetime": "2021-12-17T13:43:14-08:00",
            "summary": "Imply 3.8+ when annotated assigments used with unparenthesized tuples (#2708)",
            "message": "Imply 3.8+ when annotated assigments used with unparenthesized tuples (#2708)\n\n",
            "diff": {
                "src/black/__init__.py": 7,
                "src/black/mode.py": 4,
                "tests/test_black.py": 12
            },
            "is_test": true,
            "is_fix": false
        },
        "389e9c23a9e622ee6090d902cc5f56c5f76cdee9": {
            "datetime": "2021-12-21T08:03:07-08:00",
            "summary": "Disable universal newlines when reading TOML (#2408)",
            "message": "Disable universal newlines when reading TOML (#2408)\n\n",
            "diff": {
                "setup.py": 2,
                "src/black/files.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "7c94ed61a55f8ae0c60737cbc6cfee3b5066ce11": {
            "datetime": "2021-12-21T11:20:55-05:00",
            "summary": "Define is_name_token (and friends) to resolve some `type: ignore`s (GH-2714)",
            "message": "Define is_name_token (and friends) to resolve some `type: ignore`s (GH-2714)\n\nGets rid of a few # type: ignores by using TypeGuard.",
            "diff": {
                "src/black/__init__.py": 5,
                "src/black/linegen.py": 13,
                "src/black/nodes.py": 28
            },
            "is_test": false,
            "is_fix": false
        },
        "3fafd806b30cbff5788525f050a635639d97b11c": {
            "datetime": "2021-12-21T10:16:55-08:00",
            "summary": "Support multiple top-level as-expressions on case statements (#2716)",
            "message": "Support multiple top-level as-expressions on case statements (#2716)\n\n",
            "diff": {
                "tests/data/pattern_matching_extras.py": 11
            },
            "is_test": false,
            "is_fix": false
        },
        "ced2d656794568517ba9aa28f781f9151d89de54": {
            "datetime": "2021-12-24T21:25:03-05:00",
            "summary": "remove all type: ignores in src/black (GH-2720)",
            "message": "remove all type: ignores in src/black (GH-2720)\n\nExcet\r\n;t",
            "diff": {
                "src/black/linegen.py": 3,
                "src/black/parsing.py": 24
            },
            "is_test": false,
            "is_fix": false
        },
        "092959ff1f9253347b01eeb2d6d72e15bad7e25a": {
            "datetime": "2021-12-24T22:28:43-05:00",
            "summary": "Support pytest 7 by fixing broken imports (GH-2705)",
            "message": "Support pytest 7 by fixing broken imports (GH-2705)\n\nThe tmp_path related changes are not necessary to make pytest 7 work,\r\nbut it feels more complete this way.",
            "diff": {
                "tests/optional.py": 11,
                "tests/test_ipynb.py": 22,
                "tests/test_no_ipynb.py": 8
            },
            "is_test": true,
            "is_fix": false
        },
        "b8df7e4b10bca2d7e478e224502975ec8f220e21": {
            "datetime": "2021-12-30T16:17:11-05:00",
            "summary": "Drop upper version bounds on dependencies (GH-2718)",
            "message": "Drop upper version bounds on dependencies (GH-2718)\n\nThey mostly cause unnecessary trouble.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "setup.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "05e1fbf27d93df36b09c560791ad46c6ce3eb518": {
            "datetime": "2022-01-07T18:38:03+02:00",
            "summary": "Stubs: preserve blank line between attributes and methods (#2736)",
            "message": "Stubs: preserve blank line between attributes and methods (#2736)\n\n",
            "diff": {
                "src/black/lines.py": 21
            },
            "is_test": false,
            "is_fix": false
        },
        "e64949ee69e2a7e7f1d96331f50e801c0979a866": {
            "datetime": "2022-01-07T18:51:36+02:00",
            "summary": "Fix call patterns that contain as-expression on the kwargs (#2749)",
            "message": "Fix call patterns that contain as-expression on the kwargs (#2749)\n\n",
            "diff": {
                "tests/data/pattern_matching_extras.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "e401b6bb1e1c0ed534bba59d9dc908caf7ba898c": {
            "datetime": "2022-01-10T04:16:30-08:00",
            "summary": "Remove Python 2 support (#2740)",
            "message": "Remove Python 2 support (#2740)\n\n*blib2to3's support was left untouched because: 1) I don't want to touch\r\nparsing machinery, and 2) it'll allow us to provide a more useful error\r\nmessage if someone does try to format Python 2 code.",
            "diff": {
                "action/main.py": 2,
                "setup.py": 1,
                "src/black/__init__.py": 48,
                "src/black/linegen.py": 9,
                "src/black/mode.py": 42,
                "src/black/nodes.py": 10,
                "src/black/numerics.py": 15,
                "src/black/parsing.py": 82,
                "src/black/strings.py": 16,
                "src/blackd/__init__.py": 6,
                "tests/data/numeric_literals_py2.py": 16,
                "tests/data/python2.py": 33,
                "tests/data/python2_print_function.py": 16,
                "tests/data/python2_unicode_literals.py": 20,
                "tests/test_black.py": 60,
                "tests/test_blackd.py": 7,
                "tests/test_format.py": 25
            },
            "is_test": true,
            "is_fix": false
        },
        "521d1b8129c2d83b4ab49270fe7473802259c2a2": {
            "datetime": "2022-01-10T05:58:35-08:00",
            "summary": "Enhance `--verbose` (#2526)",
            "message": "Enhance `--verbose` (#2526)\n\nBlack would now echo the location that it determined as the root path\r\nfor the project if `--verbose` is enabled by the user, according to\r\nwhich it chooses the SRC paths, i.e. the absolute path of the project\r\nis `{root}/{src}`.\r\n\r\nCloses #1880\r\n",
            "diff": {
                "src/black/__init__.py": 42,
                "src/black/files.py": 28,
                "tests/test_black.py": 34
            },
            "is_test": true,
            "is_fix": false
        },
        "3e731527e4418b0b6d9791d6e32caee9227ba69d": {
            "datetime": "2022-01-10T10:22:00-08:00",
            "summary": "Speed up new backtracking parser (#2728)",
            "message": "Speed up new backtracking parser (#2728)\n\n",
            "diff": {
                "src/blib2to3/pgen2/parse.py": 95,
                "tests/data/pattern_matching_generic.py": 107,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "0f26a0369efc7305a1a0120355f78d85b3030e56": {
            "datetime": "2022-01-10T12:22:07-08:00",
            "summary": "Fix handling of standalone match/case with newlines/comments (#2760)",
            "message": "Fix handling of standalone match/case with newlines/comments (#2760)\n\nResolves #2759\r\n\r\n",
            "diff": {
                "src/blib2to3/pgen2/parse.py": 4,
                "tests/data/pattern_matching_style.py": 68
            },
            "is_test": false,
            "is_fix": false
        },
        "799f76f537f72ade97b8e6637c59fee49e05a4ab": {
            "datetime": "2022-01-13T09:59:43-08:00",
            "summary": "Normalise string prefix order (#2297)",
            "message": "Normalise string prefix order (#2297)\n\nCloses #2171",
            "diff": {
                "src/black/strings.py": 4,
                "src/blib2to3/pgen2/tokenize.py": 2,
                "tests/data/string_prefixes.py": 30
            },
            "is_test": false,
            "is_fix": false
        },
        "7a2956811534d7d20128ba6e911721749052b627": {
            "datetime": "2022-01-13T18:01:44-08:00",
            "summary": "Don't make redundant copies of the DFA (#2763)",
            "message": "Don't make redundant copies of the DFA (#2763)\n\n",
            "diff": {
                "src/blib2to3/pgen2/parse.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "5543d1b55a2a485f2aaf32156ea97f4728264137": {
            "datetime": "2022-01-13T18:31:08-08:00",
            "summary": "Added decent coloring (#2712)",
            "message": "Added decent coloring (#2712)\n\n",
            "diff": {
                "src/black/__init__.py": 2,
                "src/black/report.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "565f9c92b79a72deb7faec7503749979c791b6e1": {
            "datetime": "2022-01-13T18:50:02-08:00",
            "summary": "CI: add diff-shades integration (#2725)",
            "message": "CI: add diff-shades integration (#2725)\n\nHopefully this makes it much easier to gauge the impacts of future\r\nchanges!\r\n",
            "diff": {
                "scripts/diff_shades_gha_helper.py": 272
            },
            "is_test": false,
            "is_fix": false
        },
        "5fe6d48fcd687a972278048d3bfeec9e2040ed64": {
            "datetime": "2022-01-14T23:24:55-05:00",
            "summary": "Dont require typing-extensions in 3.10 (GH-2772)",
            "message": "Dont require typing-extensions in 3.10 (GH-2772)\n\n3.10 ships with TypeGuard which is the newest feature we need.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "setup.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "33e3bb1e4e326713f85749705179da2e31520670": {
            "datetime": "2022-01-15T14:19:37-08:00",
            "summary": "[trivial] Use proper test cases on `unittest` (#2775)",
            "message": "[trivial] Use proper test cases on `unittest` (#2775)\n\n",
            "diff": {
                "tests/test_black.py": 4,
                "tests/test_primer.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "8c22d232b56104376a12d1e68eaf216d04979830": {
            "datetime": "2022-01-19T17:34:52-08:00",
            "summary": "Create --preview CLI flag (#2752)",
            "message": "Create --preview CLI flag (#2752)\n\n",
            "diff": {
                "src/black/__init__.py": 10,
                "src/black/mode.py": 15,
                "tests/test_format.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "9bd4134f3138448eb92af7031d994b2cec7d08ad": {
            "datetime": "2022-01-19T19:05:58-08:00",
            "summary": "Fix and speedup diff-shades integration  (#2773)",
            "message": "Fix and speedup diff-shades integration  (#2773)\n\n",
            "diff": {
                "scripts/diff_shades_gha_helper.py": 54,
                "src/black/parsing.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "6e97c5f47cbec72c72c27aefb206589dd84707a7": {
            "datetime": "2022-01-20T15:42:07-08:00",
            "summary": "Deprecate ESP and move the functionality under --preview (#2789)",
            "message": "Deprecate ESP and move the functionality under --preview (#2789)\n\n",
            "diff": {
                "src/black/__init__.py": 5,
                "src/black/linegen.py": 7,
                "src/black/mode.py": 20,
                "tests/test_black.py": 7,
                "tests/test_format.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "e66e0f8ff046e532e8129c78894ca1c4095c5c8b": {
            "datetime": "2022-01-20T15:48:49-08:00",
            "summary": "Hint at likely cause of ast parsing failure in error message (#2786)",
            "message": "Hint at likely cause of ast parsing failure in error message (#2786)\n\nCo-authored-by: Batuhan Taskaya <isidentical@gmail.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/__init__.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "4ea75cd49521ed7fd8384e7a739e1abb1b6de46a": {
            "datetime": "2022-01-20T16:45:28-08:00",
            "summary": "Add support for custom python cell magics (#2744)",
            "message": "Add support for custom python cell magics (#2744)\n\nFixes #2742.\r\n\r\nThis PR adds the ability to configure additional python cell magics. This\r\nwill allow formatting cells in Jupyter Notebooks that are using custom (python)\r\nmagics.\r\n\r\n",
            "diff": {
                "src/black/__init__.py": 22,
                "src/black/mode.py": 3,
                "tests/test_black.py": 1,
                "tests/test_ipynb.py": 66
            },
            "is_test": true,
            "is_fix": false
        },
        "e0c572833a3e2b42cd45237c26a67c6f5be4b09d": {
            "datetime": "2022-01-21T08:54:57-08:00",
            "summary": "Set `click` lower bound to `8.0.0` (#2791)",
            "message": "Set `click` lower bound to `8.0.0` (#2791)\n\nCloses #2774",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "d24bc4364c6ef2337875be1a5b4e0851adaaf0f6": {
            "datetime": "2022-01-21T15:00:13-08:00",
            "summary": "Switch to Furo (#2793)",
            "message": "Switch to Furo (#2793)\n\n- Add Furo dependency to docs/requirements.txt\r\n- Drop a fair bit of theme configuration\r\n- Fix the toctree declarations in index.rst\r\n- Move stuff around as Furo isn't 100% compatible with Alabaster\r\n\r\nFuro was chosen as it provides excellent mobile support, user\r\ncontrollable light/dark theming, and is overall easier to read",
            "diff": {
                "docs/conf.py": 25
            },
            "is_test": false,
            "is_fix": false
        },
        "10677baa40f818ca06c6a9d5efa0dca052865bfb": {
            "datetime": "2022-01-21T22:00:33-08:00",
            "summary": "Allow setting custom cache directory on all platforms (#2739)",
            "message": "Allow setting custom cache directory on all platforms (#2739)\n\nFixes #2506\r\n\r\n``XDG_CACHE_HOME`` does not work on Windows. To allow for users to set a custom cache directory on all systems I added a new environment variable ``BLACK_CACHE_DIR`` to set the cache directory. The default remains the same so users will only notice a change if that environment variable is set.\r\n\r\nThe specific use case I have for this is I need to run black on in different processes at the same time. There is a race condition with the cache pickle file that made this rather difficult. A custom cache directory will remove the race condition.\r\n\r\nI created ``get_cache_dir`` function in order to test the logic. This is only used to set the ``CACHE_DIR`` constant.\r\n",
            "diff": {
                "src/black/cache.py": 18,
                "tests/test_black.py": 29
            },
            "is_test": true,
            "is_fix": false
        },
        "811de5f36bb1bb2bc7e14c186cf1af6badb77475": {
            "datetime": "2022-01-22T07:29:38-08:00",
            "summary": "Refactor logic for stub empty lines (#2796)",
            "message": "Refactor logic for stub empty lines (#2796)\n\nThis PR is intended to have no change to semantics.\r\n\r\nThis is in preparation for #2784 which will likely introduce more logic\r\nthat depends on `current_line.depth`.\r\n\r\nInlining the subtraction gets rid of offsetting and makes it much easier\r\nto see what the result will be.\r\n\r\n",
            "diff": {
                "src/black/lines.py": 21
            },
            "is_test": false,
            "is_fix": false
        },
        "022f89625f9bb33ab55c82c45ec0eb8512623fd3": {
            "datetime": "2022-01-22T12:05:26-08:00",
            "summary": "Enable pattern matching by default (#2758)",
            "message": "Enable pattern matching by default (#2758)\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/parsing.py": 28,
                "src/blib2to3/pgen2/grammar.py": 2,
                "src/blib2to3/pygram.py": 5,
                "tests/test_format.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "6e3677f3f0c0542f858f7fc06d20cca5fab59348": {
            "datetime": "2022-01-23T08:49:11-08:00",
            "summary": "Allow blackd to be run as a package (#2800)",
            "message": "Allow blackd to be run as a package (#2800)\n\n",
            "diff": {
                "src/blackd/__main__.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "3905173cb32922b580bad184e724586f359c8c7e": {
            "datetime": "2022-01-23T12:34:29-08:00",
            "summary": "Use `magic_trailing_comma` and `preview` for `FileMode` in `fuzz` (#2802)",
            "message": "Use `magic_trailing_comma` and `preview` for `FileMode` in `fuzz` (#2802)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "fuzz.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "73cb6e7734370108742d992d4fe1fa2829f100fd": {
            "datetime": "2022-01-24T07:35:56-08:00",
            "summary": "Make SRC or code mandatory and mutually exclusive (#2360) (#2804)",
            "message": "Make SRC or code mandatory and mutually exclusive (#2360) (#2804)\n\nCloses #2360: I'd like to make passing SRC or `--code` mandatory and the arguments mutually exclusive. This will change our (partially already broken) promises of CLI behavior, but I'll comment below.\r\n",
            "diff": {
                "src/black/__init__.py": 12,
                "tests/test_black.py": 20
            },
            "is_test": true,
            "is_fix": false
        },
        "6417c99bfdbdc057e4a10aeff9967a751f4f85e9": {
            "datetime": "2022-01-24T19:13:34-08:00",
            "summary": "Hug power operators if its operands are \"simple\" (#2726)",
            "message": "Hug power operators if its operands are \"simple\" (#2726)\n\nSince power operators almost always have the highest binding power in expressions, it's often more readable to hug it with its operands. The main exception to this is when its operands are non-trivial in which case the power operator will not hug, the rule for this is the following:\r\n\r\n> For power ops, an operand is considered \"simple\" if it's only a NAME, numeric CONSTANT, or attribute access (chained attribute access is allowed), with or without a preceding unary operator. \r\n\r\nFixes GH-538.\r\nCloses GH-2095.\r\n\r\ndiff-shades results: https://gist.github.com/ichard26/ca6c6ad4bd1de5152d95418c8645354b\r\n\r\nCo-authored-by: Diego <dpalma@evernote.com>\r\nCo-authored-by: Felix Hild\u00e9n <felix.hilden@gmail.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/linegen.py": 7,
                "src/black/trans.py": 86,
                "tests/data/expression.py": 30,
                "tests/data/pep_572.py": 2,
                "tests/data/pep_572_py39.py": 2,
                "tests/data/power_op_spacing.py": 103,
                "tests/data/slices.py": 2,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "32dd9ecb2e9dec8b29c07726d5713ed5b4c36547": {
            "datetime": "2022-01-25T15:58:58-08:00",
            "summary": "properly run ourselves twice (#2807)",
            "message": "properly run ourselves twice (#2807)\n\nThe previous run-twice logic only affected the stability checks but not the output. Now, we actually output the twice-formatted code.\r\n\r\n",
            "diff": {
                "src/black/__init__.py": 29,
                "tests/data/trailing_comma_optional_parens1.py": 12,
                "tests/data/trailing_comma_optional_parens2.py": 14,
                "tests/data/trailing_comma_optional_parens3.py": 16,
                "tests/test_black.py": 39,
                "tests/test_format.py": 3
            },
            "is_test": true,
            "is_fix": false
        },
        "889a8d5dd27a73aa780e989a850bbdaaa9946a13": {
            "datetime": "2022-01-26T16:47:36-08:00",
            "summary": "Fix crash on some power hugging cases (#2806)",
            "message": "Fix crash on some power hugging cases (#2806)\n\nFound by the fuzzer. Repro case:\r\n\r\n\tpython -m black -c 'importA;()<<0**0#'\r\n",
            "diff": {
                "src/black/linegen.py": 2,
                "src/black/lines.py": 4,
                "src/blib2to3/pytree.py": 6,
                "tests/data/power_op_newline.py": 10,
                "tests/test_format.py": 6
            },
            "is_test": true,
            "is_fix": true
        },
        "b92822afeedd45daa3b1d094a502daf936f7fa9d": {
            "datetime": "2022-01-26T19:44:39-08:00",
            "summary": "more trailing comma tests (#2810)",
            "message": "more trailing comma tests (#2810)\n\n",
            "diff": {
                "tests/data/trailing_comma_optional_parens1.py": 46
            },
            "is_test": false,
            "is_fix": false
        },
        "777cae55b601f8a501e2138cec99361929b128ea": {
            "datetime": "2022-01-27T21:31:50-08:00",
            "summary": "Use parentheses on method access on float and int literals (#2799)",
            "message": "Use parentheses on method access on float and int literals (#2799)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Felix Hild\u00e9n <felix.hilden@gmail.com>",
            "diff": {
                "src/black/linegen.py": 22,
                "src/black/nodes.py": 7,
                "tests/data/attribute_access_on_number_literals.py": 47,
                "tests/data/expression.py": 4,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "fda2561f79e10826dbdeb900b6124d642766229f": {
            "datetime": "2022-01-28T10:16:25+02:00",
            "summary": "Tests for unicode identifiers (#2816)",
            "message": "Tests for unicode identifiers (#2816)\n\n",
            "diff": {
                "fuzz.py": 2,
                "tests/data/tricky_unicode_symbols.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "343795029f0d3ffa2f04ca5074a18861b2831d39": {
            "datetime": "2022-01-28T16:29:07-08:00",
            "summary": "Treat blank lines in stubs the same inside top-level `if` statements (#2820)",
            "message": "Treat blank lines in stubs the same inside top-level `if` statements (#2820)\n\n",
            "diff": {
                "src/black/lines.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "4ce049dbfa8ddd00bff3656cbca6ecf5f85c413e": {
            "datetime": "2022-01-28T16:48:38-08:00",
            "summary": "torture test (#2815)",
            "message": "torture test (#2815)\n\nFixes #2651. Fixes #2754. Fixes #2518. Fixes #2321.\r\n\r\nThis adds a test that lists a number of cases of unstable formatting\r\nthat we have seen in the issue tracker. Checking it in will ensure\r\nthat we don't regress on these cases.\r\n",
            "diff": {
                "tests/data/torture.py": 81,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "95e77cb5590a1499d3aa4cf7fe60481347191c35": {
            "datetime": "2022-01-28T16:57:05-08:00",
            "summary": "Fix arithmetic stability issue (#2817)",
            "message": "Fix arithmetic stability issue (#2817)\n\nIt turns out \"simple_stmt\" isn't that simple: it can contain multiple\r\nstatements separated by semicolons. Invisible parenthesis logic for\r\narithmetic expressions only looked at the first child of simple_stmt.\r\nThis causes instability in the presence of semicolons, since the next\r\nrun through the statement following the semicolon will be the first\r\nchild of another simple_stmt.\r\n\r\nI believe this along with #2572 fix the known stability issues.",
            "diff": {
                "src/black/linegen.py": 10,
                "src/black/nodes.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "a24e1f795975350f7b1d8898d831916a9f6dbc6a": {
            "datetime": "2022-01-28T18:13:18-08:00",
            "summary": "Fix instability due to trailing comma logic (#2572)",
            "message": "Fix instability due to trailing comma logic (#2572)\n\nIt was causing stability issues because the first pass\r\ncould cause a \"magic trailing comma\" to appear, meaning\r\nthat the second pass might get a different result. It's\r\nnot critical.\r\n\r\nSome things format differently (with extra parens)",
            "diff": {
                "src/black/__init__.py": 6,
                "src/black/linegen.py": 2,
                "src/black/lines.py": 14,
                "src/black/nodes.py": 23,
                "tests/data/function_trailing_comma.py": 23,
                "tests/data/long_strings_flag_disabled.py": 13,
                "tests/data/torture.py": 25,
                "tests/data/trailing_comma_optional_parens1.py": 54,
                "tests/data/trailing_comma_optional_parens2.py": 15,
                "tests/data/trailing_comma_optional_parens3.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "a4992b4d50d6efa41b49ed0f804c5ed3723399db": {
            "datetime": "2022-01-28T19:38:50-08:00",
            "summary": "Add a test case to torture.py (#2822)",
            "message": "Add a test case to torture.py (#2822)\n\nCo-authored-by: hauntsaninja <>",
            "diff": {
                "tests/data/torture.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "8acb8548c36882a124127d25287f4f38de3c2ff8": {
            "datetime": "2022-01-29T07:37:51-08:00",
            "summary": "Update classifiers to reflect stable (#2823)",
            "message": "Update classifiers to reflect stable (#2823)\n\n",
            "diff": {
                "setup.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0d768e58f42d9aec20637d21ad261f7f9eaacae8": {
            "datetime": "2022-01-29T08:00:59-08:00",
            "summary": "Remove test suite from setup.py (#2824)",
            "message": "Remove test suite from setup.py (#2824)\n\nWe no longer use it",
            "diff": {
                "setup.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "bbe1bdf1edfedf51b40824c5574413c0b1b35284": {
            "datetime": "2022-01-30T21:53:45+02:00",
            "summary": "Adjust `--preview` documentation (#2833)",
            "message": "Adjust `--preview` documentation (#2833)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "f61299a62a330dd26d180a8ea420916870f19730": {
            "datetime": "2022-01-30T15:01:56-05:00",
            "summary": "Exclude __pypackages__ by default (GH-2836)",
            "message": "Exclude __pypackages__ by default (GH-2836)\n\nPDM uses this as part of not-accepted-yet PEP 582.",
            "diff": {
                "src/black/const.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "cae7ae3a4d32dc51e0752d4a4e885a7792a0286d": {
            "datetime": "2022-01-30T13:42:56-08:00",
            "summary": "Soft comparison of --required-version (#2832)",
            "message": "Soft comparison of --required-version (#2832)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Felix Hild\u00e9n <felix.hilden@gmail.com>",
            "diff": {
                "src/black/__init__.py": 9,
                "tests/test_black.py": 14
            },
            "is_test": true,
            "is_fix": false
        },
        "fb9fe6b565ce8a9beeebb51c23f384d1865d0ee8": {
            "datetime": "2022-01-31T21:29:01-08:00",
            "summary": "Isolate command line tests from user-level config (#2851)",
            "message": "Isolate command line tests from user-level config (#2851)\n\n",
            "diff": {
                "tests/test_black.py": 25
            },
            "is_test": true,
            "is_fix": false
        },
        "b4a6bb08fa704facbf3397f95b3216e13c3c964a": {
            "datetime": "2022-02-08T12:13:58-08:00",
            "summary": "Avoid crashing when the user has no homedir (#2814)",
            "message": "Avoid crashing when the user has no homedir (#2814)\n\n",
            "diff": {
                "src/black/files.py": 6,
                "tests/test_black.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "50a856970d2453087662a295631d6f24a12bc3a1": {
            "datetime": "2022-02-20T17:17:01-08:00",
            "summary": "Isolate command line tests for notebooks from user-level config (#2854)",
            "message": "Isolate command line tests for notebooks from user-level config (#2854)\n\n",
            "diff": {
                "tests/test_ipynb.py": 18
            },
            "is_test": true,
            "is_fix": false
        },
        "c26c7728e883db1425f7ed7affec41da3b3200a3": {
            "datetime": "2022-02-20T17:59:36-08:00",
            "summary": "Add special config verbose log case when black is using user-level config (#2861)",
            "message": "Add special config verbose log case when black is using user-level config (#2861)\n\n",
            "diff": {
                "src/black/__init__.py": 21
            },
            "is_test": false,
            "is_fix": false
        }
    },
    "2022-02-21T12:55:32-07:00": {
        "2918ea3b079bbb617b2f9f0d5bc0b84fde04e48e": {
            "datetime": "2022-02-23T18:20:59-08:00",
            "summary": "Format ourselves in preview mode (#2889)",
            "message": "Format ourselves in preview mode (#2889)\n\n",
            "diff": {
                "src/black/__init__.py": 8,
                "tests/test_ipynb.py": 4
            },
            "is_test": true,
            "is_fix": false
        },
        "9b161072c13c0ec32c9ca9bd48fad17f781a56d4": {
            "datetime": "2022-02-23T19:41:42-08:00",
            "summary": "fix new formatting issue (#2895)",
            "message": "fix new formatting issue (#2895)\n\nRace between #2889 and another PR.",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "67eaf2466596394d5765ba4026d34e7b822814ab": {
            "datetime": "2022-03-03T09:29:48-08:00",
            "summary": "replace md5 with sha256 (#2905)",
            "message": "replace md5 with sha256 (#2905)\n\nMD5 is unavailable on systems with active FIPS mode. That makes black\r\ncrash when run on such systems.",
            "diff": {
                "src/black/mode.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "6f4976a7ace2fb5c6a5df57c4cb7dcf65eff44c9": {
            "datetime": "2022-03-04T17:37:16-08:00",
            "summary": "Allow `for`'s target expression to be starred (#2879)",
            "message": "Allow `for`'s target expression to be starred (#2879)\n\nFixes #2878",
            "diff": {
                "tests/data/starred_for_target.py": 27,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "24ffc54a53b52293a54d7ef9f2105c26e945cc67": {
            "datetime": "2022-03-08T07:28:13-08:00",
            "summary": "Fix handling of Windows junctions in normalize_path_maybe_ignore (#2904)",
            "message": "Fix handling of Windows junctions in normalize_path_maybe_ignore (#2904)\n\nFixes #2569",
            "diff": {
                "src/black/files.py": 19,
                "tests/test_black.py": 45
            },
            "is_test": true,
            "is_fix": true
        },
        "71e71e5f52e5f6bdeae63cc8c11b1bee44d11c30": {
            "datetime": "2022-03-08T08:47:51-08:00",
            "summary": "Use tomllib on Python 3.11 (#2903)",
            "message": "Use tomllib on Python 3.11 (#2903)\n\n",
            "diff": {
                "setup.py": 2,
                "src/black/files.py": 10
            },
            "is_test": false,
            "is_fix": false
        },
        "a57ab326b20b720518ab6f513bd0f8ba357d8d86": {
            "datetime": "2022-03-15T12:57:59-07:00",
            "summary": "Farewell black-primer, it was nice knowing you (#2924)",
            "message": "Farewell black-primer, it was nice knowing you (#2924)\n\nEnjoy your retirement at https://github.com/cooperlees/black-primer",
            "diff": {
                "setup.py": 4,
                "src/black_primer/__init__.py": 0,
                "src/black_primer/cli.py": 195,
                "src/black_primer/lib.py": 423,
                "tests/test_format.py": 3,
                "tests/test_primer.py": 291
            },
            "is_test": true,
            "is_fix": false
        },
        "086ae68076de570b0cb1881a3c3b9da592b46ee0": {
            "datetime": "2022-03-15T20:13:56-07:00",
            "summary": "Remove power hugging formatting from preview (#2928)",
            "message": "Remove power hugging formatting from preview (#2928)\n\nIt is falsely placed in preview features and always formats the power operators, it was added in #2789 but there is no check for formatting added along with it.",
            "diff": {
                "src/black/mode.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "f87df0e3c8735de416b6392ce7f21c6ba194424d": {
            "datetime": "2022-03-21T14:51:07-07:00",
            "summary": "dont skip formatting #%% (#2919)",
            "message": "dont skip formatting #%% (#2919)\n\nFixes #2588",
            "diff": {
                "src/black/__init__.py": 2,
                "src/black/comments.py": 48,
                "src/black/linegen.py": 16,
                "tests/data/comments8.py": 15,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "3800ebd81df6a1c31d1eac8cc15899537b9cbb61": {
            "datetime": "2022-03-23T19:16:09-07:00",
            "summary": "Avoid magic-trailing-comma in single-element subscripts (#2942)",
            "message": "Avoid magic-trailing-comma in single-element subscripts (#2942)\n\nCloses #2918.",
            "diff": {
                "src/black/linegen.py": 11,
                "src/black/lines.py": 21,
                "src/black/mode.py": 5,
                "src/black/nodes.py": 12,
                "tests/data/one_element_subscript.py": 36,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "14e5ce5412efa53438df0180e735b3834df3b579": {
            "datetime": "2022-03-24T07:59:54-07:00",
            "summary": "Remove unnecessary parentheses from tuple unpacking in `for` loops (#2945)",
            "message": "Remove unnecessary parentheses from tuple unpacking in `for` loops (#2945)\n\n",
            "diff": {
                "src/black/linegen.py": 26,
                "src/black/mode.py": 1,
                "src/black/trans.py": 12,
                "tests/data/long_strings__regression.py": 2,
                "tests/data/remove_for_brackets.py": 40,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "14d84ba2e96c5ca1351b8fe4d0d415cc148f4117": {
            "datetime": "2022-03-24T11:14:21-04:00",
            "summary": "Resolve new flake8-bugbear errors (B020) (GH-2950)",
            "message": "Resolve new flake8-bugbear errors (B020) (GH-2950)\n\nFixes a couple places where we were using the same variable name as we\r\nare iterating over.\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/linegen.py": 6,
                "src/black/parsing.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "bd1e98034907463f5d86f4d87e89202dc6c34dd4": {
            "datetime": "2022-03-26T09:56:50-07:00",
            "summary": "Remove unnecessary parentheses from `except` clauses (#2939)",
            "message": "Remove unnecessary parentheses from `except` clauses (#2939)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/linegen.py": 7,
                "tests/data/remove_except_parens.py": 79,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "f239d227c003c52126239e1b9a37c36c2b2b8305": {
            "datetime": "2022-03-26T17:22:38-04:00",
            "summary": "Enforce no formatting changes for PRs via CI (GH-2951)",
            "message": "Enforce no formatting changes for PRs via CI (GH-2951)\n\nNow PRs will run two diff-shades jobs, \"preview-changes\" which formats\r\nall projects with preview=True, and \"assert-no-changes\" which formats\r\nall projects with preview=False. The latter also fails if any changes\r\nwere made.\r\n\r\nPushes to main will only run \"preview-changes\"\r\n\r\nAlso the workflow_dispatch feature was dropped since it was\r\ncomplicating everything for little gain.",
            "diff": {
                "scripts/diff_shades_gha_helper.py": 105,
                "src/black/__init__.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "e9681a40dcb3d38b56b301d811bb1c55201fd97e": {
            "datetime": "2022-03-28T12:01:13-07:00",
            "summary": "Fix _unicodefun patch code for Click 8.1.0 (#2966)",
            "message": "Fix _unicodefun patch code for Click 8.1.0 (#2966)\n\nFixes #2964",
            "diff": {
                "src/black/__init__.py": 14,
                "tests/test_black.py": 2
            },
            "is_test": true,
            "is_fix": true
        },
        "82e150a13ac78a1f24de27977d8a40883bc3d6e7": {
            "datetime": "2022-03-30T13:40:50-07:00",
            "summary": "Keep tests working w/ upcoming aiohttp 4.0.0 (#2974)",
            "message": "Keep tests working w/ upcoming aiohttp 4.0.0 (#2974)\n\naiohttp.test_utils.unittest_run_loop was deprecated since aiohttp 3.8\r\nand aiohttp 4 (which isn't a thing quite yet) removes it. To maintain\r\ncompatibility with the full range of versions we declare to support,\r\ntest_blackd.py will now define a no-op replacement if it can't be\r\nimported.\r\n\r\nAlso, mypy is painfully slow to use without a cache, let's reenable it.",
            "diff": {
                "tests/test_blackd.py": 15
            },
            "is_test": true,
            "is_fix": false
        },
        "3dea6e363562050ae032c80a648bd88fc49381bc": {
            "datetime": "2022-03-30T13:43:46-07:00",
            "summary": "Convert `index.rst` and `license.rst` to markdown (#2852)",
            "message": "Convert `index.rst` and `license.rst` to markdown (#2852)\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "docs/conf.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "a66016cb949590863d11e329e65bbb383727125e": {
            "datetime": "2022-03-30T14:01:03-07:00",
            "summary": "Add # type: ignore for click._unicodefun import (#2981)",
            "message": "Add # type: ignore for click._unicodefun import (#2981)\n\n",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "1af29fbfa507daa8166e7aac659e9b2ff2b47a3c": {
            "datetime": "2022-04-02T08:29:32-07:00",
            "summary": "try-except tomllib import (#2987)",
            "message": "try-except tomllib import (#2987)\n\nSee #2965 \r\n\r\nI left the version check in place because mypy doesn't generally like try-excepted imports.\r\n",
            "diff": {
                "setup.py": 2,
                "src/black/files.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "24c708eb374a856372284fb1a4f021fec292f713": {
            "datetime": "2022-04-02T20:27:33-07:00",
            "summary": "Remove unnecessary parentheses from `with` statements (#2926)",
            "message": "Remove unnecessary parentheses from `with` statements (#2926)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/linegen.py": 98,
                "tests/data/remove_for_brackets.py": 8,
                "tests/data/remove_with_brackets.py": 119,
                "tests/test_format.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "fa5fd262fffd577e3c5d573af9c2fa0af2991be1": {
            "datetime": "2022-04-04T18:23:30-07:00",
            "summary": "Update test_black.shhh_click test for click 8+ (#2993)",
            "message": "Update test_black.shhh_click test for click 8+ (#2993)\n\nThe 8.0.x series renamed its \"die on LANG=C\" function and the 8.1.x\r\nseries straight up deleted it.\r\n\r\nUnfortunately this makes this test type check cleanly hard, so we'll\r\njust lint with click 8.1+ (the pre-commit hook configuration was changed\r\nmostly to just evict any now unsupported mypy environments)",
            "diff": {
                "tests/test_black.py": 10
            },
            "is_test": true,
            "is_fix": false
        },
        "9b307405fb6d4248e1a1dd7c6c10fa02b3c347f0": {
            "datetime": "2022-04-06T15:48:50+03:00",
            "summary": "Top PyPI Packages: Use 30-days data, 365 is no longer available (#2995)",
            "message": "Top PyPI Packages: Use 30-days data, 365 is no longer available (#2995)\n\n",
            "diff": {
                "gallery/gallery.py": 13
            },
            "is_test": false,
            "is_fix": false
        },
        "f6188ce6dcde3fcad381c52ecc74374e7d0579c9": {
            "datetime": "2022-04-06T14:04:12-04:00",
            "summary": "Output python version and implementation as part of `--version` flag (#2997)",
            "message": "Output python version and implementation as part of `--version` flag (#2997)\n\nExample:\r\n\r\nblack, 22.1.1.dev56+g421383d.d20220405 (compiled: no)\r\nPython (CPython) 3.9.12\r\n\r\nCo-authored-by: Batuhan Taskaya <isidentical@gmail.com>",
            "diff": {
                "src/black/__init__.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "98fcccee55acba04afdd933676f56927cfe9bbe4": {
            "datetime": "2022-04-09T10:36:05-04:00",
            "summary": "Better manage return annotation brackets (#2990)",
            "message": "Better manage return annotation brackets (#2990)\n\nAllows us to better control placement of return annotations by:\r\n\r\na) removing redundant parens\r\nb) moves very long type annotations onto their own line\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/linegen.py": 31,
                "src/black/mode.py": 1,
                "tests/data/return_annotation_brackets.py": 222,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "75f99bded33abe962ca08bf16c77635ac9ca00a1": {
            "datetime": "2022-04-09T16:49:40-04:00",
            "summary": "Remove redundant parentheses around awaited coroutines/tasks (#2991)",
            "message": "Remove redundant parentheses around awaited coroutines/tasks (#2991)\n\nThis is a tricky one as await is technically an expression and therefore\r\nin certain situations requires brackets for operator precedence.\r\nHowever, the vast majority of await usage is just await some_coroutine(...)\r\nand similar in format to return statements. Therefore this PR removes\r\nredundant parens around these await expressions.\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/linegen.py": 41,
                "tests/data/remove_await_parens.py": 168,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "431bd09e15247431056894bd6444dee7c22893f0": {
            "datetime": "2022-04-09T16:52:45-04:00",
            "summary": "Correctly handle fmt: skip comments without internal spaces (#2970)",
            "message": "Correctly handle fmt: skip comments without internal spaces (#2970)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/comments.py": 7,
                "tests/data/fmtskip7.py": 11,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "712f8b37fb12a40ec6ea86903f44c2d0750f56a3": {
            "datetime": "2022-04-13T19:13:33-04:00",
            "summary": "Make ipynb tests compatible with ipython 8.3.0+ (#3008)",
            "message": "Make ipynb tests compatible with ipython 8.3.0+ (#3008)\n\n",
            "diff": {
                "tests/test_ipynb.py": 12
            },
            "is_test": true,
            "is_fix": false
        },
        "7f7673d941a947a8d392c8c0866d3d588affc174": {
            "datetime": "2022-04-15T12:25:07-04:00",
            "summary": "Support 3.11 / PEP 654 syntax (#3016)",
            "message": "Support 3.11 / PEP 654 syntax (#3016)\n\n",
            "diff": {
                "src/black/__init__.py": 7,
                "src/black/linegen.py": 9,
                "src/black/mode.py": 17,
                "src/black/nodes.py": 4,
                "tests/data/pep_654.py": 53,
                "tests/data/pep_654_style.py": 111,
                "tests/test_black.py": 6,
                "tests/test_format.py": 12
            },
            "is_test": true,
            "is_fix": false
        },
        "9ce100ba61b6738298d86818a3d0eee7b18bfed7": {
            "datetime": "2022-05-06T07:06:27-07:00",
            "summary": "Move imports of `ThreadPoolExecutor` into `reformat_many()`, allowing Black-in-the-browser (#3046)",
            "message": "Move imports of `ThreadPoolExecutor` into `reformat_many()`, allowing Black-in-the-browser (#3046)\n\nThis is a slight perf win for use-cases that don't invoke `reformat_many()`, but more importantly to me today it means I can use Black in pyscript.\r\n",
            "diff": {
                "src/black/__init__.py": 9,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "20d8ccb54253f8a66321f6708d53e2a05a54079b": {
            "datetime": "2022-05-07T21:34:28-07:00",
            "summary": "Put closing quote on a separate line if docstring is too long (#3044)",
            "message": "Put closing quote on a separate line if docstring is too long (#3044)\n\nFixes #1632\r\n\r\nCo-authored-by: Felix Hild\u00e9n <felix.hilden@gmail.com>",
            "diff": {
                "src/black/linegen.py": 26,
                "src/black/mode.py": 1,
                "tests/data/docstring.py": 42,
                "tests/data/docstring_preview.py": 89,
                "tests/test_format.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "fc2a16433e7da705793122dd0c66fcde83b305d5": {
            "datetime": "2022-05-08T12:27:40-07:00",
            "summary": "Read simple data cases automatically (#3034)",
            "message": "Read simple data cases automatically (#3034)\n\nCo-authored-by: Felix Hild\u00e9n <felix.hilden@gmail.com>",
            "diff": {
                "tests/data/attribute_access_on_number_literals.py": 0,
                "tests/data/beginning_backslash.py": 0,
                "tests/data/bracketmatch.py": 0,
                "tests/data/class_blank_parentheses.py": 0,
                "tests/data/class_methods_new_line.py": 0,
                "tests/data/collections.py": 0,
                "tests/data/comment_after_escaped_newline.py": 0,
                "tests/data/comments.py": 0,
                "tests/data/comments2.py": 0,
                "tests/data/comments3.py": 0,
                "tests/data/comments4.py": 0,
                "tests/data/comments5.py": 0,
                "tests/data/comments6.py": 0,
                "tests/data/comments_non_breaking_space.py": 0,
                "tests/data/composition.py": 0,
                "tests/data/composition_no_trailing_comma.py": 0,
                "tests/data/docstring.py": 0,
                "tests/data/empty_lines.py": 0,
                "tests/data/expression.py": 0,
                "tests/data/fmtonoff.py": 0,
                "tests/data/fmtonoff2.py": 0,
                "tests/data/fmtonoff3.py": 0,
                "tests/data/fmtonoff4.py": 0,
                "tests/data/fmtskip.py": 0,
                "tests/data/fmtskip2.py": 0,
                "tests/data/fmtskip3.py": 0,
                "tests/data/fmtskip4.py": 0,
                "tests/data/fmtskip5.py": 0,
                "tests/data/fmtskip6.py": 0,
                "tests/data/fmtskip7.py": 0,
                "tests/data/fstring.py": 0,
                "tests/data/function.py": 0,
                "tests/data/function2.py": 0,
                "tests/data/function_trailing_comma.py": 0,
                "tests/data/import_spacing.py": 0,
                "tests/data/power_op_spacing.py": 0,
                "tests/data/remove_parens.py": 0,
                "tests/data/slices.py": 0,
                "tests/data/string_prefixes.py": 0,
                "tests/data/torture.py": 0,
                "tests/data/trailing_comma_optional_parens1.py": 0,
                "tests/data/trailing_comma_optional_parens2.py": 0,
                "tests/data/trailing_comma_optional_parens3.py": 0,
                "tests/data/tricky_unicode_symbols.py": 0,
                "tests/data/tupleassign.py": 0,
                "tests/test_black.py": 26,
                "tests/test_format.py": 51,
                "tests/util.py": 11
            },
            "is_test": true,
            "is_fix": false
        },
        "2893c42176903c8b6c28c46ff9e046861328b6a8": {
            "datetime": "2022-05-18T12:11:37-07:00",
            "summary": "Remove hard coded test cases (#3062)",
            "message": "Remove hard coded test cases (#3062)\n\n",
            "diff": {
                "tests/data/async_as_identifier.py": 0,
                "tests/data/blackd_diff.py": 0,
                "tests/data/cantfit.py": 0,
                "tests/data/comments7.py": 0,
                "tests/data/comments8.py": 0,
                "tests/data/debug_visitor.py": 0,
                "tests/data/decorators.py": 0,
                "tests/data/docstring_no_string_normalization.py": 0,
                "tests/data/docstring_preview.py": 0,
                "tests/data/force_py36.py": 0,
                "tests/data/force_pyi.py": 0,
                "tests/data/long_strings.py": 0,
                "tests/data/long_strings__edge_case.py": 0,
                "tests/data/long_strings__regression.py": 0,
                "tests/data/long_strings_flag_disabled.py": 0,
                "tests/data/missing_final_newline.py": 0,
                "tests/data/numeric_literals.py": 0,
                "tests/data/numeric_literals_skip_underscores.py": 0,
                "tests/data/one_element_subscript.py": 0,
                "tests/data/parenthesized_context_managers.py": 0,
                "tests/data/pattern_matching_complex.py": 0,
                "tests/data/pattern_matching_extras.py": 0,
                "tests/data/pattern_matching_generic.py": 0,
                "tests/data/pattern_matching_invalid.py": 0,
                "tests/data/pattern_matching_simple.py": 0,
                "tests/data/pattern_matching_style.py": 0,
                "tests/data/pep_570.py": 0,
                "tests/data/pep_572.py": 0,
                "tests/data/pep_572_do_not_remove_parens.py": 0,
                "tests/data/pep_572_py310.py": 0,
                "tests/data/pep_572_py39.py": 0,
                "tests/data/pep_572_remove_parens.py": 0,
                "tests/data/pep_654.py": 0,
                "tests/data/pep_654_style.py": 0,
                "tests/data/percent_precedence.py": 0,
                "tests/data/power_op_newline.py": 0,
                "tests/data/python2_detection.py": 0,
                "tests/data/python37.py": 0,
                "tests/data/python38.py": 0,
                "tests/data/python39.py": 0,
                "tests/data/remove_await_parens.py": 0,
                "tests/data/remove_except_parens.py": 0,
                "tests/data/remove_for_brackets.py": 0,
                "tests/data/remove_with_brackets.py": 0,
                "tests/data/return_annotation_brackets.py": 0,
                "tests/data/starred_for_target.py": 0,
                "tests/data/string_quotes.py": 0,
                "tests/test_black.py": 72,
                "tests/test_blackd.py": 6,
                "tests/test_format.py": 166,
                "tests/test_ipynb.py": 37,
                "tests/test_no_ipynb.py": 7,
                "tests/util.py": 48
            },
            "is_test": true,
            "is_fix": false
        },
        "1e557184b0a9f43bfbff862669966bc5328517e9": {
            "datetime": "2022-05-26T09:45:22-07:00",
            "summary": "Implement support for PEP 646 (#3071)",
            "message": "Implement support for PEP 646 (#3071)\n\n",
            "diff": {
                "src/black/__init__.py": 12,
                "src/black/mode.py": 2,
                "src/black/nodes.py": 13,
                "src/blib2to3/pygram.py": 1,
                "tests/data/py_311/pep_646.py": 194,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "436e12f2904e68acb57a059b1c44f1e0321e2d3f": {
            "datetime": "2022-06-01T11:20:02-07:00",
            "summary": "Add script to ease migration to black (#3038)",
            "message": "Add script to ease migration to black (#3038)\n\n* Add script to ease migration to black\r\n\r\n* Update CHANGES.md\r\n\r\nCo-authored-by: Cooper Lees <me@cooperlees.com>",
            "diff": {
                "scripts/migrate-black.py": 95
            },
            "is_test": false,
            "is_fix": false
        },
        "f51e53726b39a177355a7917c91c56f390dda7ef": {
            "datetime": "2022-06-03T15:59:26-07:00",
            "summary": "Fix minor typo (#3096)",
            "message": "Fix minor typo (#3096)\n\n",
            "diff": {
                "scripts/migrate-black.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4bb7bf2bdc95a8035ccf167023a7044e5f8e5ef6": {
            "datetime": "2022-06-11T09:55:01+03:00",
            "summary": "Remove newline after code block open (#3035)",
            "message": "Remove newline after code block open (#3035)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/lines.py": 13,
                "src/black/mode.py": 1,
                "tests/data/preview/remove_newline_after_code_block_open.py": 189,
                "tests/data/preview_310/remove_newline_after match.py": 34,
                "tests/test_black.py": 1,
                "tests/test_format.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "8c8675c62aef4fb662c686d19ebd35dc047258f0": {
            "datetime": "2022-06-11T11:44:01-04:00",
            "summary": "Update documentation dependencies (#3118)",
            "message": "Update documentation dependencies (#3118)\n\nFuro, myst-parser, and Sphinx (had to pin docutils due to sphinx breakage)",
            "diff": {
                "docs/conf.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "162ecd1d2cf9471efefb5b61c17d28b73acb79a1": {
            "datetime": "2022-06-11T12:04:09-04:00",
            "summary": "Use is_number_token instead of assertion (#3069)",
            "message": "Use is_number_token instead of assertion (#3069)\n\n",
            "diff": {
                "src/black/__init__.py": 5,
                "src/black/nodes.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "6c1bd08f16b636de38b92aeb2e0a1e8ebef0a0b1": {
            "datetime": "2022-06-14T09:08:36-07:00",
            "summary": "Test run black on self (#3114)",
            "message": "Test run black on self (#3114)\n\n* Add run_self environment in tox\r\n\r\n* Add run_self task as part of the lint CI flow\r\n\r\n* Remove hard coded sources list\r\n\r\n* Remove black from pre-commit\r\n\r\nCo-authored-by: Cooper Lees <me@cooperlees.com>",
            "diff": {
                "tests/test_format.py": 48
            },
            "is_test": true,
            "is_fix": false
        },
        "fa6caa6ca8489103d22d23f8f4ae4d3569bb115e": {
            "datetime": "2022-06-23T12:41:05-07:00",
            "summary": "Only call get_future_imports when needed (#3135)",
            "message": "Only call get_future_imports when needed (#3135)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "18c17bea757dc88d0b6d2be6e99a4ebcc18e288c": {
            "datetime": "2022-07-13T17:02:51-07:00",
            "summary": "Copy over comments when hugging power ops  (#2874)",
            "message": "Copy over comments when hugging power ops  (#2874)\n\nOtherwise they'd be deleted which was a regression in 22.1.0 (oops! my\r\nbad!). Also type comments are now tracked in the AST safety check on all\r\ncompatible platforms to error out if this happens again.\r\n\r\nOverall the line rewriting code has been rewritten to do \"the right\r\nthing (tm)\", I hope this fixes other potential bugs in the code (fwiw I\r\ngot to drop the bugfix in blib2to3.pytree.Leaf.clone since now bracket\r\nmetadata is properly copied over).\r\n\r\nFixes #2873",
            "diff": {
                "src/black/parsing.py": 20,
                "src/black/trans.py": 20,
                "src/blib2to3/pytree.py": 1,
                "tests/data/simple_cases/power_op_spacing.py": 28
            },
            "is_test": false,
            "is_fix": false
        },
        "4f0532d6f0d030799223453195069a282e111c8b": {
            "datetime": "2022-07-13T22:26:05-04:00",
            "summary": "Don't (ever) put a single-char closing docstring quote on a new line (#3166)",
            "message": "Don't (ever) put a single-char closing docstring quote on a new line (#3166)\n\nDoing so is invalid. Note this only fixes the preview style since the\r\nlogic putting closing docstring quotes on their own line if they violate\r\nthe line length limit is quite new.\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/linegen.py": 7,
                "tests/data/preview/docstring_preview.py": 16
            },
            "is_test": false,
            "is_fix": false
        },
        "9aa33f467bafce081635ce88807d42b10b0a3105": {
            "datetime": "2022-07-14T15:24:34-07:00",
            "summary": "Move to explicitly creating a new loop (#3164)",
            "message": "Move to explicitly creating a new loop (#3164)\n\n* Move to explicitly creating a new loop\r\n\r\n- >= 3.10 add a warning that `get_event_loop` will not automatically create a loop\r\n- Move to explicit API\r\n\r\nTest:\r\n- `python3.11 -m venv --upgrade-deps /tmp/tb`\r\n  - `/tmp/tb/bin/pip install -e .`\r\n  - Install deps and no blackd as aiohttp + yarl can't build still with 3.11\r\n  - https://github.com/aio-libs/aiohttp/issues/6600\r\n- `export PYTHONWARNINGS=error`\r\n```\r\ncooper@l33t:~/repos/black$ /tmp/tb/bin/black .\r\nAll done! \u2728 \ud83c\udf70 \u2728\r\n44 files left unchanged.\r\n```\r\n\r\nFixes #3110\r\n\r\n* Add to CHANGES.md\r\n\r\n* Fix a cooper typo yet again\r\n\r\n* Set default asyncio loop to our explicitly created one + unset on exit\r\n\r\n* Update CHANGES.md\r\n\r\nFix my silly typo.\r\n\r\nCo-authored-by: Thomas Grainger <tagrain@gmail.com>\r\n\r\nCo-authored-by: Cooper Ry Lees <me@wcooperlees.com>\r\nCo-authored-by: Thomas Grainger <tagrain@gmail.com>",
            "diff": {
                "src/black/__init__.py": 8
            },
            "is_test": false,
            "is_fix": false
        },
        "ad5c315ddad26a3c41f22d3b73c493fb7d7b86b8": {
            "datetime": "2022-07-14T19:47:33-04:00",
            "summary": "Actually disable docstring prefix normalization with -S + fix instability (#3168)",
            "message": "Actually disable docstring prefix normalization with -S + fix instability (#3168)\n\nThe former was a regression I introduced a long time ago. To avoid\r\nchanging the stable style too much, the regression is only fixed if\r\n--preview is enabled\r\n\r\nAnnoyingly enough, as we currently always enforce a second format pass if\r\nchanges were made, there's no good way to prove the existence of the\r\ndocstring quote normalization instability issue. For posterity, here's\r\none failing example:\r\n\r\n    --- source\r\n    +++ first pass\r\n    @@ -1,7 +1,7 @@\r\n     def some_function(self):\r\n    -    ''''<text here>\r\n    +    \"\"\" '<text here>\r\n\r\n         <text here, since without another non-empty line black is stable>\r\n\r\n    -    '''\r\n    +    \"\"\"\r\n         pass\r\n    --- first pass\r\n    +++ second pass\r\n    @@ -1,7 +1,7 @@\r\n     def some_function(self):\r\n    -    \"\"\" '<text here>\r\n    +    \"\"\"'<text here>\r\n\r\n         <text here, since without another non-empty line black is stable>\r\n\r\n         \"\"\"\r\n         pass\r\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/linegen.py": 19,
                "src/black/mode.py": 7,
                "tests/data/miscellaneous/docstring_preview_no_string_normalization.py": 10,
                "tests/data/simple_cases/docstring.py": 14,
                "tests/test_format.py": 12
            },
            "is_test": true,
            "is_fix": false
        },
        "1b6de7b0a33b568f71ff86e0e5fef6d4c479c2b7": {
            "datetime": "2022-07-18T19:17:13-07:00",
            "summary": "Improve warning filtering in tests (#3175)",
            "message": "Improve warning filtering in tests (#3175)\n\n",
            "diff": {
                "tests/test_format.py": 2
            },
            "is_test": true,
            "is_fix": false
        },
        "6ea4eddf936e88c24a6757c0c858812d5ca1a9c6": {
            "datetime": "2022-07-19T17:26:11-04:00",
            "summary": "Fix the handling of `# fmt: skip` when it's at a colon line (#3148)",
            "message": "Fix the handling of `# fmt: skip` when it's at a colon line (#3148)\n\nWhen the Leaf node with `# fmt: skip` is a NEWLINE inside a `suite`\r\nNode, the nodes to ignore should be from the siblings of the parent\r\n`suite` Node.\r\n\r\nThere is a also a special case for the ASYNC token, where it expands\r\nto the grandparent Node where the ASYNC token is.\r\n\r\nThis fixes GH-2646, GH-3126, GH-2680, GH-2421, GH-2339, and GH-2138.",
            "diff": {
                "src/black/comments.py": 74,
                "src/black/linegen.py": 4,
                "tests/data/simple_cases/fmtskip8.py": 62
            },
            "is_test": false,
            "is_fix": false
        },
        "249c6536c4dff50773f30f222d1f81f0afe41f4c": {
            "datetime": "2022-07-19T20:57:23-04:00",
            "summary": "Fix an infinite loop when using `# fmt: on/off` ... (#3158)",
            "message": "Fix an infinite loop when using `# fmt: on/off` ... (#3158)\n\n... in the middle of an expression or code block by adding a missing return.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/comments.py": 10,
                "tests/data/simple_cases/fmtonoff5.py": 36
            },
            "is_test": false,
            "is_fix": false
        },
        "b4dc40bf7aab4cd8914c3a2046c8ffc71bba2ff9": {
            "datetime": "2022-07-19T21:33:00-04:00",
            "summary": "Use underscores instead of a space in a test file's name (#3180)",
            "message": "Use underscores instead of a space in a test file's name (#3180)\n\n... for *consistency*",
            "diff": {
                "tests/data/preview_310/remove_newline_after match.py": 0
            },
            "is_test": false,
            "is_fix": false
        },
        "44d5da00b520a05cd56e58b3998660f64ea59ebd": {
            "datetime": "2022-07-27T17:19:28-04:00",
            "summary": "Reformat codebase with isort",
            "message": "Reformat codebase with isort\n",
            "diff": {
                "action/main.py": 2,
                "fuzz.py": 4,
                "gallery/gallery.py": 10,
                "scripts/migrate-black.py": 2,
                "setup.py": 5,
                "src/black/__init__.py": 93,
                "src/black/brackets.py": 20,
                "src/black/cache.py": 6,
                "src/black/comments.py": 15,
                "src/black/debug.py": 5,
                "src/black/files.py": 8,
                "src/black/handle_ipynb_magics.py": 20,
                "src/black/linegen.py": 73,
                "src/black/lines.py": 29,
                "src/black/mode.py": 3,
                "src/black/nodes.py": 20,
                "src/black/output.py": 4,
                "src/black/parsing.py": 8,
                "src/black/report.py": 2,
                "src/black/rusty.py": 1,
                "src/black/trans.py": 38,
                "src/blackd/__init__.py": 5,
                "src/blackd/middlewares.py": 7,
                "tests/optional.py": 6,
                "tests/test_black.py": 4,
                "tests/test_blackd.py": 9,
                "tests/test_format.py": 2,
                "tests/test_ipynb.py": 15,
                "tests/test_no_ipynb.py": 7,
                "tests/test_trans.py": 1
            },
            "is_test": true,
            "is_fix": false
        },
        "d85cf00ee80f00b25a819afef7f466dc871fa68d": {
            "datetime": "2022-07-29T20:28:43-07:00",
            "summary": "Remove blib2to3 grammar cache logging (#3193)",
            "message": "Remove blib2to3 grammar cache logging (#3193)\n\nAs error logs are emitted often (they happen when Black's cache\r\ndirectory is created after blib2to3 tries to write its cache) and cause\r\nissues to be filed by users who think Black isn't working correctly.\r\n\r\nThese errors are expected for now and aren't a cause for concern so\r\nlet's remove them to stop worrying users (and new issues from being\r\nopened). We can improve the blib2to3 caching mechanism to write its\r\ncache at the end of a successful command line invocation later.",
            "diff": {
                "src/blib2to3/pgen2/driver.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "ca0dbb8fa6cca8c1fc2650cde9e71402c03a3324": {
            "datetime": "2022-07-31T07:34:29-07:00",
            "summary": "Move fuzz.py to scripts/ (#3199)",
            "message": "Move fuzz.py to scripts/ (#3199)\n\n",
            "diff": {
                "fuzz.py": 0
            },
            "is_test": false,
            "is_fix": false
        },
        "507234c47d39f5b1d8289cdd49994e03dd97bcb4": {
            "datetime": "2022-08-02T17:22:04-04:00",
            "summary": "Remove invalid syntax in docstrings -S --preview test (#3205)",
            "message": "Remove invalid syntax in docstrings -S --preview test (#3205)\n\nuR is not a legal string prefix, so this test breaks (AssertionError:\r\ncannot use --safe with this file; failed to parse source file AST:\r\ninvalid syntax) if changed to one in which the file is changed. I've\r\nchanged the last test to have u alone, and added an R to the test above\r\ninstead.\r\n",
            "diff": {
                "tests/data/miscellaneous/docstring_preview_no_string_normalization.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "6064a435453cdba47c43d71f3d0ea1aa19a29206": {
            "datetime": "2022-08-10T17:29:47-04:00",
            "summary": "Use debug f-strings for feature detection (#3215)",
            "message": "Use debug f-strings for feature detection (#3215)\n\nFixes GH-2907.",
            "diff": {
                "src/black/__init__.py": 7,
                "src/black/mode.py": 5,
                "tests/test_black.py": 20
            },
            "is_test": true,
            "is_fix": false
        },
        "680cbe3a4fef175e3b4cac32641134de79c5c0ce": {
            "datetime": "2022-08-12T19:28:47-07:00",
            "summary": "Use --no-implicit-optional for type checking (#3220)",
            "message": "Use --no-implicit-optional for type checking (#3220)\n\nThis makes type checking PEP 484 compliant (as of 2018).\r\nmypy will change its defaults soon.\r\n\r\nSee:\r\nhttps://github.com/python/mypy/issues/9091\r\nhttps://github.com/python/mypy/pull/13401",
            "diff": {
                "src/blib2to3/pgen2/parse.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "07b68e2425d2caadc2edf8fe021f60a32c6f44a7": {
            "datetime": "2022-08-12T20:23:02-07:00",
            "summary": "add preview option support for blackd (#3217)",
            "message": "add preview option support for blackd (#3217)\n\nFixes #3195\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/blackd/__init__.py": 4,
                "tests/test_blackd.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "e7b967132fdbb9e2e4c4e9916530d238848ab183": {
            "datetime": "2022-08-12T20:33:17-07:00",
            "summary": "Port & upstream mypyc wheel build workflow  (#3197)",
            "message": "Port & upstream mypyc wheel build workflow  (#3197)\n\n",
            "diff": {
                "setup.py": 5
            },
            "is_test": false,
            "is_fix": false
        },
        "4ebf14d17ed544be893be5706c02116fd8b83b4c": {
            "datetime": "2022-08-13T06:41:34-07:00",
            "summary": "Strip trailing commas in subscripts with -C (#3209)",
            "message": "Strip trailing commas in subscripts with -C (#3209)\n\nFixes #2296, #3204\r\n",
            "diff": {
                "src/black/lines.py": 18,
                "src/black/mode.py": 1,
                "tests/data/preview/skip_magic_trailing_comma.py": 34,
                "tests/test_format.py": 7
            },
            "is_test": true,
            "is_fix": false
        }
    },
    "2022-08-20T12:55:32-07:00": {
        "59acf8af38a72e57b26d739adb5d5e7f350e8f2c": {
            "datetime": "2022-08-22T20:39:48-07:00",
            "summary": "Add passing 3.11 CI by exempting blackd tests (#3234)",
            "message": "Add passing 3.11 CI by exempting blackd tests (#3234)\n\n- Had to exempt blackd tests for now due to aiohttp\r\n  - Skip by using `sys.version_info` tuple\r\n  - aiohttp does not compile in 3.11 yet - refer to #3230\r\n- Add a deadsnakes ubuntu workflow to run 3.11-dev to ensure we don't regress\r\n  - Have it also format ourselves\r\n\r\nTest:\r\n- `tox -e 311`\r\n\r\nCo-authored-by: Cooper Ry Lees <me@wcooperlees.com>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "setup.py": 1,
                "tests/test_blackd.py": 353
            },
            "is_test": true,
            "is_fix": false
        },
        "21218b666aeafd1c089cbe998e730f97605d25b2": {
            "datetime": "2022-08-22T20:40:38-07:00",
            "summary": "Fix a string merging/split issue caused by standalone comments. (#3227)",
            "message": "Fix a string merging/split issue caused by standalone comments. (#3227)\n\nFixes #2734: a standalone comment causes strings to be merged into one far too long (and requiring two passes to do so).\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/trans.py": 16,
                "tests/data/preview/long_strings.py": 35
            },
            "is_test": false,
            "is_fix": false
        },
        "c47b91f513052cd39b818ea7c19716423c85c04e": {
            "datetime": "2022-08-26T17:07:25-04:00",
            "summary": "Fix misdetection of project root with `--stdin-filename` (#3216)",
            "message": "Fix misdetection of project root with `--stdin-filename` (#3216)\n\nThere are a number of places this behaviour could be patched, for\r\ninstance, it's quite tempting to patch it in `get_sources`. However\r\nI believe we generally have the invariant that project root contains all\r\nfiles we want to format, in which case it seems prudent to keep that\r\ninvariant.\r\n\r\nThis also improves the accuracy of the \"sources to be formatted\" log\r\nmessage with --stdin-filename.\r\n\r\nFixes GH-3207.",
            "diff": {
                "src/black/__init__.py": 8,
                "src/black/files.py": 6,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": true
        },
        "c0cc19b5b3371842d696875897bebefebd5e1596": {
            "datetime": "2022-08-26T21:11:00-04:00",
            "summary": "Delay worker count determination",
            "message": "Delay worker count determination\n\nos.cpu_count() can return None (sounds like a super arcane edge case\nthough) so the type annotation for the `workers` parameter of\n`black.main` is wrong. This *could* technically cause a runtime\nTypeError since it'd trip one of mypyc's runtime type checks so we\nmight as well fix it.\n\nReading the documentation (and cross-checking with the source code),\nyou are actually allowed to pass None as `max_workers` to\n`concurrent.futures.ProcessPoolExecutor`. If it is None, the pool\ninitializer will simply call os.cpu_count() [^1] (defaulting to 1 if it\nreturns None [^2]). It'll even round down the worker count to a level\nthat's safe for Windows.\n\n... so theoretically we don't even need to call os.cpu_count()\nourselves, but our Windows limit is 60 (unlike the stdlib's 61) and I'd\nprefer not accidentally reintroducing a crash on machines with many,\nmany CPU cores.\n\n[^1]: https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor\n[^2]: https://github.com/python/cpython/blob/a372a7d65320396d44e8beb976e3a6c382963d4e/Lib/concurrent/futures/process.py#L600\n",
            "diff": {
                "src/black/__init__.py": 14,
                "src/black/concurrency.py": 11
            },
            "is_test": false,
            "is_fix": false
        },
        "afed2c01903465f9a486ac481a66aa3413cc1b01": {
            "datetime": "2022-08-26T21:11:00-04:00",
            "summary": "Load .gitignore and exclude regex at time of use",
            "message": "Load .gitignore and exclude regex at time of use\n\nLoading .gitignore and compiling the exclude regex can take more than\n15ms. We shouldn't and don't need to pay this cost if we're simply\nformatting files given on the command line directly.\n\nI would've loved to lazily import pathspec, but the patch won't be clean\nuntil the file collection and discovery logic is refactored first.\n\nCo-authored-by: Fabio Zadrozny <fabiofz@gmail.com>\n",
            "diff": {
                "src/black/__init__.py": 12
            },
            "is_test": false,
            "is_fix": false
        },
        "e269f44b25737360e0dc65379f889dfa931dc68a": {
            "datetime": "2022-08-26T21:11:00-04:00",
            "summary": "Lazily import parallelized format modules",
            "message": "Lazily import parallelized format modules\n\n`black.reformat_many` depends on a lot of slow-to-import modules. When\nformatting simply a single file, the time paid to import those modules\nis totally wasted. So I moved `black.reformat_many` and its helpers\nto `black.concurrency` which is now *only* imported if there's more\nthan one file to reformat. This way, running Black over a single file\nis snappier\n\nHere are the numbers before and after this patch running `python -m\nblack --version`:\n\n- interpreted: 411 ms +- 9 ms -> 342 ms +- 7 ms: 1.20x faster\n- compiled: 365 ms +- 15 ms -> 304 ms +- 7 ms: 1.20x faster\n\nCo-authored-by: Fabio Zadrozny <fabiofz@gmail.com>\n",
            "diff": {
                "src/black/__init__.py": 153,
                "src/black/concurrency.py": 145,
                "tests/test_black.py": 6
            },
            "is_test": true,
            "is_fix": false
        },
        "ba618a307a30a119b4fafe526ebf7d5f092ba981": {
            "datetime": "2022-08-30T22:52:00-04:00",
            "summary": "Add parens around implicit string concatenations where it increases readability (#3162)",
            "message": "Add parens around implicit string concatenations where it increases readability (#3162)\n\nAdds parentheses around implicit string concatenations when it's inside\r\na list, set, or tuple. Except when it's only element and there's no trailing\r\ncomma.\r\n\r\nLooking at the order of the transformers here, we need to \"wrap in\r\nparens\" before string_split runs. So my solution is to introduce a\r\n\"collaboration\" between StringSplitter and StringParenWrapper where the\r\nsplitter \"skips\" the split until the wrapper adds the parens (and then\r\nthe line after the paren is split by StringSplitter) in another pass.\r\n\r\nI have also considered an alternative approach, where I tried to add a\r\ndifferent \"string paren wrapper\" class, and it runs before string_split.\r\nThen I found out it requires a different do_transform implementation\r\nthan StringParenWrapper.do_transform, since the later assumes it runs\r\nafter the delimiter_split transform. So I stopped researching that\r\nroute.\r\n\r\nOriginally function calls were also included in this change, but given\r\nmissing commas should usually result in a runtime error and the scary\r\namount of changes this cause on downstream code, they were removed in\r\nlater revisions.",
            "diff": {
                "src/black/trans.py": 50,
                "tests/data/preview/comments7.py": 46,
                "tests/data/preview/long_strings.py": 81,
                "tests/data/preview/long_strings__regression.py": 32,
                "tests/test_black.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "2c90480e1a102ab0fac57737d2ba5143d82abed7": {
            "datetime": "2022-08-30T20:46:46-07:00",
            "summary": "Use strict mypy checking (#3222)",
            "message": "Use strict mypy checking (#3222)\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "scripts/fuzz.py": 5,
                "src/blackd/middlewares.py": 4,
                "src/blib2to3/pytree.py": 18,
                "tests/optional.py": 2,
                "tests/test_blackd.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "767604e03f5e454ae5b5c268cd5831c672f46de8": {
            "datetime": "2022-08-31T15:47:42-04:00",
            "summary": "Use .gitignore files in the initial source directories (#3237)",
            "message": "Use .gitignore files in the initial source directories (#3237)\n\nSolves https://github.com/psf/black/issues/2598 where Black wouldn't\r\nuse .gitignore at folder/.gitignore if you ran `black folder` for\r\nexample.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com> ",
            "diff": {
                "src/black/__init__.py": 5,
                "tests/test_black.py": 7
            },
            "is_test": true,
            "is_fix": false
        },
        "095fe0d649541636d7011e779214a146b4f32895": {
            "datetime": "2022-08-31T21:25:13-07:00",
            "summary": "docs: adds ExitStack alternative to future_style.md (#3247)",
            "message": "docs: adds ExitStack alternative to future_style.md (#3247)\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "docs/conf.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "062e644aae4299a320aeac59085df4c020ba6c81": {
            "datetime": "2022-09-05T16:27:05-04:00",
            "summary": "Mitigate deprecation of aiohttp's `@middleware` decorator (#3259)",
            "message": "Mitigate deprecation of aiohttp's `@middleware` decorator (#3259)\n\nThis is deprecated since aiohttp 4.0. If it doesn't exist just define a\r\nno-op decorator that does nothing (after the other aiohttp imports\r\nthough!). By doing this, it's safe to ignore the DeprecationWarning\r\nwithout needing to require the latest aiohttp once they remove\r\n`@middleware`.",
            "diff": {
                "src/blackd/middlewares.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "383b228a1690d9c15ce97bd2e01874596fbf1288": {
            "datetime": "2022-09-06T08:27:39+10:00",
            "summary": "Move 3.11 tests to install aiohttp without C extensions (#3258)",
            "message": "Move 3.11 tests to install aiohttp without C extensions (#3258)\n\n* Move 311 tests to install aiohttp without C extensions\r\n\r\n- Configure tox to install aiohttp without extensions\r\n  - i.e. use `AIOHTTP_NO_EXTENSIONS=1` for pip install\r\n  - This allows us to reenable blackd tests that use aiohttp testing helpers etc.\r\n- Had to ignore `cgi` module deprecation warning\r\n  - Filed issue for aiohttp to fix: https://github.com/aio-libs/aiohttp/issues/6905\r\n\r\nTest:\r\n- `/tmp/tb/bin/tox -e 311`\r\n\r\n* Fix formatting + linting\r\n\r\n* Add latest aiohttp for loop fix + Try to exempt deprecation warning but failed - will ask for help\r\n\r\n* Remove unnecessary warning ignore\r\n\r\nCo-authored-by: Cooper Ry Lees <me@wcooperlees.com>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "tests/test_blackd.py": 375
            },
            "is_test": true,
            "is_fix": false
        },
        "72a25591b04b40d1c9b67844120457297c93ecb8": {
            "datetime": "2022-09-13T20:06:54-07:00",
            "summary": "[FIX] migrate-black.py: don't fail on binary files (#3266)",
            "message": "[FIX] migrate-black.py: don't fail on binary files (#3266)\n\n",
            "diff": {
                "scripts/migrate-black.py": 1
            },
            "is_test": false,
            "is_fix": false
        },
        "e2adcd7de10eb570987bb894d95f2ff8c8693b9f": {
            "datetime": "2022-09-13T23:23:51-04:00",
            "summary": "Fix a crash on dicts with paren-wrapped long string keys (#3262)",
            "message": "Fix a crash on dicts with paren-wrapped long string keys (#3262)\n\nFix a crash when formatting some dicts with parenthesis-wrapped long\r\nstring keys. When LL[0] is an atom string, we need to check the atom\r\nnode's siblings instead of LL[0] itself, e.g.:\r\n\r\n    dictsetmaker\r\n      atom\r\n        STRING '\"This is a really long string that can\\'t be expected to fit in one line and is used as a nested dict\\'s key\"'\r\n      /atom\r\n      COLON ':'\r\n      atom\r\n        LSQB ' ' '['\r\n        listmaker\r\n          STRING '\"value\"'\r\n          COMMA ','\r\n          STRING ' ' '\"value\"'\r\n        /listmaker\r\n        RSQB ']'\r\n      /atom\r\n      COMMA ','\r\n    /dictsetmaker\r\n",
            "diff": {
                "src/black/trans.py": 10,
                "tests/data/preview/long_strings.py": 21
            },
            "is_test": false,
            "is_fix": false
        },
        "75d5c0e3fbf5de67b995c80e12229b7525ff6bb9": {
            "datetime": "2022-09-22T20:11:56-07:00",
            "summary": "Build mypyc wheels for CPython 3.11 (#3276)",
            "message": "Build mypyc wheels for CPython 3.11 (#3276)\n\nBumps cibuildwheel from 2.8.1 to 2.10.0 which has 3.11 building enabled\r\nby default. Unfortunately mypyc errors out on 3.11:\r\n\r\nsrc/black/files.py:29:9: error: Name \"tomllib\" already defined (by an import)  [no-redef]\r\n\r\n... so we have to also hide the fallback import of tomli on older 3.11\r\nalphas from mypy[c].",
            "diff": {
                "src/black/files.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "bfc013ab93d0993a6e24235291dddd4c4ecd64ee": {
            "datetime": "2022-09-22T20:23:35-07:00",
            "summary": "Support version specifiers in GH action (#3265)",
            "message": "Support version specifiers in GH action (#3265)\n\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "action/main.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "55db05519ebfc502680aa55d289b7e47f6b2c6af": {
            "datetime": "2022-09-23T20:37:22-07:00",
            "summary": "Fix a crash when `# fmt: on` is used on a different block level than `# fmt: off` (#3281)",
            "message": "Fix a crash when `# fmt: on` is used on a different block level than `# fmt: off` (#3281)\n\nPreviously _Black_ produces invalid code because the `# fmt: on` is used on a different block level.\r\n\r\nWhile _Black_ requires `# fmt: off` and `# fmt: on` to be used at the same block level, incorrect usage shouldn't cause crashes.\r\n\r\nThe formatting behavior this PR introduces is, the code below the initial `# fmt: off` block level will be turned off for formatting, when `# fmt: on` is used on a different level or there is no `# fmt: on`. This also matches the current behavior when `# fmt: off` is used at the top-level without a matching `# fmt: on`, it turns off formatting for everything below `# fmt: off`.\r\n\r\n- Fixes #2567\r\n- Fixes #3184\r\n- Fixes #2985\r\n- Fixes #2882\r\n- Fixes #2232\r\n- Fixes #2140\r\n- Fixes #1817\r\n- Fixes #569\r\n",
            "diff": {
                "src/black/comments.py": 34,
                "src/black/nodes.py": 14,
                "tests/data/simple_cases/fmtonoff5.py": 122
            },
            "is_test": false,
            "is_fix": false
        },
        "468ceafca571454fd279f3b428076631fdaffd3d": {
            "datetime": "2022-09-25T17:54:33-04:00",
            "summary": "Switch build backend to Hatchling (#3233)",
            "message": "Switch build backend to Hatchling (#3233)\n\nThis implements PEP 621, obviating the need for `setup.py`, `setup.cfg`,\r\nand `MANIFEST.in`. The build backend Hatchling (of which I am a\r\nmaintainer in the PyPA) is now used as that is the default in the\r\nofficial Python packaging tutorial. Hatchling is available on all the\r\nmajor distribution channels such as Debian, Fedora, and many more.\r\n\r\n## Python support\r\n\r\nThe earliest supported Python 3 version of Hatchling is 3.7, therefore\r\nI've also set that as the minimum here. Python 3.6 is EOL and other\r\nbuild backends like flit-core and setuptools also dropped support.\r\nPython 3.6 accounted for 3-4% of downloads in the last month.\r\n\r\n## Plugins \r\n\r\nConfiguration is now completely static with the help of 3 plugins:\r\n\r\n### Readme\r\n\r\nhynek's hatch-fancy-pypi-readme allows for the dynamic construction of\r\nthe readme which was previously coded up in `setup.py`. Now it's simply:\r\n\r\n```toml\r\n[tool.hatch.metadata.hooks.fancy-pypi-readme]\r\ncontent-type = \"text/markdown\"\r\nfragments = [\r\n  { path = \"README.md\" },\r\n  { path = \"CHANGES.md\" },\r\n]\r\n```\r\n\r\n### Versioning\r\n\r\nhatch-vcs is currently just a wrapper around setuptools-scm (which\r\ndespite the legacy naming is actually now decoupled from setuptools):\r\n\r\n```toml\r\n[tool.hatch.version]\r\nsource = \"vcs\"\r\n\r\n[tool.hatch.build.hooks.vcs]\r\nversion-file = \"src/_black_version.py\"\r\ntemplate = '''\r\nversion = \"{version}\"\r\n'''\r\n```\r\n\r\n### mypyc\r\n\r\nhatch-mypyc offers many benefits over the existing approach:\r\n\r\n- No need to manually select files for inclusion\r\n- Avoids the need for the current CI workaround for https://github.com/mypyc/mypyc/issues/946\r\n- Intermediate artifacts (like `build/`) from setuptools and mypyc\r\n  itself no longer clutter the project directory\r\n- Runtime dependencies required at build time no longer need to be\r\n  manually redeclared as this is a built-in option of Hatchling\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "setup.py": 141
            },
            "is_test": false,
            "is_fix": false
        },
        "2189bcaac01d9b6289411a75557a23cf4a06b783": {
            "datetime": "2022-09-25T17:24:18-07:00",
            "summary": "Fix outdated references to 3.6 and run pyupgrade (#3286)",
            "message": "Fix outdated references to 3.6 and run pyupgrade (#3286)\n\nI also missed the accidental removal of the 3.11 classifier in the PR.",
            "diff": {
                "src/black/comments.py": 3,
                "src/black/concurrency.py": 12,
                "src/black/trans.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "af3de081542f66dfb1482dcf2a654b7e1668783c": {
            "datetime": "2022-09-25T17:55:52-07:00",
            "summary": "Always call freeze_support() if sys.frozen is True (#3275)",
            "message": "Always call freeze_support() if sys.frozen is True (#3275)\n\n",
            "diff": {
                "src/black/__init__.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "6b42c2b8c9f9bd666120a2c19b8da509fe477f27": {
            "datetime": "2022-09-26T17:45:34-04:00",
            "summary": "Add option to format Jupyter Notebooks in GitHub Action (#3282)",
            "message": "Add option to format Jupyter Notebooks in GitHub Action (#3282)\n\nTo run the formatter on Jupyter Notebooks, Black must be installed\r\nwith an extra dependency (`black[jupyter]`). This commit adds an\r\noptional argument to install Black with this dependency when using the\r\nofficial GitHub Action [1]. To enable the formatter on Jupyter\r\nNotebooks, just add `jupyter: true` as an argument. Feature requested\r\nat [2].\r\n\r\n[1]: https://black.readthedocs.io/en/stable/integrations/github_actions.html\r\n[2]: https://github.com/psf/black/issues/3280\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>",
            "diff": {
                "action/main.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "956bf3962edff284d05ad42576bac7e74ae8788d": {
            "datetime": "2022-10-02T12:26:45-04:00",
            "summary": "Add .ipynb_checkpoints to DEFAULT_EXCLUDES (#3293)",
            "message": "Add .ipynb_checkpoints to DEFAULT_EXCLUDES (#3293)\n\nJupyter creates a checkpoint file every single time you create an .ipynb\r\nfile, and then it updates the checkpoint file every single time you\r\nmanually save your progress for the initial .ipynb. These checkpoints\r\nare stored in a directory named `.ipynb_checkpoints`.\r\n\r\nCo-authored-by: Batuhan Taskaya <isidentical@gmail.com>",
            "diff": {
                "src/black/const.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "0359b85b5800dd77f8f1cfaa88ca8ab8215df685": {
            "datetime": "2022-10-04T13:10:11-07:00",
            "summary": "Preserve crlf line endings in blackd (#3257)",
            "message": "Preserve crlf line endings in blackd (#3257)\n\nCo-authored-by: KotlinIsland <kotlinisland@users.noreply.github.com>",
            "diff": {
                "src/blackd/__init__.py": 7,
                "tests/test_black.py": 11,
                "tests/test_blackd.py": 17
            },
            "is_test": true,
            "is_fix": false
        },
        "4da0851809e024760d3861ff43309125de34157a": {
            "datetime": "2022-10-06T15:17:32-07:00",
            "summary": "Add option to skip the first line of source code (#3299)",
            "message": "Add option to skip the first line of source code (#3299)\n\n* Add option to skip the first line in source file\r\n\r\nThis commit adds a CLi option to skip the first line in the source\r\nfiles, just like the Cpython command line allows [1]. By enabling the\r\nflag, using `-x` or `--skip-source-first-line`, the first line is\r\nremoved temporarilly while the remaining contents are formatted. The\r\nfirst line is added back before returning the formatted output.\r\n\r\n[1]: https://docs.python.org/dev/using/cmdline.html#cmdoption-x\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Add tests for `--skip-source-first-line` option\r\n\r\nWhen the flag is disabled (default), black formats the entire source\r\nfile, as in every line. In the other hand, if the flag is enabled, by\r\nusing `-x` or `--skip-source-first-line`, the first line is retained\r\nwhile the rest of the source is formatted and then is added back.\r\n\r\nThese tests use an empty Python file that contains invalid syntax in\r\nits first line (`invalid_header.py`, at `miscellaneous/`). First,\r\nBlack is invoked without enabling the flag which should result in an\r\nexit code different than 0. When the flag is enabled, Black is\r\nexpected to return a successful exit code and the header is expected\r\nto be retained (even if its not valid Python syntax).\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Support skip source first line option for blackd\r\n\r\nThe recently added option can be added as an acceptable header for\r\nblackd. The arguments are passed in such a way that using the new\r\nheader will activate the skip source first line behaviour as expected\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Add skip source first line option to blackd docs\r\n\r\nThe new option can be passed to blackd as a header. This commit\r\nupdates the blackd docs to include the new header.\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Update CHANGES.md\r\n\r\nInclude the new Black option to skip the first line of source code in\r\nthe configuration section\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Update skip first line test including valid syntax\r\n\r\nIncluding valid Python syntax help us make sure that the file is still\r\nactually valid after skipping the first line of the source file (which\r\ncontains invalid Python syntax)\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Skip first source line at `format_file_in_place`\r\n\r\nInstead of skipping the first source line at `format_file_contents`,\r\ndo it before. This allow us to find the correct newline and encoding\r\non the actual source code (everything that's after the header).\r\n\r\nThis change is also applied at Blackd: take the header before passing\r\nthe source to `format_file_contents` and put the header back once we\r\nget the formatted result.\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Test output newlines when skipping first line\r\n\r\nWhen skipping the first line of source code, the reference newline must\r\nbe taken from the second line of the file instead of the first one, in\r\ncase that the file mixes more than one kind of newline character\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Test that Blackd also skips first line correctly\r\n\r\nSimliarly to the Black tests, we first compare that Blackd fails when\r\nthe first line is invalid Python syntax and then check that the result\r\nis the expected when tha flag is activated\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Use the content encoding to decode the header\r\n\r\nWhen decoding the header to put it back at the top of the contents of\r\nthe file, use the same encoding used in the content. This should be a\r\nbetter \"guess\" that using the default value\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>",
            "diff": {
                "src/black/__init__.py": 13,
                "src/black/mode.py": 2,
                "src/blackd/__init__.py": 16,
                "tests/data/miscellaneous/invalid_header.py": 2,
                "tests/test_black.py": 24,
                "tests/test_blackd.py": 14
            },
            "is_test": true,
            "is_fix": false
        },
        "b60b85b234d6a575f636d0a125478115f993c90c": {
            "datetime": "2022-10-06T17:37:37-07:00",
            "summary": "Remove redundant 3.6 code and bump mypy's python_version to 3.7 (#3313)",
            "message": "Remove redundant 3.6 code and bump mypy's python_version to 3.7 (#3313)\n\n",
            "diff": {
                "src/black/__init__.py": 4,
                "src/black/concurrency.py": 6,
                "src/black/parsing.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "1c786ee6273377ac68a98483c1e6e7cd81bde332": {
            "datetime": "2022-10-11T10:54:09+11:00",
            "summary": "Add support for named exprs inside function calls as gen-exps (#3327)",
            "message": "Add support for named exprs inside function calls as gen-exps (#3327)\n\n",
            "diff": {
                "tests/data/py_310/pep_572_py310.py": 11
            },
            "is_test": false,
            "is_fix": false
        },
        "f16333e78ba77ab29ab0b75e10891e6c65c6da7e": {
            "datetime": "2022-10-11T14:34:37-07:00",
            "summary": "remove unreachable code (#3328)",
            "message": "remove unreachable code (#3328)\n\nfixes #3321",
            "diff": {
                "src/black/parsing.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4abc0399b527c50369c448e00d6e204af74026e5": {
            "datetime": "2022-10-25T18:03:24-07:00",
            "summary": "Enforce empty lines before classes/functions with sticky leading comments. (#3302)",
            "message": "Enforce empty lines before classes/functions with sticky leading comments. (#3302)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 21,
                "src/black/lines.py": 88,
                "src/black/mode.py": 1,
                "tests/data/preview/comments9.py": 254,
                "tests/data/preview/remove_await_parens.py": 1,
                "tests/data/simple_cases/comments5.py": 6,
                "tests/data/simple_cases/docstring_no_extra_empty_line_before_eof.py": 4
            },
            "is_test": false,
            "is_fix": false
        },
        "b73b77a9b039d5afa6ab32202bff2b2232258d45": {
            "datetime": "2022-10-26T18:03:10-07:00",
            "summary": "Wrap concatenated strings used as function args in parens (#3307)",
            "message": "Wrap concatenated strings used as function args in parens (#3307)\n\nFixes #3292",
            "diff": {
                "src/black/__init__.py": 6,
                "src/black/mode.py": 6,
                "src/black/parsing.py": 8,
                "src/black/trans.py": 43,
                "tests/data/preview/cantfit.py": 12,
                "tests/data/preview/long_strings.py": 54,
                "tests/data/preview/long_strings__regression.py": 22,
                "tests/test_black.py": 126
            },
            "is_test": true,
            "is_fix": false
        },
        "0e9d29ab73d608a79028e22a713ee717b5dcca96": {
            "datetime": "2022-11-04T22:09:59-07:00",
            "summary": "Apply .gitignore correctly in every source entry (#3336)",
            "message": "Apply .gitignore correctly in every source entry (#3336)\n\nWhen passing multiple src directories, the root gitignore was only\r\napplied to the first processed source. The reason is that, in the\r\nfirst source, exclude is `None`, but then the value gets overridden by\r\n`re_compile_maybe_verbose(DEFAULT_EXCLUDES)`, so in the next iteration\r\nwhere the source is a directory, the condition is not met and sets the\r\nvalue of `gitignore` to `None`.\r\n\r\nTo fix this problem, we store a boolean indicating if `exclude` is\r\n`None` and set the value of `exclude` to its default value if that's\r\nthe case. This makes sure that the flow enters the correct condition on\r\nfollowing iterations and also keeps the original value if the condition\r\nis not met.\r\n\r\nAlso, the value of `gitignore` is initialized as `None` and overriden\r\nif necessary. The value of `root_gitignore` is always calculated to\r\navoid using additional variables (at the small cost of additional\r\ncomputations).\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n",
            "diff": {
                "src/black/__init__.py": 18,
                "tests/data/gitignore_used_on_multiple_sources/dir1/a.py": 0,
                "tests/data/gitignore_used_on_multiple_sources/dir1/b.py": 0,
                "tests/data/gitignore_used_on_multiple_sources/dir2/a.py": 0,
                "tests/data/gitignore_used_on_multiple_sources/dir2/b.py": 0,
                "tests/test_black.py": 11
            },
            "is_test": true,
            "is_fix": false
        },
        "ffaaf4838228c922b586a87f717ed402031fcc0a": {
            "datetime": "2022-11-08T07:50:04-08:00",
            "summary": "Compare each .gitignore found with an appropiate relative path (#3338)",
            "message": "Compare each .gitignore found with an appropiate relative path (#3338)\n\n* Apply .gitignore files considering their location\r\n\r\nWhen a .gitignore file contains the special rule to ignore every\r\nsubfolder content (`*/*`) and the file is located in a subfolder\r\nrelative to where the command is executed (root), the rule is\r\nincorrectly applied and ignores every file at the same level of the\r\n.gitignore file.\r\n\r\nThe reason for this is that the `gitignore` variable accumulates the\r\nrules found in each .gitignore while traversing files and directories\r\nrecursively. This makes sense and, in general, works as expected. The\r\nproblem is that the gitignore rules are applied using as the relative\r\npath from root to target directory as a reference. This is the cause\r\nof the bug.\r\n\r\nThe implemented solution keeps track of every .gitignore file found\r\nwhile traversing the targets and the absolute location of each\r\n.gitignore file. Then, when matching files to the .gitignore rules,\r\ncompare each set of rules with the appropiate relative path to the\r\ncandidate target file.\r\n\r\nTo make this possible, we changed the single `gitignore` object with a\r\ndictionary of similar objects, where the corresponding key is the\r\nabsolute path to the folder that contains that .gitignore file. This\r\nrequired changing the signature of the `get_sources` function. Also, we\r\nintroduce a `is_ignored` function that compares a file with every set\r\nof rules. Finally, some tests required an update to pass the gitignore\r\nobject in the new format.\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Test .gitignore with `*/*` is applied correctly\r\n\r\nThe test contains three cases: 1) when the .gitignore with the special\r\nrule to ignore every subfolder and its contents (*/*) is in the root,\r\n2) when the file is inside a subfolder relative to root (nested), and\r\n3) when the target folder contains the .gitignore and root is a parent\r\nfolder of the target. In all of these cases, we compare the files that\r\nare visible by Black with a known list of paths containing the\r\nexpected values.\r\n\r\nBefore the fix introduced in the previous commit, these tests failed\r\nwhen the .gitignore file was nested (second case). Now, the test is\r\npassed for all cases.\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Update CHANGES.md\r\n\r\nAdd entry about fixed bug and changes introduced: ignore files by\r\nconsidering the location of each .gitignore file and the relative path\r\nof each target\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Small refactor to improve code readability\r\n\r\nThese changes are small improvements to improve code readability:\r\nrename a variable to a more descriptive name (from `exclude_is_None`\r\nto `using_default_exclude`), use a better syntax to include the type\r\nannotation for `gitignore` variable (from typing comment to\r\nPython-style typing annotation), and replace an if-else block with a\r\nsingle dictionary definition (in this case, we need to compare keys\r\ninstead of values, meaning that the change works)\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\n* Make nested function a top-level function\r\n\r\nThe function to match a given path with every discovered .gitignore\r\nfile does not need to be a nested function and can be a top-level\r\nfunction. The arguments did not change, but the naming of local\r\nvariables was improved for readability.\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>",
            "diff": {
                "src/black/__init__.py": 17,
                "src/black/files.py": 28,
                "tests/data/ignore_subfolders_gitignore_tests/a.py": 0,
                "tests/data/ignore_subfolders_gitignore_tests/subdir/b.py": 0,
                "tests/data/ignore_subfolders_gitignore_tests/subdir/subdir/c.py": 0,
                "tests/test_black.py": 32
            },
            "is_test": true,
            "is_fix": false
        },
        "8091b2503d12dd0110e0f1a9ed1e6b830aa668ed": {
            "datetime": "2022-11-09T15:08:51-08:00",
            "summary": "Correctly handle trailing commas that are inside a line's leading non-nested parens (#3370)",
            "message": "Correctly handle trailing commas that are inside a line's leading non-nested parens (#3370)\n\n- Fixes #1671\r\n- Fixes #3229\r\n",
            "diff": {
                "src/black/brackets.py": 34,
                "src/black/linegen.py": 70,
                "src/black/lines.py": 6,
                "src/black/mode.py": 1,
                "tests/data/preview/skip_magic_trailing_comma.py": 40,
                "tests/data/preview/trailing_commas_in_leading_parts.py": 74,
                "tests/data/simple_cases/function_trailing_comma.py": 29
            },
            "is_test": false,
            "is_fix": false
        },
        "d97b7898b34b67eb3c6839998920e17ac8c77908": {
            "datetime": "2022-11-11T20:05:36-05:00",
            "summary": "Remove whitespaces of whitespace-only files (#3348)",
            "message": "Remove whitespaces of whitespace-only files (#3348)\n\nCurrently, empty and whitespace-only (with or without newlines) are\r\nnot modified. In some discussions (issues and pull requests) consensus\r\nwas to reformat whitespace-only files to empty or single-character\r\nfiles, preserving line endings when possible. With that said, this\r\ncommit introduces the following behaviors:\r\n\r\n* Empty files are left as is\r\n* Whitespace-only files (no newline) reformat into empty files\r\n* Whitespace-only files (1 or more newlines) reformat into a single\r\nnewline character\r\n\r\nTo implement these changes, we moved the initial check at\r\n`format_file_contents` that raises `NothingChanged` if the source\r\n(with no whitespaces) is an empty string. In the case of *.ipynb\r\nfiles, `format_ipynb_string` checks a similar condition and removed\r\nwhitespaces. In the case of Python files, `format_str_once` includes a\r\ncheck on the output that returns the correct newline character if\r\npossible or an empty string otherwise.\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>",
            "diff": {
                "src/black/__init__.py": 12,
                "tests/data/preview/whitespace.py": 6,
                "tests/test_black.py": 87
            },
            "is_test": true,
            "is_fix": false
        },
        "1f7f6de4aba4e1e42cb2f947204f8256f7370cb0": {
            "datetime": "2022-12-10T07:08:05-08:00",
            "summary": "Fix type annotation for gitignore pathspec (#3416)",
            "message": "Fix type annotation for gitignore pathspec (#3416)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "96e62c57e3023977de177a8ba34678007a63f1fe": {
            "datetime": "2022-12-10T07:58:45-08:00",
            "summary": "Fix a crash in preview style with assert + parenthesized string. (#3415)",
            "message": "Fix a crash in preview style with assert + parenthesized string. (#3415)\n\nThe bug is in the `get_leaves_inside_matching_brackets` on the third line below:\r\n\r\n```python\r\nassert xxxxxxxxx.xxxxxxxxx.xxxxxxxxx(\r\n    xxxxxxxxx\r\n).xxxxxxxxxxxxxxxxxx(), (\r\n    \"xxx {xxxxxxxxx} xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\r\n)\r\n```\r\n\r\nIncluding the invisible paren, third line is `).xxxxxxxxxxxxxxxxxx()), (`, that it has a matched pair then an unmatched closing paren afterwards. This PR ensures the returned leaves are actually matched.\r\n\r\nFixes #3414.",
            "diff": {
                "src/black/brackets.py": 25,
                "tests/data/preview/trailing_commas_in_leading_parts.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "16b98abca94343770aad561ea659380c97d473b4": {
            "datetime": "2022-12-10T11:49:33-08:00",
            "summary": "make black[jupyter] installation cross-shell (#3394)",
            "message": "make black[jupyter] installation cross-shell (#3394)\n\n",
            "diff": {
                "src/black/handle_ipynb_magics.py": 2,
                "tests/test_no_ipynb.py": 4
            },
            "is_test": true,
            "is_fix": false
        },
        "5f0dc862f5bbfc8abed3f29d76325404eb4f99c0": {
            "datetime": "2022-12-10T12:56:14-08:00",
            "summary": "Adding pyproject.toml configuration output to verbose logging (#3392)",
            "message": "Adding pyproject.toml configuration output to verbose logging (#3392)\n\n",
            "diff": {
                "src/black/__init__.py": 3
            },
            "is_test": false,
            "is_fix": false
        },
        "7d062ecd5f14124a99daf452c46054ada656ad8b": {
            "datetime": "2022-12-12T23:56:38-05:00",
            "summary": "Do not put the closing quotes in a docstring on a separate line (#3430)",
            "message": "Do not put the closing quotes in a docstring on a separate line (#3430)\n\nFixes #3320. Followup from #3044.",
            "diff": {
                "src/black/linegen.py": 13,
                "tests/data/preview/docstring_preview.py": 6
            },
            "is_test": false,
            "is_fix": false
        },
        "a2821815af5f5a706c673279d6405e286d6e95b8": {
            "datetime": "2022-12-14T17:56:14-08:00",
            "summary": "Fix a crash when a colon line is marked between `# fmt: off` and `# fmt: on` (#3439)",
            "message": "Fix a crash when a colon line is marked between `# fmt: off` and `# fmt: on` (#3439)\n\n",
            "diff": {
                "src/black/comments.py": 12,
                "tests/data/simple_cases/fmtonoff5.py": 22
            },
            "is_test": false,
            "is_fix": false
        },
        "658c8d8d96047c5ba77be4aecc2545a22d5e35b9": {
            "datetime": "2022-12-15T08:25:28-08:00",
            "summary": "Improve long values in dict literals (#3440)",
            "message": "Improve long values in dict literals (#3440)\n\n",
            "diff": {
                "src/black/linegen.py": 17,
                "src/black/mode.py": 3,
                "src/black/trans.py": 36,
                "tests/data/preview/long_dict_values.py": 53,
                "tests/data/preview/long_strings.py": 28,
                "tests/data/preview/long_strings__regression.py": 15
            },
            "is_test": false,
            "is_fix": false
        },
        "aafc21aa77f5c4d2ebcb833aa60faba6c2138b94": {
            "datetime": "2022-12-15T15:58:51-08:00",
            "summary": "Prefer splitting right hand side of assignment statements. (#3368)",
            "message": "Prefer splitting right hand side of assignment statements. (#3368)\n\n",
            "diff": {
                "src/black/linegen.py": 122,
                "src/black/mode.py": 1,
                "tests/data/preview/long_strings__regression.py": 6,
                "tests/data/preview/prefer_rhs_split.py": 85,
                "tests/data/preview/prefer_rhs_split_reformatted.py": 38
            },
            "is_test": false,
            "is_fix": false
        },
        "78163939f157d9e18a8c0528fc5e1c58b1c1e69c": {
            "datetime": "2022-12-16T05:02:41-08:00",
            "summary": "Fix an infinite recursion error exposed by #3440 (#3444)",
            "message": "Fix an infinite recursion error exposed by #3440 (#3444)\n\n",
            "diff": {
                "src/black/linegen.py": 6,
                "tests/data/preview/long_dict_values.py": 37
            },
            "is_test": false,
            "is_fix": false
        },
        "159984a7351bfc4789bc0fc85b5f408112efca85": {
            "datetime": "2022-12-17T10:31:47-08:00",
            "summary": "Check stability for both preview and non-preview styles (#3423)",
            "message": "Check stability for both preview and non-preview styles (#3423)\n\nAnd fix parens-related test failures this found.\r\n\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>",
            "diff": {
                "src/black/linegen.py": 2,
                "tests/data/py_310/pattern_matching_extras.py": 2,
                "tests/util.py": 54
            },
            "is_test": false,
            "is_fix": false
        },
        "1e8217fd6284bdb020e7ca70964d677a3016f914": {
            "datetime": "2022-12-20T06:36:42-08:00",
            "summary": "Fix an f-string crash in ESP. (#3463)",
            "message": "Fix an f-string crash in ESP. (#3463)\n\n",
            "diff": {
                "src/black/trans.py": 9,
                "tests/data/preview/long_strings__regression.py": 28
            },
            "is_test": false,
            "is_fix": false
        },
        "a44dc3d59eb46901f9fe893727280903df41fc20": {
            "datetime": "2022-12-20T13:38:35-08:00",
            "summary": "Exclude string type annotations from ESP (#3462)",
            "message": "Exclude string type annotations from ESP (#3462)\n\n",
            "diff": {
                "src/black/brackets.py": 16,
                "src/black/nodes.py": 12,
                "src/black/trans.py": 23,
                "tests/data/preview/long_strings__type_annotations.py": 59
            },
            "is_test": false,
            "is_fix": false
        },
        "73c2d5514ce604141abe176b1f3e5cd35ff51d56": {
            "datetime": "2022-12-20T14:59:38-08:00",
            "summary": "Fix a crash in ESP where a standalone comment is placed before a dict's value (#3469)",
            "message": "Fix a crash in ESP where a standalone comment is placed before a dict's value (#3469)\n\n",
            "diff": {
                "src/black/trans.py": 2,
                "tests/data/preview/long_strings__regression.py": 14
            },
            "is_test": false,
            "is_fix": false
        },
        "29dd25725303992d36c3a75c3a071080ac06085f": {
            "datetime": "2022-12-20T17:58:02-08:00",
            "summary": "Fix an issue where extra empty lines are added. (#3470)",
            "message": "Fix an issue where extra empty lines are added. (#3470)\n\n",
            "diff": {
                "src/black/lines.py": 3,
                "tests/data/preview/comments9.py": 51
            },
            "is_test": false,
            "is_fix": false
        },
        "3feff21eca0eee4b9fe72d12b506ac273cb5bcd0": {
            "datetime": "2022-12-23T12:13:45-08:00",
            "summary": "Significantly speedup ESP on large expressions that contain many strings (#3467)",
            "message": "Significantly speedup ESP on large expressions that contain many strings (#3467)\n\n",
            "diff": {
                "src/black/trans.py": 281,
                "tests/data/preview/long_strings.py": 31
            },
            "is_test": false,
            "is_fix": false
        },
        "9b91638190342cf5a66d4edb11068526f7ebda59": {
            "datetime": "2022-12-25T18:39:51-08:00",
            "summary": "Fix some typos (#3474)",
            "message": "Fix some typos (#3474)\n\n",
            "diff": {
                "tests/data/preview/prefer_rhs_split.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "4e3303fa08e030722d6fd4d7fe7b8d44ef98991c": {
            "datetime": "2022-12-29T15:13:15-08:00",
            "summary": "Parenthesize conditional expressions (#2278)",
            "message": "Parenthesize conditional expressions (#2278)\n\nCo-authored-by: Jordan Ephron <JEphron@users.noreply.github.com>\r\nCo-authored-by: Richard Si <63936253+ichard26@users.noreply.github.com>\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/__init__.py": 16,
                "src/black/linegen.py": 16,
                "src/black/mode.py": 1,
                "tests/data/conditional_expression.py": 160
            },
            "is_test": false,
            "is_fix": false
        },
        "60a2e8e2c26d6312cd86b40f680c5037571acafc": {
            "datetime": "2023-01-16T12:26:03-08:00",
            "summary": "Fix two docstring crashes (#3451)",
            "message": "Fix two docstring crashes (#3451)\n\n",
            "diff": {
                "src/black/linegen.py": 4,
                "tests/data/miscellaneous/linelength6.py": 5,
                "tests/data/simple_cases/docstring.py": 11,
                "tests/test_format.py": 7
            },
            "is_test": true,
            "is_fix": true
        },
        "7e6d3fac197395b0a2b380cc60811536fe23626b": {
            "datetime": "2023-01-17T22:25:05-08:00",
            "summary": "Fix crash with walrus + await + with (#3473)",
            "message": "Fix crash with walrus + await + with (#3473)\n\nFixes #3472\r\n",
            "diff": {
                "src/black/linegen.py": 4,
                "src/black/nodes.py": 11,
                "tests/data/fast/pep_572_do_not_remove_parens.py": 4,
                "tests/data/py_38/pep_572_remove_parens.py": 40
            },
            "is_test": false,
            "is_fix": false
        },
        "18fb88486d434dbde9b2a9c98f008a71cf5d941d": {
            "datetime": "2023-01-18T21:38:27-05:00",
            "summary": "Fix false symlink detection claims in verbose output (#3385)",
            "message": "Fix false symlink detection claims in verbose output (#3385)\n\nWhen trying to format a project from the outside, the verbose output\r\nshows says that there are symbolic links that points outside of the\r\nproject, but displays the wrong project path, meaning that these\r\nmessages are false positives.\r\n\r\nThis bug is triggered when the command is executed from outside a\r\nproject on a folder inside it, causing an inconsistency between the\r\npath to the detected project root and the relative path to the target\r\ncontents.\r\n\r\nThe fix is to normalize the target path using the project root before\r\nprocessing the sources, which removes the presence of the incorrect\r\nmessages.\r\n\r\n---\r\n\r\nThe test attemps to emulate the behavior of the CLI as closely as\r\nposible by patching some `pathlib.Path` methods and passing certain\r\nreference paths to the context object and `black.get_sources`.\r\n\r\nBefore the associated fix was introduced, this test failed because\r\nsome of the captured files reported the presence of a symlink due to\r\nan incorrectly formated path. The test also asserts that only a single\r\nfile is reported as ignored, which is part of the expected behavior.\r\n\r\nSigned-off-by: Antonio Ossa Guerra <aaossa@uc.cl>\r\n",
            "diff": {
                "src/black/__init__.py": 3,
                "tests/test_black.py": 47
            },
            "is_test": true,
            "is_fix": true
        },
        "91e1e1328aa0a11ef50017316ff97149886e1b05": {
            "datetime": "2023-01-20T04:14:05-08:00",
            "summary": "Wrap multiple context managers in parentheses when targeting Python 3.9+ (#3489)",
            "message": "Wrap multiple context managers in parentheses when targeting Python 3.9+ (#3489)\n\n",
            "diff": {
                "src/black/__init__.py": 28,
                "src/black/linegen.py": 101,
                "src/black/mode.py": 5,
                "tests/data/preview_context_managers/auto_detect/features_3_10.py": 35,
                "tests/data/preview_context_managers/auto_detect/features_3_11.py": 37,
                "tests/data/preview_context_managers/auto_detect/features_3_8.py": 30,
                "tests/data/preview_context_managers/auto_detect/features_3_9.py": 34,
                "tests/data/preview_context_managers/targeting_py38.py": 38,
                "tests/data/preview_context_managers/targeting_py39.py": 104,
                "tests/test_format.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "eabff673b37c5430d4cf72fa050a189a57be2deb": {
            "datetime": "2023-01-22T05:21:09-08:00",
            "summary": "Format hex code in unicode escape sequences in string literals (#2916)",
            "message": "Format hex code in unicode escape sequences in string literals (#2916)\n\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>",
            "diff": {
                "src/black/linegen.py": 4,
                "src/black/mode.py": 1,
                "src/black/strings.py": 44,
                "tests/data/preview/format_unicode_escape_seq.py": 33
            },
            "is_test": false,
            "is_fix": false
        },
        "a36878eb2f375e2ac1e13052f663909f3835ec46": {
            "datetime": "2023-01-22T05:27:11-08:00",
            "summary": "Fix an invalid quote escaping bug in f-string expressions (#3509)",
            "message": "Fix an invalid quote escaping bug in f-string expressions (#3509)\n\nFixes #3506\r\n\r\nWe can't simply escape the quotes in a naked f-string when merging string groups, because backslashes are invalid.\r\n\r\nThe quotes in f-string expressions should be toggled (this is safe since quotes can't be reused).\r\n\r\nThis fix also means implicitly concatenated f-strings with different quotes can now be merged or quote-normalized by changing the quotes used in expressions. e.g.:\r\n\r\n```diff\r\n         raise sa_exc.UnboundExecutionError(\r\n             \"Could not locate a bind configured on \"\r\n-            f'{\", \".join(context)} or this Session.'\r\n+            f\"{', '.join(context)} or this Session.\"\r\n         )\r\n```\r\n",
            "diff": {
                "src/black/trans.py": 30,
                "tests/data/preview/long_strings__regression.py": 18
            },
            "is_test": false,
            "is_fix": false
        },
        "196b1f349eb2baa9bbbc483226874cc01fb7567d": {
            "datetime": "2023-01-24T05:43:24-08:00",
            "summary": "Fix `black --help` output for `--python-cell-magics` option to be reproducible (#3516)",
            "message": "Fix `black --help` output for `--python-cell-magics` option to be reproducible (#3516)\n\n",
            "diff": {
                "src/black/__init__.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "226cbf0226ee3bc26972357ba54c36409e9a84ae": {
            "datetime": "2023-01-30T21:53:14-05:00",
            "summary": "Fix unsafe cast in linegen.py w/ await yield handling (#3533)",
            "message": "Fix unsafe cast in linegen.py w/ await yield handling (#3533)\n\nFixes #3532.",
            "diff": {
                "src/black/linegen.py": 25,
                "tests/data/preview/remove_await_parens.py": 7
            },
            "is_test": false,
            "is_fix": false
        },
        "c4bd2e31ceeac84d68592986fe70920f3d3d0443": {
            "datetime": "2023-01-31T15:39:56-08:00",
            "summary": "Draft for Black 2023 stable style (#3418)",
            "message": "Draft for Black 2023 stable style (#3418)\n\n",
            "diff": {
                "src/black/__init__.py": 9,
                "src/black/comments.py": 58,
                "src/black/linegen.py": 99,
                "src/black/lines.py": 38,
                "src/black/mode.py": 8,
                "tests/data/preview/comments8.py": 0,
                "tests/data/preview/comments9.py": 0,
                "tests/data/preview/docstring_preview.py": 0,
                "tests/data/preview/one_element_subscript.py": 0,
                "tests/data/preview/prefer_rhs_split_reformatted.py": 0,
                "tests/data/preview/remove_await_parens.py": 0,
                "tests/data/preview/remove_except_parens.py": 0,
                "tests/data/preview/remove_for_brackets.py": 0,
                "tests/data/preview/remove_newline_after_code_block_open.py": 0,
                "tests/data/preview/return_annotation_brackets.py": 12,
                "tests/data/preview/return_annotation_brackets_string.py": 12,
                "tests/data/preview/skip_magic_trailing_comma.py": 0,
                "tests/data/preview/trailing_commas_in_leading_parts.py": 0,
                "tests/data/preview/whitespace.py": 0,
                "tests/data/preview_310/remove_newline_after_match.py": 0,
                "tests/data/preview_39/remove_with_brackets.py": 0,
                "tests/data/py_310/parenthesized_context_managers.py": 24,
                "tests/data/py_311/pep_654_style.py": 2,
                "tests/data/py_38/pep_572_remove_parens.py": 4,
                "tests/data/simple_cases/comments2.py": 1,
                "tests/data/simple_cases/comments3.py": 5,
                "tests/data/simple_cases/comments5.py": 2,
                "tests/data/simple_cases/empty_lines.py": 1,
                "tests/data/simple_cases/fmtonoff.py": 1,
                "tests/data/simple_cases/function_trailing_comma.py": 16,
                "tests/test_black.py": 3,
                "tests/test_format.py": 24
            },
            "is_test": true,
            "is_fix": false
        },
        "69ca0a4c7a365c5f5eea519a90980bab72cab764": {
            "datetime": "2023-01-31T18:00:17-08:00",
            "summary": "Infer target version based on project metadata (#3219)",
            "message": "Infer target version based on project metadata (#3219)\n\nCo-authored-by: Richard Si <sichard26@gmail.com>",
            "diff": {
                "src/black/__init__.py": 5,
                "src/black/files.py": 100,
                "src/black/parsing.py": 6,
                "tests/test_black.py": 66
            },
            "is_test": true,
            "is_fix": false
        },
        "dd0e912a6e7ebe432299e317e2e79b592fc2adc3": {
            "datetime": "2023-02-03T22:00:09-08:00",
            "summary": "Fix import of blib2to3.pgen2.driver (#3546)",
            "message": "Fix import of blib2to3.pgen2.driver (#3546)\n\n",
            "diff": {
                "src/blib2to3/pgen2/parse.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "ff53fc1b97b98075f92fcc954ed81b9252e7c9c1": {
            "datetime": "2023-02-04T19:35:43-08:00",
            "summary": "Actually add trailing commas to collection literals even if there are terminating comments (#3393)",
            "message": "Actually add trailing commas to collection literals even if there are terminating comments (#3393)\n\n\r\nCo-authored-by: Jelle Zijlstra <jelle.zijlstra@gmail.com>\r\nCo-authored-by: Richard Si <sichard26@gmail.com>",
            "diff": {
                "src/black/linegen.py": 62,
                "src/black/mode.py": 1,
                "src/black/trans.py": 12,
                "tests/data/preview/trailing_comma.py": 55,
                "tests/data/preview_context_managers/targeting_py39.py": 2
            },
            "is_test": false,
            "is_fix": false
        },
        "9c8464ca7ddd48d1c19112d895ae12d783f01563": {
            "datetime": "2023-02-07T14:48:09-08:00",
            "summary": "Fix typos in comments: assignement -> assignment (#3556)",
            "message": "Fix typos in comments: assignement -> assignment (#3556)\n\n",
            "diff": {
                "src/black/linegen.py": 2,
                "tests/data/preview/prefer_rhs_split.py": 2,
                "tests/data/simple_cases/prefer_rhs_split_reformatted.py": 4
            },
            "is_test": false,
            "is_fix": false
        }
    }
}